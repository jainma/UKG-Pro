{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0",
    "description": "Common Resources is the largest single domain and consists of two groupings. Common Resources are shared by all domains, allowing you to access and manipulate general employee data, user display profiles, business structures, the Control Center, the Transaction Assistant, and data aggregated across domains.",
    "title": "Common Resources II"
  },
  "paths": {
    "/v1/commons/locale_policies/multi_delete": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "<ul><li>Incorrect Request Parameter/Invalid Request Body.</li><li>You cannot delete the tenant default locale policy.</li>"
          },
          "404": {
            "description": "The Locale Policy cannot be found."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocalePolicyMultiDeleteRequest"
              }
            }
          },
          "description": "The Delete Locale Policies request payload.",
          "required": true
        },
        "description": "This operation deletes a list of locale policies.",
        "tags": [
          "Locale Policies"
        ],
        "summary": "Delete Locale Policies",
        "operationId": "Delete Locale Policies"
      }
    },
    "/v1/commons/known_places/multi_delete": {
      "post": {
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Known_Place_Response"
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted known place(s)."
          },
          "207": {
            "description": "Multi-delete operation resulted in at least one failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Known_Place_Response"
                }
              }
            }
          },
          "404": {
            "description": "Known Places with the provided IDs do not exist."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Known_Place_Multi_Delete_Request"
              }
            }
          },
          "description": "The Delete Known Places request payload.",
          "required": true
        },
        "description": "<p>This operation deletes one or more Known Places by ID.</p><br /><p>The associated Access Control Point is KNOWN_PLACES.</p>",
        "tags": [
          "GPS Known Places"
        ],
        "summary": "Delete Known Places",
        "operationId": "Delete Known Places"
      }
    },
    "/v1/commons/currency/definitions/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a currency definition by ID."
          },
          "403": {
            "description": "You are not authorized to perform this operation."
          },
          "404": {
            "description": "The requested ID does not exist."
          }
        },
        "parameters": [
          {
            "description": "An ID that uniquely identifies a currency definition.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Currency Definitions"
        ],
        "description": "This operation returns a currency definition by ID.",
        "summary": "Retrieve Currency Definition by ID",
        "operationId": "Retrieve Currency Definition by ID"
      }
    },
    "/v1/commons/location_types/apply_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMapMultipleLocationTypeApplyReadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgMapMultipleLocationTypeApplyReadRequest"
              }
            }
          },
          "description": "The Retrieve Location Types by Location request payload.",
          "required": true
        },
        "description": "This operation returns location (node) types by location.",
        "tags": [
          "Location Types"
        ],
        "summary": "Retrieve Location Types by Location",
        "operationId": "Retrieve Location Types by Location"
      }
    },
    "/v1/commons/locale_policies/{id}": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonsLocalePolicy"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Incorrect Request Parameter/Invalid Request Body.</li><li>Invalid characters ({reservedChar}) were found in the parameter for locale.</li>"
          },
          "409": {
            "description": "<ul><li>The name already exists for another locale.</li><li>The length of {param} cannot exceed {max} characters for locale.</li><li>DecimalSymbol and GroupingSymbol must not be the same for locale.</li>"
          }
        },
        "parameters": [
          {
            "description": "The ID of the Locale Policy to update.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommonsLocalePolicy"
              }
            }
          },
          "description": "The Update Locale Policy by ID request payload.",
          "required": true
        },
        "description": "This operation updates a locale policy by ID.",
        "tags": [
          "Locale Policies"
        ],
        "summary": "Update Locale Policy by ID",
        "operationId": "Update Locale Policy by ID"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Success."
          },
          "400": {
            "description": "<ul><li>Incorrect Request Parameter/Invalid Request Body.</li><li>You cannot delete the tenant default locale policy.</li>"
          },
          "404": {
            "description": "The Locale Policy cannot be found."
          }
        },
        "parameters": [
          {
            "description": "The ID of a locale policy.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "This operation deletes a locale policy by ID.",
        "tags": [
          "Locale Policies"
        ],
        "summary": "Delete Locale Policy by ID",
        "operationId": "Delete Locale Policy by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonsLocalePolicy"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          },
          "404": {
            "description": "The Locale Policy cannot be found."
          }
        },
        "parameters": [
          {
            "description": "The ID of a locale policy.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "This operation returns a locale policy by ID.",
        "tags": [
          "Locale Policies"
        ],
        "summary": "Retrieve Locale Policy by ID",
        "operationId": "Retrieve Locale Policy by ID"
      }
    },
    "/v1/commons/dataview_profiles": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataViewProfile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/DataViewProfile"
        },
        "tags": [
          "Dataview Profiles"
        ],
        "description": "This operation creates a Dataview Profile.",
        "summary": "Create Dataview Profile",
        "operationId": "Create Dataview Profile"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful retrieval.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataViewProfile"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "The ID of a Dataview Profile.",
            "required": false,
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "enum": [
                "name of dataview_profile"
              ]
            }
          }
        ],
        "tags": [
          "Dataview Profiles"
        ],
        "description": "This operation returns all Dataview Profiles or, if passed a name, returns the named Dataview Profile.",
        "summary": "Retrieve All Dataview Profiles",
        "operationId": "Retrieve All Dataview Profiles"
      }
    },
    "/v1/commons/labor_entries/{id}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Successfully Deleted the Labor Category Entry.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_Model"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the labor category entry to delete.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "This operation deletes a labor category entry by ID.",
        "tags": [
          "Labor Category Entries"
        ],
        "summary": "Delete Labor Category Entry by ID",
        "operationId": "Delete Labor Category Entry by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successfully Retrieved the Labor Category Entry.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_Model"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the labor category entry to retrieve.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "deprecated": true,
        "description": "<p><strong>This operation is deprecated; instead use GET /v2/commons/labor_entries/{id}.</strong></p><p>This operation returns a labor category entry by ID.<p/><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "tags": [
          "Labor Category Entries"
        ],
        "summary": "Retrieve Labor Category Entry by ID (Deprecated)",
        "operationId": "Retrieve Labor Category Entry by ID (Deprecated)"
      }
    },
    "/v1/commons/labor_category_lists/{id}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Successfully Deleted the labor category list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_List_Model"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of a labor category list.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "This operation deletes a labor category list by ID.",
        "tags": [
          "Labor Category Lists"
        ],
        "summary": "Delete Labor Category List by ID",
        "operationId": "Delete Labor Category List by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved the labor category list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_List_Model"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "Id of the category list",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "This operation returns a labor category list by ID.",
        "tags": [
          "Labor Category Lists"
        ],
        "summary": "Retrieve Labor Category List by ID",
        "operationId": "Retrieve Labor Category List by ID"
      }
    },
    "/v1/commons/labor_category_profiles/multi_update": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully updated a list of labor category profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Profile_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially updated a list of labor category profiles."
          },
          "400": {
            "description": "Bad Request: <ul><li>The labor category profiles to update must exist</li></ul>"
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not processing continues if errors are encountered. Defaults to false.",
            "required": false,
            "in": "query",
            "name": "partial_success",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "A Boolean indicator of whether or not to convert HTTP status response code 404 to 400 when the error is a result of a missing labor category.",
            "required": false,
            "in": "query",
            "name": "return_400_on_missing_lc",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Profile_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The labor category profiles to update.",
          "required": true
        },
        "description": "This operation updates a list of labor category profiles.",
        "tags": [
          "Labor Category Profiles"
        ],
        "summary": "Update Labor Category Profiles",
        "operationId": "Update Labor Category Profiles"
      }
    },
    "/v2/commons/labor_category_lists/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved the labor category list with effective version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_List_With_Versions_Model"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of a labor category list.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The date that constrains which versions are returned in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "allowEmptyValue": true,
            "required": false,
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A Boolean indicator of whether or not to return all details in the response.",
            "required": false,
            "in": "query",
            "name": "all_details",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "description": "<p>This operation returns a labor category list with effective version by ID.</p><br /><p>The associated Access Control Point is LABOR_ENTRIES_LIST.</p>",
        "tags": [
          "Labor Category Lists"
        ],
        "summary": "Retrieve Labor Category List with Effective Version by ID",
        "operationId": "Retrieve Labor Category List with Effective Version by ID"
      }
    },
    "/v1/commons/hyperfind": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Hyperfind queries.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HyperfindQueryList"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not to retrieve detailed constraint information. This parameter defaults to false.",
            "required": false,
            "name": "all_details",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The usage type of a Hyperfind query, which filters the results based on the specified value. Valid values include Regular, Home, and All.",
            "required": false,
            "name": "usage_type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns a list of all Hyperfind queries accessible to the current user.",
        "tags": [
          "Hyperfind Queries"
        ],
        "summary": "Retrieve Hyperfind Queries for Current User",
        "operationId": "Retrieve Hyperfind Queries for Current User"
      }
    },
    "/v1/commons/user_preferences": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved."
          },
          "400": {
            "description": "Bad request."
          }
        },
        "description": "This operation returns user preferences.",
        "tags": [
          "User Preferences"
        ],
        "summary": "Retrieve User Preferences",
        "operationId": "Retrieve User Preferences"
      }
    },
    "/v1/commons/jobs/external_ids/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiReadJobsByExternalIdResponse"
                }
              }
            }
          },
          "207": {
            "description": "Partially retrieved effective jobs."
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiReadTypeByExternalIdRequest"
              }
            }
          },
          "description": "The Retrieve Effective Job References by External IDs request payload.",
          "required": true
        },
        "description": "This operation returns effective job object references by external IDs and date.",
        "tags": [
          "Jobs"
        ],
        "summary": "Retrieve Effective Job References by External IDs",
        "operationId": "Retrieve Effective Job References by External IDs"
      }
    },
    "/v1/commons/currency/policies/apply_update": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully Updated Currency Policy."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthenticated."
          },
          "403": {
            "description": "You are not authorized to perform this operation."
          },
          "404": {
            "description": "The requested resource cannot be found."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Currency_policy_configuration"
              }
            }
          },
          "description": "The Update Currency Policy request payload."
        },
        "tags": [
          "Currency Policies"
        ],
        "description": "This operation updates a currency policy's currency code and exchange rates by ID.",
        "summary": "Update Currency Policy",
        "operationId": "Update Currency Policy"
      }
    },
    "/v1/commons/locale_policies": {
      "post": {
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonsLocalePolicy"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Incorrect Request Parameter/Invalid Request Body.</li><li>Invalid characters ({reservedChar}) were found in the parameter for locale.</li>"
          },
          "409": {
            "description": "<ul><li>The name already exists for another locale.</li><li>The length of {param} cannot exceed {max} characters for locale.</li><li>DecimalSymbol and GroupingSymbol must not be the same for locale.</li>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommonsLocalePolicy"
              }
            }
          },
          "description": "The Create Locale Policy request payload.",
          "required": true
        },
        "description": "This operation creates a locale policy.",
        "tags": [
          "Locale Policies"
        ],
        "summary": "Create Locale Policy",
        "operationId": "Create Locale Policy"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonsLocalePolicy"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          },
          "404": {
            "description": "The Locale Policy cannot be found."
          }
        },
        "parameters": [
          {
            "description": "The name of the Locale Policy.",
            "required": false,
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The display name of the Locale Policy.",
            "required": false,
            "name": "displayName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The sdmKey of the Locale Policy.",
            "required": false,
            "name": "sdmKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns a locale policy by name, display name, or sdmKey.",
        "tags": [
          "Locale Policies"
        ],
        "summary": "Retrieve Locale Policy",
        "operationId": "Retrieve Locale Policy"
      }
    },
    "/v1/commons/currency/policies": {
      "post": {
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Currency_policy_configuration"
                }
              }
            }
          },
          "201": {
            "description": "Successfully Created the Currency Policy."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthenticated."
          },
          "403": {
            "description": "You are not authorized to perform this operation."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Currency_policy_configuration"
              }
            }
          },
          "description": "The Create Currency Policy request payload, which consists of a currency code, an initial exchange rate, and exchange rates."
        },
        "tags": [
          "Currency Policies"
        ],
        "description": "This operation creates a currency policy containing a currency code, an initial exchange rate, and exchange rates.",
        "summary": "Create Currency Policy",
        "operationId": "Create Currency Policy"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved all the Currency Policies defined on the tenant."
          },
          "403": {
            "description": "You are not authorized to perform this operation."
          },
          "404": {
            "description": "The requested resource cannot be found."
          }
        },
        "parameters": [
          {
            "description": "An ID that uniquely identifies a currency policy.",
            "required": false,
            "name": "currency_code",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Currency Policies"
        ],
        "description": "This operation returns all currency policies.",
        "summary": "Retrieve All Currency Policies",
        "operationId": "Retrieve All Currency Policies"
      }
    },
    "/v1/commons/labor_category_profiles/multi_create": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created a list of labor category profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Profile_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially created a list of labor category profiles."
          },
          "400": {
            "description": "Bad request. The labor category profiles could not be created."
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not processing continues if errors are encountered. Defaults to false.",
            "required": false,
            "in": "query",
            "name": "partial_success",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "A Boolean indicator of whether or not to convert HTTP status response code 404 to 400 when the error is a result of a missing labor category.",
            "required": false,
            "in": "query",
            "name": "return_400_on_missing_lc",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Profile_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The labor category profiles to create.",
          "required": true
        },
        "description": "This operation creates a list of labor category profiles.",
        "tags": [
          "Labor Category Profiles"
        ],
        "summary": "Create Labor Category Profiles",
        "operationId": "Create Labor Category Profiles"
      }
    },
    "/v2/commons/location_sets/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedOrgMapGroupResult"
                }
              }
            }
          },
          "207": {
            "description": "Partial success in a bulk read of Location Sets."
          },
          "400": {
            "description": "Bad Request: <ul><li>Requested Location Set identifiers are invalid</li></ul>"
          }
        },
        "parameters": [
          {
            "description": "Receives session token as input.",
            "required": false,
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PagedMultiReadRequest"
              }
            }
          },
          "description": "The Retrieve Paginated List of Location Sets request payload.",
          "required": true
        },
        "description": "<p>This operation returns a paginated list of Organizational Map groups (location sets) according to an array of group identifiers or a query on group names.</p><br /><p>The associated Access Control Point is OJS_EDITOR with action view.</p>",
        "tags": [
          "Location Sets"
        ],
        "summary": "Retrieve Paginated List of Location Sets",
        "operationId": "Retrieve Paginated List of Location Sets"
      }
    },
    "/v1/commons/locations/apply_update": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrgMapNodeRest"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad Request</p><ul> <li>[WCO-103002] - Some unexpected error occurs {detail}, please check the system log. </li> <li>[WCO-103006] - The parameter {paramName} is mandatory, cannot be missing or empty. </li> <li>[WCO-103015] - The organizational object reference is mandatory and cannot be missing or empty. </li> <li>[WCO-103020] - The effective and expiration dates are mandatory and cannot be missing or empty. </li> <li>[WCO-103027] - The location id is mandatory and should not be missing or empty. </li> <li>[WFP-90004] - You are trying to update an item that has been modified by another user or process.  Reload and try again. </li> <li>[WFP-90005] - Operation not permitted.{S} </li> <li>Request Parameter/Invalid Request Body.</li> </ul>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgMapMultipleLocationMoveRequest"
              }
            }
          },
          "description": "The Move Location request payload.",
          "required": true
        },
        "description": "This operation moves an Organizational Map location and its descendants.",
        "tags": [
          "Locations"
        ],
        "summary": "Move Location",
        "operationId": "Move Location"
      }
    },
    "/v1/commons/hyperfind/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved Hyperfind query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HyperfindQueryForList"
                }
              }
            }
          },
          "403": {
            "description": "[WCO-112060] - User is not allowed to access this resource."
          },
          "404": {
            "description": "[WCO-112088] - The Hyperfind query ID: {IDnumber} could not be found.."
          }
        },
        "parameters": [
          {
            "description": "The ID of the Hyperfind query.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "A Boolean indicator of whether or not to retrieve detailed constraint information. This parameter defaults to false.",
            "required": false,
            "name": "all_details",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The usage type of a Hyperfind query, which filters the results. Valid values include HOME, REGULAR, or ALL. The default value is HOME.",
            "required": false,
            "in": "query",
            "name": "usage_type",
            "schema": {
              "type": "string",
              "default": "Regular"
            }
          }
        ],
        "description": "This operation returns a Hyperfind query by ID.",
        "tags": [
          "Hyperfind Queries"
        ],
        "summary": "Retrieve Hyperfind Query by ID",
        "operationId": "Retrieve Hyperfind Query by ID"
      }
    },
    "/v2/commons/labor_categories": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully Retrieved a list of Labor Categories.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Model"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The name of the labor category to retrieve.",
            "required": false,
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The date and time after which any modified labor categories are returned in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
            "required": false,
            "name": "modified_since",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "<p>This operation returns a list of all labor categories if no parameter is specified, a single labor category by name, or a list of labor categories updated after a specified date and time.</p><br /><p>The associated Access Control Point is LABOR_CATEGORY.</p>",
        "tags": [
          "Labor Categories"
        ],
        "summary": "Retrieve All Labor Categories or by Criteria",
        "operationId": "Retrieve All Labor Categories or by Criteria"
      }
    },
    "/v1/commons/user_preferences/locale_policy": {
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Incorrect request parameter/Invalid request body."
          }
        },
        "parameters": [
          {
            "description": "The user's current locale policy.",
            "required": false,
            "name": "userCurrent",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "A boolean indicator of whether or not to return a tenant's default locale.",
            "required": false,
            "name": "tenantDefault",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "description": "This operation returns user preferences for the current user or tenant.",
        "tags": [
          "User Preferences"
        ],
        "summary": "Retrieve User Preferences for Current User",
        "operationId": "Retrieve User Preferences for Current User"
      }
    },
    "/v1/commons/labor_category_profiles/{id}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Successfully Deleted the labor category profiles."
          }
        },
        "parameters": [
          {
            "description": "The ID of the labor category profile to delete.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "This operation deletes a labor category profile by ID.",
        "tags": [
          "Labor Category Profiles"
        ],
        "summary": "Delete Labor Category Profile by ID",
        "operationId": "Delete Labor Category Profile by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved the labor category profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Profile_Model"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the labor category profile to retrieve.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "A Boolean indicator of whether or not the entry lists should be fully populated.",
            "required": false,
            "in": "query",
            "name": "populateEntryLists",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "A Boolean indicator of whether or not the system entry lists should be fully populated.",
            "required": false,
            "in": "query",
            "name": "populateSystemLists",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "The Date that define which version will be retrieved.",
            "required": false,
            "name": "snapshot_date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns a labor category profile by ID.",
        "tags": [
          "Labor Category Profiles"
        ],
        "summary": "Retrieve Labor Category Profile by ID",
        "operationId": "Retrieve Labor Category Profile by ID"
      }
    },
    "/v1/commons/labor_category_lists/multi_delete": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully deleted a list of labor category lists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_List_Model"
                }
              }
            }
          },
          "207": {
            "description": "Partially succeeded in deleting a list of labor category lists."
          },
          "400": {
            "description": "Bad Request: <ul><li>The labor category lists to delete must exist</li></ul>"
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not processing continues if errors are encountered. When false, the operation fails on the first error and results in no changes. Defaults to false.",
            "required": false,
            "name": "partial_success",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The Delete Labor Category Lists request payload.",
          "required": true
        },
        "description": "This operation deletes a list of labor category lists.",
        "tags": [
          "Labor Category Lists"
        ],
        "summary": "Delete Labor Category Lists",
        "operationId": "Delete Labor Category Lists"
      }
    },
    "/v1/commons/labor_category_profiles": {
      "delete": {
        "responses": {
          "200": {
            "description": "Successfully Deleted the labor category profiles."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
              }
            }
          },
          "description": "The ObjectRef of the labor category profile to delete.",
          "required": true
        },
        "description": "This operation deletes a labor category profile by ObjectRef.",
        "tags": [
          "Labor Category Profiles"
        ],
        "summary": "Delete Labor Category Profile by ObjectRef",
        "operationId": "Delete Labor Category Profile by ObjectRef"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of labor category profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Profile_Model"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not the entry lists should be fully populated.",
            "required": false,
            "in": "query",
            "name": "populateEntryLists",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "A Boolean indicator of whether or not the system entry lists should be fully populated.",
            "required": false,
            "in": "query",
            "name": "populateSystemLists",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "A Boolean indicator of whether or not to return all details in the response.",
            "required": false,
            "in": "query",
            "name": "all_details",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "The Date that define which version will be retrieved.",
            "required": false,
            "name": "snapshot_date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns a list of all labor category profiles in the system.",
        "tags": [
          "Labor Category Profiles"
        ],
        "summary": "Retrieve All Labor Category Profiles",
        "operationId": "Retrieve All Labor Category Profiles"
      }
    },
    "/v1/commons/data_dictionary/location_types": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful retrieval of Location Types.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataElementProperty"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": [
          "Data Dictionary"
        ],
        "description": "This operation returns Location Types.",
        "summary": "Retrieve Location Types",
        "operationId": "Retrieve Location Types"
      }
    },
    "/v2/commons/labor_categories/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully Retrieved the Labor Category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Model"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the labor category to retrieve.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "<p>This operation returns a labor category by ID.</p><br /><p>The associated Access Control Point is LABOR_CATEGORY.</p>",
        "tags": [
          "Labor Categories"
        ],
        "summary": "Retrieve Labor Category by ID",
        "operationId": "Retrieve Labor Category by ID"
      }
    },
    "/v1/commons/dataview_profiles/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrives a list of Dataview profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataViewProfile"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "[WCO-106457] - Partially retrieved a list of Dataview profiles. Some of the specified object references do not exist."
          },
          "403": {
            "description": "[WCO-106800] -This operation is disallowed for current user."
          },
          "404": {
            "description": "[WCO-106456] - The specified Dataview profile object references do not exist."
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/MultiReadRequest"
        },
        "tags": [
          "Dataview Profiles"
        ],
        "description": "This operation returns Dataview profiles by object references.",
        "summary": "Retrieve Dataview Profiles",
        "operationId": "Retrieve Dataview Profiles"
      }
    },
    "/v1/commons/labor_entries/multi_delete": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully deleted a list of Labor Category Entries.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: <ul><li>The labor category entries to delete must exist</li></ul>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The labor category entries to delete.",
          "required": true
        },
        "description": "This operation deletes a list of labor category entries.",
        "tags": [
          "Labor Category Entries"
        ],
        "summary": "Delete Labor Category Entries",
        "operationId": "Delete Labor Category Entries"
      }
    },
    "/v1/commons/location_attributes/{id}": {
      "put": {
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationAttribute"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-129915] - Start day of week can not be changed as it already has assigned locations.</li><li>[WCO-129907] - Request body is missing. Specify request parameters.</li><li>[WCO-129901] - You must specify the following parameter: {paramName}.</li><li>[WCO-129911] - The attribute name exceeds the maximum allowed 75 length.</li><li>[WCO-129912] - The following parameter: {paramName} contains forbidden symbols: {forbiddenSymbols}.</li><li>[WCO-129917] - The following parameter must be null: {param}.</li><li>[WCO-129913] - Entity not found. Type: {object}. Name or ID: {qualifier/id}.</li><li>[WCO-129908] - Category path {categoryPathName} is not site type or type above site.</li><li>[WCO-129921] - The attribute name: {paramName} is not unique.</li><li>[WCO-129919] - The following parameter can not be empty: {paramName}.</li><li>[WCO-129914] - Org nodes are not unique.</li><li>[WCO-129909] - ID from path does not match ID from request payload.</li><li>[WCO-129916] - Cannot assign selected Locations. The Location: {location} is already assigned to another Location Attribute: {name}. A Location can be assigned to only one Location Attribute.</li></ul>"
          },
          "403": {
            "description": "[WCO-129903] - The user is not authorized to perform this action."
          },
          "404": {
            "description": "[WCO-129904] - Entity not found. Type: Attribute. Name or ID: {id}."
          },
          "409": {
            "description": "[WCO-129920] - Resource was already modified."
          }
        },
        "parameters": [
          {
            "description": "The unique ID of a location attribute.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationAttribute"
              }
            }
          },
          "description": "The Update Location Attribute by ID request payload.",
          "required": true
        },
        "description": "<p>This operation updates a location attribute by ID.</p><br /><p>The associated Access Control Point is REST_API_SETUP.</p>",
        "tags": [
          "Location Attributes"
        ],
        "summary": "Update Location Attribute by ID",
        "operationId": "Update Location Attribute by ID"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Success."
          },
          "400": {
            "description": "<ul><li>[WCO-129906] - Can not delete attribute as it has locations assigned.</li></ul>"
          },
          "403": {
            "description": "[WCO-129903] - The user is not authorized to perform this action."
          },
          "404": {
            "description": "[WCO-129904] - Entity not found. Type: Attribute. Name or ID: {id}."
          }
        },
        "parameters": [
          {
            "description": "The unique ID of a location attribute.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "<p>This operation deletes a location attribute by ID.</p><br /><p>The associated Access Control Point is REST_API_SETUP.</p>",
        "tags": [
          "Location Attributes"
        ],
        "summary": "Delete Location Attribute by ID",
        "operationId": "Delete Location Attribute by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationAttribute"
                }
              }
            }
          },
          "403": {
            "description": "[WCO-129903] - The user is not authorized to perform this action."
          },
          "404": {
            "description": "[WCO-129904] - Entity not found. Type: Attribute. Name or ID: {id}."
          }
        },
        "parameters": [
          {
            "description": "The ID of a location attribute.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "<p>This operation returns a location attribute by ID.</p><br /><p>The associated Access Control Point is REST_API_SETUP.</p>",
        "tags": [
          "Location Attributes"
        ],
        "summary": "Retrieve Location Attribute by ID",
        "operationId": "Retrieve Location Attribute by ID"
      }
    },
    "/v1/commons/location_sets/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgMapMultipleLocationSetReadRequest"
              }
            }
          },
          "description": "Receives Orgmap Locations sets model as input.",
          "required": true
        },
        "deprecated": true,
        "description": "<p><strong>This operation is deprecated; instead use POST /v2/commons/location_sets/multi_read.</strong></p><p>This operation returns Organizational Map groups (location sets) according to a list of groups data.</p>",
        "tags": [
          "Location Sets"
        ],
        "summary": "Retrieve Location Sets by List (Deprecated)",
        "operationId": "Retrieve Location Sets by List (Deprecated)"
      }
    },
    "/v1/commons/labor_entries/apply_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieval of Labor Category Entries.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pagination_Response_for_Labor_Category_Entries"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The Labor Category Entries retrieval unsuccessful."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/laborCategoryEntryPaginationSortFilterRestParameters"
              }
            }
          },
          "description": "The Retrieve Paginated List of Labor Category Entries request payload.",
          "required": true
        },
        "description": "This operation returns a paginated list of labor category entries.",
        "tags": [
          "Labor Category Entries"
        ],
        "summary": "Retrieve Paginated List of Labor Category Entries",
        "operationId": "Retrieve Paginated List of Labor Category Entries"
      }
    },
    "/v1/commons/tiles": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created Admin Tile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tile"
              }
            }
          },
          "description": "The Create Admin Tile request payload."
        },
        "tags": [
          "Tiles"
        ],
        "description": "This operation creates an Admin Tile.",
        "summary": "Create Admin Tile",
        "operationId": "Create Admin Tile"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved all tiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not to include personalized tiles in the response.",
            "required": false,
            "in": "query",
            "name": "personalization",
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "description": "Providing a Dataview ID retrieves all tiles associated with that Dataview.",
            "required": false,
            "in": "query",
            "name": "dataViewId",
            "schema": {
              "type": "integer",
              "format": "int64",
              "enum": [
                "dataview_id"
              ]
            }
          }
        ],
        "tags": [
          "Tiles"
        ],
        "description": "This operation returns all tiles.",
        "summary": "Retrieve Tiles",
        "operationId": "Retrieve Tiles"
      }
    },
    "/v2/commons/labor_entries/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully Retrieved the Labor Category Entry.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_Model"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the labor category entry to retrieve.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "<p>This operation returns a labor category entry by ID.</p><br /><p>The associated Access Control Point is LABOR_CATEGORY.</p>",
        "tags": [
          "Labor Category Entries"
        ],
        "summary": "Retrieve Labor Category Entry by ID",
        "operationId": "Retrieve Labor Category Entry by ID"
      }
    },
    "/v1/commons/labor_category_lists": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of labor category lists.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Entry_List_Model"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not to support resolving labor category list entries by wildcard.",
            "required": false,
            "name": "resolvedByWildcard",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "description": "This operation returns all labor category lists.",
        "tags": [
          "Labor Category Lists"
        ],
        "summary": "Retrieve All Labor Category Lists",
        "operationId": "Retrieve All Labor Category Lists"
      }
    },
    "/v1/commons/data_dictionary/data_elements/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successful retrieval of data elements."
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          },
          "description": "Keys associated with Data Elements.",
          "required": true
        },
        "tags": [
          "Data Dictionary"
        ],
        "description": "This operation returns a Data Element's definitions by keys.",
        "summary": "Retrieve Data Element Definitions by Keys",
        "operationId": "Retrieve Data Element Definitions by Keys"
      }
    },
    "/v1/commons/known_places/multi_create": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created one or more Known Places.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Known_Place_Response"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially succeeded in creating one or more Known Places."
          },
          "400": {
            "description": "<ul><li>Name must be unique. This name is already in use.</li><li>The latitude must be a double number within the following range: -90, 90.</li><li>The longitude must be a double number within the following range: -180, 180.</li><li>Punch radius must be a positive float number.</li><li>Name is required.</li><li>Latitude is required.</li><li>Longitude is required.</li><li>Punch radius is required.</li><li>Name contains illegal characters.</li><li>Description contains illegal characters.</li><li>Accuracy must be 75</li></ul>"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Known_Place_Request"
                },
                "type": "array"
              }
            }
          },
          "description": "The Create Known Places request payload.",
          "required": true
        },
        "description": "<p>This operation creates one or more Known Places.</p><br /><p>The associated Access Control Point is KNOWN_PLACES.</p>",
        "tags": [
          "GPS Known Places"
        ],
        "summary": "Create Known Places",
        "operationId": "Create Known Places"
      }
    },
    "/v1/commons/location_types/persistent_ids/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiReadByPersistentIdResponse"
                }
              }
            }
          },
          "207": {
            "description": "Partially retrieved effective location types."
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiReadLocationTypesByPersistentIdRequest"
              }
            }
          },
          "description": "The Retrieve Location Types by Persistent IDs request payload.",
          "required": true
        },
        "description": "This operation returns location (node) types by persistent IDs and date.",
        "tags": [
          "Location Types"
        ],
        "summary": "Retrieve Location Types by Persistent IDs",
        "operationId": "Retrieve Location Types by Persistent IDs"
      }
    },
    "/v1/commons/currency/policies/multi_upsert": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created or updated one or more currency policies.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Currency_policy_configuration"
                }
              }
            }
          },
          "207": {
            "description": "Partially succeeded in creating or updating the requested currency policies."
          },
          "400": {
            "description": "bad request."
          },
          "401": {
            "description": "Unauthenticated."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Currency_policy_configuration"
                },
                "type": "array"
              }
            }
          },
          "description": "The Create or update Currency Policies request payload."
        },
        "description": "This operation creates or updates one or more currency policies.",
        "tags": [
          "Currency Policies"
        ],
        "summary": "Create or update Currency Policies",
        "operationId": "Create or update Currency Policies"
      }
    },
    "/v1/commons/dataviews/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successful retrieval.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Where"
              }
            }
          },
          "description": "Search criteria for a Dataview."
        },
        "tags": [
          "Dataviews"
        ],
        "description": "This operation returns a Dataview by search criteria.",
        "summary": "Retrieve Dataview by Criteria",
        "operationId": "Retrieve Dataview by Criteria"
      }
    },
    "/v1/commons/locations/multi_create/async": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrgMapNodeRest"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/OrgMapNodeRest"
                },
                "type": "array"
              }
            }
          },
          "description": "The Create Locations Asynchronously request payload.",
          "required": true
        },
        "description": "This operation creates Organizational Map locations asynchronously.",
        "tags": [
          "Locations"
        ],
        "summary": "Create Locations Asynchronously",
        "operationId": "Create Locations Asynchronously"
      }
    },
    "/v1/commons/jobs": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericJob"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad Request:</p><ul> <li>[WCO-103001] - Id should not be provided. </li> <li>[WCO-103002] - Some unexpected error occurs {detail}, please check the system log. </li> <li>[WCO-103006] - The parameter {paramName} is mandatory, cannot be missing or empty. </li> <li>[WFP-90005] - Operation not permitted.{S} </li> <li>Incorrect Request Parameter/Invalid Request Body. </li></ul>"
          },
          "404": {
            "description": "The Job cannot be found."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericJob"
              }
            }
          },
          "description": "The Create Generic Job request payload.",
          "required": true
        },
        "description": "This operation creates a generic job according to the provided data.",
        "tags": [
          "Jobs"
        ],
        "summary": "Create Generic Job",
        "operationId": "Create Generic Job"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          },
          "404": {
            "description": "The Job cannot be found."
          }
        },
        "parameters": [
          {
            "description": "The name of the generic job.",
            "required": true,
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The effective date of the generic job in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation deletes a generic job according to the provided data.",
        "tags": [
          "Jobs"
        ],
        "summary": "Delete Generic Job",
        "operationId": "Delete Generic Job"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericJob"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          },
          "404": {
            "description": "The Job cannot be found."
          }
        },
        "parameters": [
          {
            "description": "The name of the job.",
            "required": true,
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The effective date of the job in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns an effective job by name and date.",
        "tags": [
          "Jobs"
        ],
        "summary": "Retrieve Effective Job by Name",
        "operationId": "Retrieve Effective Job by Name"
      }
    },
    "/v1/commons/dataviews/{id}": {
      "put": {
        "responses": {
          "200": {
            "description": "Successful update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "The ID of an administrator Dataview.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The name of the consumer of a Dataview, which determines whether the Dataview is consumed by the suite UI or as a platform by services other than Information Access. For example, SPRING or REPORT-SPRING. SPRING is used for Information Access.",
            "required": false,
            "in": "query",
            "name": "consumer",
            "schema": {
              "type": "string",
              "enum": [
                "consumer_name"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataView"
              }
            }
          },
          "description": "Administrator Dataview to update."
        },
        "tags": [
          "Dataviews"
        ],
        "description": "This operation updates an administrator Dataview by ID.",
        "summary": "Update Administrator Dataview by ID",
        "operationId": "Update Administrator Dataview by ID"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Successful delete."
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "The ID of an administrator Dataview.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The name of the consumer of a Dataview, which determines whether the Dataview is consumed by the suite UI or as a platform by services other than Information Access. For example, SPRING or REPORT-SPRING. SPRING is used for Information Access.",
            "required": false,
            "in": "query",
            "name": "consumer",
            "schema": {
              "type": "string",
              "enum": [
                "consumer_name"
              ]
            }
          }
        ],
        "tags": [
          "Dataviews"
        ],
        "description": "This operation deletes an Administrator Dataview by ID.",
        "summary": "Delete Administrator Dataview by ID",
        "operationId": "Delete Administrator Dataview by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful retrieval.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "The ID of a Dataview.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The name of the consumer of a Dataview, which determines whether the Dataview is consumed by the suite UI or as a platform by services other than Information Access. For example, SPRING or REPORT-SPRING. SPRING is used for Information Access.",
            "required": false,
            "in": "query",
            "name": "consumer",
            "schema": {
              "type": "string",
              "enum": [
                "consumer_name"
              ]
            }
          },
          {
            "description": "Flag indicating that either administrator (false - default) or personalized (true) dataview is expected.",
            "required": false,
            "in": "query",
            "name": "personalization",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "Dataviews"
        ],
        "description": "This operation returns, by ID, either an administrator or a personalized Dataview based on the specified query parameters.",
        "summary": "Retrieve Dataview by ID",
        "operationId": "Retrieve Dataview by ID"
      }
    },
    "/v1/commons/labor_category_lists/apply_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieval of Labor Category List of Entries.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pagination_Response_for_Labor_Category_Entry_Lists"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The Labor Category List of Entries retrieval unsuccessful."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/laborCategoryEntryListPaginationSortFilterRestParameters"
              }
            }
          },
          "description": "The Retrieve Labor Category List of Entries request payload.",
          "required": true
        },
        "description": "<p>This operation returns a paginated labor category list of entries.</p><br /><p>The associated Access Control Point is LABOR_ENTRIES_LIST.</p>",
        "tags": [
          "Labor Category Lists"
        ],
        "summary": "Retrieve Labor Category List of Entries",
        "operationId": "Retrieve Labor Category List of Entries"
      }
    },
    "/v1/commons/known_places/multi_upsert": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created (or updated) requested Known Places.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Known_Place_Response"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Multi-upsert operation resulted in at least one failure."
          },
          "400": {
            "description": "<ul><li>No objects provided</li><li>Name must be unique. This name is already used.</li><li>The latitude must be a double number within the following range: -90, 90.</li><li>The longitude must be a double number within the following range: -180, 180.</li><li>Punch radius must be a positive float number.</li><li>Name is required.</li><li>Latitude is required.</li><li>Longitude is required.</li><li>Punch radius is required.</li><li>Version is required.</li><li>Id is required.</li><li>Id doesn't match the URI path.</li><li>Name contains illegal characters.</li><li>Description contains illegal characters.</li></ul>"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Known_Place_Request"
                },
                "type": "array"
              }
            }
          },
          "description": "The Create or Update Known Places request payload.",
          "required": true
        },
        "description": "<p>This operation creates or updates one or more Known Places.</p><br /><p>The associated Access Control Point is KNOWN_PLACES.</p>",
        "tags": [
          "GPS Known Places"
        ],
        "summary": "Create or Update Known Places",
        "operationId": "Create or Update Known Places"
      }
    },
    "/v1/commons/currency/definitions": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved Currency Definitions present on the tenant."
          },
          "401": {
            "description": "Unauthenticated."
          },
          "403": {
            "description": "You are not authorized to perform this operation."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "The currency code associated with a currency definition. This parameter filters the return results.",
            "required": false,
            "name": "currency_code",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Currency Definitions"
        ],
        "description": "This operation returns all currency definitions.",
        "summary": "Retrieve All Currency Definitions",
        "operationId": "Retrieve All Currency Definitions"
      }
    },
    "/v1/commons/labor_category_list_assignments/multi_delete/ids": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully deleted a list of labor category list assignments by ID.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Entry_ListAssignment_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: <ul><li>The labor category list assignments to delete must exist</li></ul>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "integer",
                  "format": "int64"
                },
                "type": "array"
              }
            }
          },
          "description": "The Delete Labor Category List Assignments by ID request payload.",
          "required": true
        },
        "description": "<p><strong>This operation is deprecated; instead use POST /v1/commons/labor_category_list_assignments/multi_delete.</strong></p><p>This operation deletes labor category list assignments by ID.</p>",
        "tags": [
          "Labor Category List Assignments"
        ],
        "summary": "Delete Labor Category List Assignments by ID (Deprecated)",
        "operationId": "Delete Labor Category List Assignments by ID (Deprecated)"
      }
    },
    "/v1/commons/location_sets/{groupId}": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMapGroup"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "parameters": [
          {
            "description": "The group ID of a location set.",
            "required": true,
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The effective date of the business structure whose location node is being referenced in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgMapGroup"
              }
            }
          },
          "description": "The updated Organizational Map group (location set).",
          "required": true
        },
        "description": "This operation updates an existing Organizational Map group (location set) by group ID.",
        "tags": [
          "Location Sets"
        ],
        "summary": "Update Location Set by ID",
        "operationId": "Update Location Set by ID"
      }
    },
    "/v1/commons/location_sets/apply_upsert": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMapGroup"
                }
              }
            }
          },
          "207": {
            "description": "Partially succeeded in updating the location set."
          },
          "400": {
            "description": "<p>Bad Request:</p><ul> <li>[WCO-103002] - Some unexpected error occurs {detail}, please check the system log. </li> <li>[WCO-103015] - The organizational object reference is mandatory and cannot be missing or empty. </li> <li>[WCO-103284] - Some of the location sets could not be updated successfully. </li> <li>[WCO-103285] - At least one node ref is required for a location set. </li> <li>[WCO-103286] - The following location ID does not exist: {nodeID} </li> <li>[WCO-103287] - The following location qualifier does not exist: {qualifier} </li> <li>[WCO-103288] - Either ID or Name must be present in a location set. </li> <li>[WCO-103289] - An unknown error occurred. </li> <li>[WCO-103295] - The number of records exceeds the allowed limit of: {serviceLimit} </li> <li>[WCO-103296] - Add Ref is mandatory in create location set request. </li> <li>[WCO-103297] - You cannot remove a node in a create location set request. </li> <li>[WFP-90005] - Operation not permitted.{S} </li> <li>Incorrect Request Parameter/Invalid Request Body. </li> </ul>"
          },
          "403": {
            "description": "You are not authorized to perform this operation."
          },
          "413": {
            "description": "The Service Limit has been exceeded."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/LocationSetForUpsert"
                },
                "type": "array"
              }
            }
          },
          "description": "The Create or Update Location Set request payload.",
          "required": true
        },
        "description": "<p>This operation creates or updates a location set.</p><br /><p>The associated Access Control Point is OJS_EDITOR with the edit permission allowed.</p>",
        "tags": [
          "Location Sets"
        ],
        "summary": "Create or Update Location Set",
        "operationId": "Create or Update Location Set"
      }
    },
    "/v1/commons/location_attributes/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LocationAttribute"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "[WCO-129922] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseBatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-129902] - The following object reference is invalid: {paramName}.</li><li>[WCO-129924] - The following reference list cannot be empty: {paramName}.</li><li>[WCO-129923] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li><li>[WCO-129901] - You must specify the following parameter: {paramName}.</li><li>[WCO-129907] - Request body is missing. Specify request parameters.</li><li>[WCO-129904] - Entity not found. Type: Attribute. Name or ID: {id}</li></ul>"
          },
          "403": {
            "description": "[WCO-129903] - The user is not authorized to perform this action."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationAttributeSearchCriteria"
              }
            }
          },
          "description": "The Retrieve Location Attributes request payload.",
          "required": true
        },
        "description": "<p>This operation returns one or more location attributes by object references.</p><br /><p>The associated Access Control Point is REST_API_SETUP.</p>",
        "tags": [
          "Location Attributes"
        ],
        "summary": "Retrieve Location Attributes",
        "operationId": "Retrieve Location Attributes"
      }
    },
    "/v1/commons/known_places": {
      "put": {
        "responses": {
          "200": {
            "description": "@v1.0.knownplace-known_place.put.response.200.message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Known_Place_Response"
                }
              }
            }
          },
          "400": {
            "description": "@v1.0.knownplace-known_place.put.response.400.message"
          },
          "403": {
            "description": "@v1.0.knownplace-known_place.put.response.403.message"
          },
          "404": {
            "description": "@v1.0.knownplace-known_place.put.response.404.message"
          },
          "409": {
            "description": "@v1.0.knownplace-known_place.put.response.409.message"
          }
        },
        "parameters": [
          {
            "description": "@v1.0.knownplace-known_place.put.queryparam.persistent-id",
            "required": true,
            "name": "persistent_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Known_Place_Request"
        },
        "description": "@v1.0.knownplace-known_place.put.notes",
        "tags": [
          "GPS Known Places"
        ],
        "summary": "@v1.0.knownplace-known_place.put.nickname",
        "operationId": "@v1.0.knownplace-known_place.put.nickname"
      },
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created Known Place.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Known_Place_Response"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Name must be unique. This name is already in use.</li><li>The latitude must be a double number within the following range: -90, 90.</li><li>The longitude must be a double number within the following range: -180, 180.</li><li>Punch radius must be a positive float number.</li><li>Name is required.</li><li>Latitude is required.</li><li>Longitude is required.</li><li>Punch radius is required.</li><li>Name contains illegal characters.</li><li>Description contains illegal characters.</li><li>Accuracy must be 75</li></ul>"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Known_Place_Request"
              }
            }
          },
          "description": "The Create Known Place request payload.",
          "required": true
        },
        "description": "<p>This operation creates a Known Place.</p><br /><p>The associated Access Control Point is KNOWN_PLACES.</p>",
        "tags": [
          "GPS Known Places"
        ],
        "summary": "Create Known Place",
        "operationId": "Create Known Place"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "@v1.0.knownplace-known_place.delete.response.204.message"
          },
          "404": {
            "description": "@v1.0.knownplace-known_place.delete.response.404.message"
          }
        },
        "parameters": [
          {
            "description": "@v1.0.knownplace-known_place.delete.queryparam.persistent_id",
            "required": true,
            "name": "persistent_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "@v1.0.knownplace-known_place.delete.notes",
        "tags": [
          "GPS Known Places"
        ],
        "summary": "@v1.0.knownplace-known_place.delete.nickname",
        "operationId": "@v1.0.knownplace-known_place.delete.nickname"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of known places.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "413": {
            "description": "Service limit of API has been exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "required": false,
            "name": "allDetails",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "required": false,
            "name": "employee_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "person_number",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": false,
            "name": "persistent_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "<p>This operation returns a collection of Known Places.</p><br /><p>The associated Access Control Point is KNOWN_PLACES.</p>",
        "tags": [
          "GPS Known Places"
        ],
        "summary": "Retrieve All Known Places",
        "operationId": "Retrieve All Known Places"
      }
    },
    "/v1/commons/labor_category_list_assignments/multi_delete": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully deleted a list of labor category list assignments.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Entry_ListAssignment_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: <ul><li>The labor category list assignments to delete must exist</li></ul>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_ListAssignment_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The Delete Labor Category List Assignments request payload.",
          "required": true
        },
        "description": "This operation deletes a list of labor category list assignments.",
        "tags": [
          "Labor Category List Assignments"
        ],
        "summary": "Delete Labor Category List Assignments",
        "operationId": "Delete Labor Category List Assignments"
      }
    },
    "/v1/commons/labor_categories/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully Retrieved the Labor Category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Model"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of the labor category to retrieve.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "deprecated": true,
        "description": "<p><strong>This operation is deprecated; instead use GET /v2/commons/labor_categories/{id}.</strong></p><p>This operation returns a labor category by ID.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "tags": [
          "Labor Categories"
        ],
        "summary": "Retrieve Labor Category by ID (Deprecated)",
        "operationId": "Retrieve Labor Category by ID (Deprecated)"
      }
    },
    "/v1/commons/jobs/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GenericJob"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad Request</p><ul> <li>[WCO-103002] - Some unexpected error occurs {detail}, please check the system log. </li> <li>[WCO-103006] - The parameter {paramName} is mandatory, cannot be missing or empty. </li> <li>[WCO-103007] - Provide value for exactly one of the criteria to receive response. Criteria: {criteriaNameStr}. </li> <li>[WCO-103010] - The date range is invalid, verify the effective date {start_date} and the expiration date {end_date}. </li> <li>[WCO-103015] - The organizational object reference is mandatory and cannot be missing or empty. </li> <li>[WCO-103022] - The reference date is mandatory and cannot be missing or empty. </li> <li>[WCO-103023] - The expiration date {date} cannot be earlier than or the same as the effective date {date2}. </li> <li>[WCO-103108] - The job {identifier} does not exist. </li> <li>[WCO-103109] - The job {identifier} does not exist on {date}. </li> <li>[WCO-103110] - The job name or id is mandatory and cannot be missing or empty. </li> <li>[WCO-103121] - The job {identifier} does not exist between {date} and {date2}. </li> <li>[WCO-103198] - Either ids or qualifiers should be present. </li> <li>[WCO-103199] - Start date value {start_date} is after the end date value {end_date}. </li> <li>[WFP-90005] - Operation not permitted.{S} </li> <li>Incorrect Request Parameter/Invalid Request Body. </li> </ul>"
          },
          "404": {
            "description": "The Job cannot be found."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgMapMultipleJobReadRequest"
              }
            }
          },
          "description": "The Retrieve Generic Jobs by Reference request payload.",
          "required": true
        },
        "description": "This operation returns generic jobs by reference data and date.",
        "tags": [
          "Jobs"
        ],
        "summary": "Retrieve Generic Jobs by Reference",
        "operationId": "Retrieve Generic Jobs by Reference"
      }
    },
    "/v1/commons/data_dictionary/data_elements": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful retrieval of data elements.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataElementDefinition"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": [
          "Data Dictionary"
        ],
        "description": "This operation returns a Data Element's definitions.",
        "summary": "Retrieve Data Element Definitions",
        "operationId": "Retrieve Data Element Definitions"
      }
    },
    "/v1/commons/location_types/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CommonsOrgNodeType"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgMapMultipleLocationTypeReadRequest"
              }
            }
          },
          "description": "The Retrieve Location Types by Context request payload.",
          "required": true
        },
        "description": "This operation returns location (node) types by context and date.",
        "tags": [
          "Location Types"
        ],
        "summary": "Retrieve Location Types by Context",
        "operationId": "Retrieve Location Types by Context"
      }
    },
    "/v1/commons/locations/external_ids/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "207": {
            "description": "Partially retrieved effective locations."
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiReadLocationsByExternalIdRequest"
              }
            }
          },
          "description": "The Retrieve Locations by External IDs request payload.",
          "required": true
        },
        "description": "This operation returns locations by external IDs and date.",
        "tags": [
          "Locations"
        ],
        "summary": "Retrieve Locations by External IDs",
        "operationId": "Retrieve Locations by External IDs"
      }
    },
    "/v1/commons/locations/status/async/{executionKey}": {
      "get": {
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "description": "Response of the import status.",
            "required": true,
            "name": "executionKey",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation imports data status asynchronously.",
        "tags": [
          "Locations"
        ],
        "summary": "Import Data Status Asynchronously",
        "operationId": "Import Data Status Asynchronously"
      }
    },
    "/v1/commons/hyperfind/execute": {
      "post": {
        "responses": {
          "200": {
            "description": "Hyperfind query execution successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hyperfind_Result"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul> <li>[WCO-112001] - Hyperfind queryText, QueryId, persons and locations list cannot be empty. Please select any one to execute the hyperfind.</li> <li>[WCO-112002] - Result set exceeded the threshold limit.</li> <li>[WCO-112003] - {Message}</li> <li>[WCO-112004] - An unknown error occurred. {Message}</li> <li>[WCO-112005] - Either a symbolic period or date range is required.</li> <li>[WCO-112006] - More than two option selected for executing hyperfind.</li> <li>[WCO-112007] - Cannot find specified Hyperfind query.</li> <li>[WCO-112008] - Invalid person numbers provided.</li> <li>[WCO-112009] - Either the query does not exist or you dont have permission to execute the provided hyperfind.</li> <li>[WCO-112010] - Date range passed in request is above the threshold limit of {threshold} days.</li> <li>[WCO-112011] - Number of employees passed in request is above the threshold limit of {threshold} <li>[WCO-112012] - Number of locations passed in request is above the threshold limit of {threshold}</li> <li>[WCO-112013] - The query result exceeded the maximum threshold of {threshold}</li> <li>[WCO-112017] - Invalid location id(s) for given date range or location id(s) does not exist</li> <li>[WFP-00177] - The type submitted for conversion is invalid in this context.</li> <li>[WFP-00293] - An error occurred during HyperFind converter instantiation due to the class cast exeption - classname: {CONVERTERCLASSNAME}.</li> <li>[WFP-00345] - An error occurred during HyperFind converter instantiation due to illegal access exception; check for non-public constructors - classname: {CONVERTERCLASSNAME}.</li> <li>[WFP-00554] - An error occurred during HyperFind converter instantiation - classname: {CONVERTERCLASSNAME}.</li> <li>[WFP-00631] - An error occurred during HyperFind converter instantiation due to class not found exception - classname: {CONVERTERCLASSNAME}.</li> <li>[WFP-00652] - The requested HyperFind object/bean conversion factory is not implemented.</li> <li>[WFP-01284] - Illegal invocation of method</li> <li>[WFP-83355] - The maximum number of persons tha can be rolled up exceeds the limit of {limit}. Please modify your search.</li> <li>[WFP-83617] - Error occurred while fetching empoyee list.</li> <li>[WFP-83618] - The number of employees({returnedCount}) exceeds the threshold({threshold}).</li> <li>[WTK-01521] - Default generic exception.</li> <li>QUERY_RETRIEVAL_ERROR = 43; (HFProcessingException)  *MESSAGE* :  (Error code and message not found).</li> </ul>"
          },
          "404": {
            "description": "[WCO-112007]-Cannot find specified Hyperfind query."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hyperfind_Parameters"
              }
            }
          }
        },
        "tags": [
          "Hyperfind Queries"
        ],
        "description": "<p>This operation executes a Hyperfind query by ID or qualifier and returns the result. The default threshold limits the number of returned employees to 3,500. Use the <code>threshold</code> property to define a higher limit of up to 50,000 employees.</p></br></br><p><em><strong>Note:</strong> The default limit helps ensure performance. Increasing the threshold may decrease performance.</em></p>",
        "summary": "Execute Hyperfind Query",
        "operationId": "Execute Hyperfind Query"
      }
    },
    "/v1/commons/entity_definitions/multi_create": {
      "post": {
        "responses": {
          "204": {
            "description": "Successfully created multiple entity definitions."
          },
          "207": {
            "description": "[WCO-111041] - Partially created a list of entity definitions. A save error occurred when attempting to create some of the entity definitions."
          },
          "400": {
            "description": "[WCO-111042] - A save error occurred when attempting to create the specified entity definitions."
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not to batch the entity definitions and create them at once. When false, the entity definitions are created one at a time in sequence.",
            "required": true,
            "name": "batch",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/IA_Entity_Definition_ModelArray"
        },
        "tags": [
          "Entity Definitions"
        ],
        "description": "This operation creates one or more entity definitions.",
        "summary": "Create Entity Definitions",
        "operationId": "Create Entity Definitions"
      }
    },
    "/v1/commons/labor_entries": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Labor Category Entries.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Entry_Model"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of a labor category.",
            "required": true,
            "in": "query",
            "name": "categoryId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "deprecated": true,
        "description": "<p><strong>This operation is deprecated; instead use GET /v2/commons/labor_entries.</strong></p><p>This operation returns a list of all labor category entries associated with a labor category ID.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "tags": [
          "Labor Category Entries"
        ],
        "summary": "Retrieve Labor Category Entries by Category ID (Deprecated)",
        "operationId": "Retrieve Labor Category Entries by Category ID (Deprecated)"
      }
    },
    "/v1/commons/entity_definitions/multi_update": {
      "put": {
        "responses": {
          "204": {
            "description": "One or more entity definitions successfully updated."
          },
          "207": {
            "description": "[WCO-111041] - Partially updated a list of entity definitions. A save error occurred when attempting to update some of the entity definitions."
          },
          "400": {
            "description": "[WCO-111042] - A save error occurred when attempting to update the specified entity definitions."
          },
          "404": {
            "description": "[WCO-111038] - The specified entity definition object references do not exist."
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not to batch the entity definitions and update them at once. When false, the entity definitions are updated one at a time in sequence.",
            "required": true,
            "name": "batch",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/IA_Entity_Definition_ModelArray"
        },
        "tags": [
          "Entity Definitions"
        ],
        "description": "This operation updates one or more entity definitions.",
        "summary": "Update Entity Definitions",
        "operationId": "Update Entity Definitions"
      }
    },
    "/v1/commons/labor_category_lists/multi_update": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully updated a list of labor category lists.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LaborCategoryEntryList"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially succeeded in updating a list of labor category lists."
          },
          "400": {
            "description": "Bad Request: <ul><li>The labor category lists to update must exist</li></ul>"
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not processing continues if errors are encountered. When false, the operation fails on the first error and results in no changes. Defaults to false.",
            "required": false,
            "name": "partial_success",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "A Boolean indicator of whether or not to support resolving labor category list entries by wildcard.",
            "required": false,
            "name": "resolvedByWildcard",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_List_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The Update Labor Category Lists request payload.",
          "required": true
        },
        "description": "This operation updates a list of labor category lists.",
        "tags": [
          "Labor Category Lists"
        ],
        "summary": "Update Labor Category Lists",
        "operationId": "Update Labor Category Lists"
      }
    },
    "/v1/commons/jobs/apply_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMapMultipleJobApplyReadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          },
          "404": {
            "description": "The Job cannot be found."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgMapMultipleJobApplyReadRequest"
              }
            }
          },
          "description": "The Retrieve Generic Jobs by Job Assignment request payload.",
          "required": true
        },
        "description": "This operation returns generic jobs by Job Assignment (job node) and date.",
        "tags": [
          "Jobs"
        ],
        "summary": "Retrieve Generic Jobs by Job Assignment",
        "operationId": "Retrieve Generic Jobs by Job Assignment"
      }
    },
    "/v1/commons/labor_category_profiles/multi_upsert": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created and updated list of labor category profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Profile_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially created and updated list of labor category profiles."
          },
          "400": {
            "description": "Bad request. The labor category profiles could not be created or updated."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Profile_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The list of labor category profiles to create and update.",
          "required": true
        },
        "description": "<p>This operation creates and updates a list of labor category profiles.</p><br /><p>The associated Access Control Point is LABOR_ENTRIES_LIST.</p>",
        "tags": [
          "Labor Category Profiles"
        ],
        "summary": "Create or Update Labor Category Profiles",
        "operationId": "Create or Update Labor Category Profiles"
      }
    },
    "/v1/commons/locale_policies/multi_update": {
      "post": {
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CommonsLocalePolicy"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Incorrect Request Parameter/Invalid Request Body.</li><li>Invalid characters ({reservedChar}) were found in the parameter for locale.</li>"
          },
          "409": {
            "description": "<ul><li>The name already exists for another locale.</li><li>The length of {param} cannot exceed {max} characters for locale.</li><li>DecimalSymbol and GroupingSymbol must not be the same for locale.</li>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CommonsLocalePolicy"
                },
                "type": "array"
              }
            }
          },
          "description": "The Update Locale Policies request payload.",
          "required": true
        },
        "description": "This operation updates a list of locale policies.",
        "tags": [
          "Locale Policies"
        ],
        "summary": "Update Locale Policies",
        "operationId": "Update Locale Policies"
      }
    },
    "/v1/commons/locations/multi_update": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrgMapNodeRest"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad Request:</p><ul> <li>[WCO-103002] - Some unexpected error occurs {detail}, please check the system log. </li> <li>[WCO-103006] - The parameter {paramName} is mandatory, cannot be missing or empty. </li> <li>[WCO-103015] - The organizational object reference is mandatory and cannot be missing or empty. </li> <li>[WCO-103020] - The effective and expiration dates are mandatory and cannot be missing or empty. </li> <li>[WCO-103024] - The effective date {date} for {name} should be later than today's date. </li> <li>[WCO-103026] - The location name is mandatory and should not be missing or empty. </li> <li>[WCO-103027] - The location id is mandatory and should not be missing or empty. </li> <li>[WCO-103029] - The location {identifier} does not exist. </li> <li>[WCO-103030] - The location {identifier} does not exist on {date}. </li> <li>[WCO-103036] - The location parent {identifier} does not exist on {date}. </li> <li>[WCO-103037] - The location parent is mandatory and cannot be empty or missing. </li> <li>[WCO-103041] - The effective date span cannot be missing or empty. </li> <li>[WCO-103074] - The cost center {name} does not exist. </li> <li>[WCO-103094] - The context {identifier} does not exist. </li> <li>[WCO-103095] - The context is mandatory and cannot be missing or empty. </li> <li>[WCO-103096] - The location type {identifier} does not exist. </li> <li>[WCO-103097] - The location type is mandatory and cannot be missing or empty. </li> <li>[WCO-103098] - The location type {identifier} does not exist on {date}. </li> <li>[WCO-103108] - The job {identifier} does not exist. </li> <li>[WCO-103109] - The job {identifier} does not exist on {date}. </li> <li>[WCO-103110] - The job name or id is mandatory and cannot be missing or empty. </li> <li>[WCO-103192] - It is forbidden creating or updating any descendant child node of a {name} node as another {name} node. </li> <li>[WCO-103194] - This action places a Category in an invalid location. Place the Category two levels or more below the site level. </li> <li>[WCO-103195] - Any non-Category location type cannot have Category as parent or ancestor nodes. </li> <li>[WCO-103196] - Operations with Category nodes are disabled. </li> <li>[WCO-103212] - You cannot update disallowed field(s) {detail} for location {name}. Please select an effective date later than today. </li> <li>[WCO-103215] - You cannot shorten job assignment {name} lifespan in the past. </li> <li>[WCO-103216] - The time zone does not exist: {name} </li> <li>[WCO-103220] - Forecast validations (global.business_structure.restrictions is true) does not allow changing dates in the past {date} - {date2} for {name} </li> <li>[WCO-103275] - The currency {identifier} does not exist. </li> <li>[WCO-103276] - The currency code or id is invalid. </li> <li>[WCO-103278] - The currency cannot be specified for job: {name} </li> <li>[WCO-103279] - The currency specified {name} is inactive for location: {name2} message not available in properties file and db </li> <li>[WCO-103281] - Currency cannot be assigned to a Department category location. </li> <li>[WCO-103282] - You cannot perform the operation. There exists a location having an explicitly assigned Currency which must be changed to Inherited. </li> <li>[WCO-103292] - Combined Department type location can only be created below Site and above Department. </li> <li>[WCO-103293] - Only location of category Department is allowed below location of type Combined Department. </li> <li>[WCO-103300] - Department node can be only a descendant child of a Site business structure node. </li> <li>[WCO-116002] - The timezone {id} does not exist. </li> <li>[WCO-116003] - The timezone {name} does not exist. </li> <li>[WCO-133041] - No currency found </li> <li>[laborcategory-common:1] - You do not have permission to access this resource. </li> <li>[laborcategory-common:2] - Name must be unique. This name is already used: {value}. </li> <li>[laborcategory-common:4] - The labor category entry does not exist. Entry Id: {Id}. </li> <li>[laborcategory-common:10] - The information has been modified by another user. Please refresh your data, incorporate your changes and save again. </li> <li>[laborcategory-common:14] - The labor category entry does not exist. Entry Name: {Id}. </li> <li>[laborcategory-common:15] - The labor category does not exist. Category Id: {Id}. </li> <li>[laborcategory-common:24] - Name is required </li> <li>[laborcategory-common:25] - The value {Data} contains one or more of the following reserved characters: {Reserved} </li> <li>[laborcategory-common:36] - The ObjectRef must contain an id or qualifier value. </li> <li>[laborcategory-common:48] - laborCategory is required. </li> <li>[laborcategory-common:101] - TeleTime IP Alias length is too long. Maximum Length: {value}. </li> <li>[laborcategory-common:102] - The field value has detected a character that is not one of the allowed characters for this field. Field Name: TeleTime IP Alias, Allow Set: 0123456789 Value: {value}. </li> <li>[laborcategory-common:103] -TeleTime IP Alias {ivrNum} is not unique. </li> <li>[WFP-90004] - You are trying to update an item that has been modified by another user or process.  Reload and try again. </li> <li>[WFP-90005] - Operation not permitted.{S} </li> <li>Incorrect Request Parameter/Invalid Request Body.</li> </ul>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/OrgMapNodeRest"
                },
                "type": "array"
              }
            }
          },
          "description": "The Update Locations request payload.",
          "required": true
        },
        "description": "This operation updates Organizational Map locations.",
        "tags": [
          "Locations"
        ],
        "summary": "Update Locations",
        "operationId": "Update Locations"
      }
    },
    "/v1/commons/currency/policies/base_currency": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved the Base Currency Policy."
          },
          "401": {
            "description": "Unauthenticated."
          },
          "403": {
            "description": "You are not authorized to perform this operation."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": [
          "Currency Policies"
        ],
        "description": "This operation returns the base currency policy.",
        "summary": "Retrieve Base Currency Policy",
        "operationId": "Retrieve Base Currency Policy"
      }
    },
    "/v1/commons/dataviews": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "The name of the consumer of a Dataview, which determines whether the Dataview is consumed by the suite UI or as a platform by services other than Information Access. For example, SPRING or REPORT-SPRING. SPRING is used for Information Access.",
            "required": false,
            "in": "query",
            "name": "consumer",
            "schema": {
              "type": "string",
              "enum": [
                "consumer_name"
              ]
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DataView"
        },
        "tags": [
          "Dataviews"
        ],
        "description": "This operation creates a new administrator Dataview.",
        "summary": "Create Administrator Dataview",
        "operationId": "Create Administrator Dataview"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful retrieval.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataView"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "Name of a Dataview.",
            "required": false,
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "enum": [
                "name of dataview"
              ]
            }
          },
          {
            "description": "The name of the consumer of a Dataview, which determines whether the Dataview is consumed by the suite UI or as a platform by services other than Information Access. For example, SPRING or REPORT-SPRING. SPRING is used for Information Access.",
            "required": false,
            "in": "query",
            "name": "consumer",
            "schema": {
              "type": "string",
              "enum": [
                "consumer_name"
              ]
            }
          },
          {
            "description": "A Boolean indicator of the type of Dataview to return. <code>False</code> <em>[default]</em> returns administrator Dataviews. <code>True</code> returns personalized Dataviews.",
            "required": false,
            "in": "query",
            "name": "personalization",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "Dataviews"
        ],
        "description": "This operation returns either administrator or personalized Dataviews based on the specified query parameters.",
        "summary": "Retrieve Dataviews",
        "operationId": "Retrieve Dataviews"
      }
    },
    "/v1/commons/data_dictionary/data_elements/multi_upsert": {
      "post": {
        "responses": {
          "200": {
            "description": "All data element records updated or inserted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataElementDefinition"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially created a list of data element. An error occurred when attempting to create or update some of the data element."
          },
          "400": {
            "description": "An error occurred when attempting to create the specified data element."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/DataElementDefinition"
                },
                "type": "array"
              }
            }
          }
        },
        "description": "This operation updates one or more existing data element records or creates new data element records.",
        "tags": [
          "Data Dictionary"
        ],
        "summary": "Update or Create Data Elements",
        "operationId": "Update or Create Data Elements"
      }
    },
    "/v1/commons/home_pages/{id}": {
      "put": {
        "responses": {
          "200": {
            "description": "Successfully updated a home page.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomePage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "parameters": [
          {
            "description": "The ID of a home page.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HomePage"
              }
            }
          },
          "description": "The Update Home Page by ID request payload."
        },
        "tags": [
          "Home Pages"
        ],
        "description": "This operation updates a home page by ID.",
        "summary": "Update Home Page by ID",
        "operationId": "Update Home Page by ID"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Successfully deleted a home page and its associated tiles."
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "parameters": [
          {
            "description": "The ID of a home page.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Home Pages"
        ],
        "description": "This operation deletes a home page and associated tiles by ID.",
        "summary": "Delete Home Page by ID",
        "operationId": "Delete Home Page by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successfully returned a home page by ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomePage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "parameters": [
          {
            "description": "The ID of a home page.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "A Boolean indicator of whether or not to retrieve a home page with tile references and associated card details. If false, the system returns only tile references.",
            "required": false,
            "in": "query",
            "name": "expanded",
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "description": "A Boolean indicator of whether or not to retrieve a home page with a full set of properties for tile references (id, qualifier, name, label). If false, the home page is retrieved with default properties for tile references (id, qualifier).",
            "required": false,
            "in": "query",
            "name": "ref_extensions",
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "description": "A Boolean indicator of whether or not to retrieve a personalized home page with its assigned tiles and cards.",
            "required": false,
            "in": "query",
            "name": "personalization",
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
            }
          }
        ],
        "tags": [
          "Home Pages"
        ],
        "description": "This operation returns a home page by ID.",
        "summary": "Retrieve Home Page by ID",
        "operationId": "Retrieve Home Page by ID"
      }
    },
    "/v1/commons/data_dictionary/time_increments": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful retrieval of Time Increment.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TimeIncrementMetaData"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": [
          "Data Dictionary"
        ],
        "description": "This operation returns time increments and associated metadata, such as supported formatters.",
        "summary": "Retrieve Time Increments",
        "operationId": "Retrieve Time Increments"
      }
    },
    "/v1/commons/data/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataResponse"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad Request:</p> <ul> <li>[WCO-106000] - Request processing failed. Detailed Information - {details}.</li> <li>[WCO-106001] - Date range is missing: either start/end dates or symbolic period should be specified.</li> <li>[WCO-106003] - Invalid date range: start date can not be greater than end date.</li> <li>[WCO-106015] - Invalid request provided.</li> <li>[WCO-106017] - Unable to resolve Employee-Qualifier for the specified request parameters: {qualifier}.</li> <li>[WCO-106019] - Invalid symbolic period: specified id and/or qualifier cannot be resolved.</li> <li>[WCO-106028] - Employees are excluded from the data below based on your assigned Employee Group. You are seeing only those employees you are permitted to view.</li> <li>[WCO-106029] - Invalid time increment. Valid {timeIncrement} values - DAY, WEEK, MONTH, QUARTER.</li> <li>[WCO-106032] - Unable to resolve Location-Qualifier for the specified request parameters: {qualifier}.</li> <li>[WCO-106151] - Data request FROM parameter required</li> <li>[WCO-106153] - Employee IDs or Hyperfind is required</li> <li>[WCO-106154] - View parameter is required</li> <li>[WCO-106161] - Invalid Timeframe-ID</li> <li>[WCO-106162] - Unable to resolve Business Structure-ID for the specified request parameters: {id}</li> <li>[WCO-106163] - Unable to retrieve specified employee {empid} for the selected timeframe. Possible causes: employee is inactive or the incorrect employee-ID is specified.</li> <li>[WCO-106176] - Index must be less than or equal to {maxIndex}</li> <li>[WCO-106178] - Invalid Id or Hyperfind ID or Saved Location ID</li> <li>[WCO-106179] - Invalid property for column: {key}.</li> <li>[WCO-106180] - You do not have permission to view this node (id: {id} and path: {qualifier}) in the specified timeframe.</li> <li>[WCO-106185] - Configuration issues (invalid hierarchy, incorrect timeframe, or authorization) are preventing access to this Dataview. Contact your administrator to modify the Dataview configuration.</li> <li>[WCO-106199] - Invalid Internal Application Key Provided.</li> <li>[WCO-106204] - Invalid Hyperfind.</li> <li>[WCO-112001] - Hyperfind queryText, QueryId, persons and locations list cannot be empty. Please select any one to execute the hyperfind.</li> <li>[WCO-112003] - {Message}</li> <li>[WCO-112004] - An unknown error occurred. {Message}</li> <li>[WCO-112005] - Either a symbolic period or date range is required.</li> <li>[WCO-112006] - More than two option selected for executing hyperfind.</li> <li>[WCO-112009] - Either the query does not exist or you dont have permission to execute the provided hyperfind.<li> <li>[WCO-112011] - Number of employees passed in request is above the threshold limit of {threshold}.</li> <li>[WCO-112012] - Number of locations passed in request is above the threshold limit of {threshold}<li> <li>[WCO-112017] - Invalid location id(s) for given date range or location id(s) does not exist</li> <li>[WCO-116010] - The parameter {paramName} is invalid.</li> <li>[WCO-116012] - The person number is mandatory and should not be empty.</li> <li>[WCO-116013] - The employee number is mandatory and should not be empty.</li> <li>[WCO-116016] - Unable to calculate the date span for {symbId} for the current user.</li> <li>[WCO-116022] - The period type is mandatory and should not be empty.</li> <li>[WFM-COMMON-1234] - Failed to retrieve some data from the providers</li><li>[WCO-106214] - WorkunitSet attribute is required for this request.</li><li>[WCO-106215] - Some rollups have invalid parameter values. Valid {rollUp} values: EMPLOYEE, WORKGROUP, JOB, VOLUME_LABEL, VOLUME_LABEL_BY_POST_DATE.</li><li>[WCO-106216] - The parameter is not allowed: {timeIncrement}</li><li>[WCO-106217] - Invalid time increment. Valid {timeIncrement} values - DAY, WEEK, MONTH, QUARTER, PAYPERIOD.</li><li>[WCO-106218] - VOLUME_LABEL or VOLUME_LABEL_BY_POST_DATE cannot be combined with other rollups.</li><li>[WCO-106219] - Number of work units in request ({actual}) exceeds allowed limit ({maximum}).</li><li>[WCO-106220] - You do not have access rights to the Work Unit hyperfind.</li><li>[WCO-106221] - An error occurred while resolving the Work Unit hyperfind. Try again.</li><li>[WCO-106222] - Either you do not have access rights to work units in the request, or work units are invalid.</li><li>[WCO-106223] - Work Unit IDs or Hyperfind is required.</li><li>[WCO-106224] - The combination of the columns is not valid. Each column can belong to only one entity with the exception of VOLUME_WORKUNIT which can be combined with DAILY_PRODUCTIVITY or PAYPERIOD_PRODUCTIVITY.</li><li>[WCO-106225] - The value of the time increment is not valid for the date range or symbolic period.</li><li>[WCO-106226] - Some columns are not valid for the date range or symbolic period.</li><li>[WCO-106227] - The combination of the column and rollup is not valid.</li><li>[WCO-106228] - You do not have access rights to the HCA Service.</li><li>[WCO-106229] - The requested data exceeds the defined limits. Shorten the date range, reduce the number of columns, change the hyperfind or Work Unit IDs.</li><li>[WCO-106230] - The given time increment is not valid for some of the columns.Valid {timeIncrement} value: DAY</li></ul>"
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataRequest"
              }
            }
          },
          "description": "The Retrieve Data request payload."
        },
        "tags": [
          "Aggregated Data"
        ],
        "description": "<p>This operation returns aggregated data by executing an ad hoc query. The body of the request is a SQL-like query composed of SELECT, FROM, WHERE, and grouping and sorting clauses.</p><h2>Example query</h2><p>The following example query retrieves the first 100 tuples (a finite ordered list of elements) of full name, job, organization, and hire date for employees defined as Apprentice within a particular Hyperfind instance.</p><pre><code>{<br /> \"select\": [<br />     { \"key\": \"EMP_COMMON_FULL_NAME\"},<br />     { \"key\": \"EMP_COMMON_PRIMARY_JOB\"},<br />     { \"key\": \"EMP_COMMON_PRIMARY_ORG\"},<br />     { \"key\": \"PEOPLE_HIRE_DATE\"}],<br /> \"from\": {<br />     \"view\": \"EMP\",<br />     \"employeeSet\": {<br />          \"hyperfind\": {<br />               \"id\": \"1\"<br />          },<br />          \"dateRange\": {<br />               \"symbolicPeriod\": {<br />                    \"id\": 5<br />               }<br />          }<br />     }<br /> },<br /> \"where\": [<br />     {<br />          \"key\": \"EMP_COMMON_PRIMARY_JOB\",<br />          \"operator\": \"STARTS_WITH\",<br />          \"values\": [<br />               \"Apprentice\"<br />          ]<br />     }<br /> ],<br /> \"count\": 100<br />}</code></pre>",
        "summary": "Retrieve Data",
        "operationId": "Retrieve Data"
      }
    },
    "/v1/commons/location_sets/multi_delete": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "207": {
            "description": "Partially succeeded in deleting the specified location sets."
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationSetsMultiDeleteRequest"
              }
            }
          },
          "description": "The Delete Location Sets request payload.",
          "required": true
        },
        "description": "<p>This operation deletes one or more location sets.</p><br /><p>The associated Access Control Point is OJS_EDITOR with the edit permission Allowed.</p>",
        "tags": [
          "Location Sets"
        ],
        "summary": "Delete Location Sets",
        "operationId": "Delete Location Sets"
      }
    },
    "/v1/commons/locale_policies/apply_update": {
      "post": {
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CommonsLocalePolicy"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Incorrect Request Parameter/Invalid Request Body.</li><li>Invalid characters ({reservedChar}) were found in the parameter for locale.</li>"
          },
          "409": {
            "description": "<ul><li>The name already exists for another locale.</li><li>The length of {param} cannot exceed {max} characters for locale.</li><li>DecimalSymbol and GroupingSymbol must not be the same for locale.</li>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocalePolicyApplyUpdateRequest"
              }
            }
          },
          "description": "The Set Default Locale Policy request payload.",
          "required": true
        },
        "description": "This operation sets the locale policy as default for a tenant.",
        "tags": [
          "Locale Policies"
        ],
        "summary": "Set Default Locale Policy",
        "operationId": "Set Default Locale Policy"
      }
    },
    "/v2/commons/labor_category_lists": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully Retrieved a list of Labor Category Lists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paginationSortAndFilterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The Labor Category List of Entries retrieval unsuccessful."
          }
        },
        "parameters": [
          {
            "description": "Page number from all retrieving data.",
            "required": false,
            "in": "query",
            "name": "index",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "Number of labor category lists that will be contained in response.",
            "allowEmptyValue": true,
            "required": false,
            "in": "query",
            "name": "count",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "A Boolean indicator of whether or not to support resolving labor category list entries by wildcard",
            "required": false,
            "in": "query",
            "name": "resolvedByWildcard",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "A Boolean indicator of whether or not to return all details in the response.",
            "required": false,
            "in": "query",
            "name": "all_details",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "The date that constrains which versions are returned in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "allowEmptyValue": true,
            "required": false,
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "<p>This operation returns all labor category lists with effective versions.</p><br /><p>The associated Access Control Point is LABOR_ENTRIES_LIST.</p>",
        "tags": [
          "Labor Category Lists"
        ],
        "summary": "Retrieve All Labor Category Lists with Effective Versions",
        "operationId": "Retrieve All Labor Category Lists with Effective Versions"
      }
    },
    "/v1/commons/currency/policies/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieved one or more currency policies.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Currency_policy_configuration"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially succeeded in retrieving one or more currency policies."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthenticated."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseCurrency"
              }
            }
          },
          "description": "The Retrieve Currency Policies request payload."
        },
        "description": "This operation returns one or more currency policies by currency object references.",
        "tags": [
          "Currency Policies"
        ],
        "summary": "Retrieve Currency Policies",
        "operationId": "Retrieve Currency Policies"
      }
    },
    "/v1/commons/labor_category_list_assignments/multi_create": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created a list of labor category list assignments.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Entry_ListAssignment_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_ListAssignment_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The Create Labor Category List Assignments request payload.",
          "required": true
        },
        "description": "This operation creates a list of labor category list assignments.",
        "tags": [
          "Labor Category List Assignments"
        ],
        "summary": "Create Labor Category List Assignments",
        "operationId": "Create Labor Category List Assignments"
      }
    },
    "/v1/commons/data_dictionary/metadata": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful retrieval of metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "Select the specific metadata you want to retrieve. You can pass multiple comma-separated values. Values include: dataTypes, views, sortingPolicies, roundingpolicies, formattingPolicies, categories, dataProviders, and entityDefinitions.",
            "required": true,
            "in": "query",
            "name": "select",
            "schema": {
              "type": "string",
              "enum": [
                "dataTypes",
                "views",
                "sortingPolicies",
                "roundingpolicies",
                "formattingPolicies",
                "categories",
                "dataProviders",
                "entityDefinitions"
              ]
            }
          }
        ],
        "tags": [
          "Data Dictionary"
        ],
        "description": "This operation returns the metadata defined in the system. Metadata includes the following: dataTypes, views, sortingPolicies, roundingpolicies, formattingPolicies, categories, dataProviders, and entityDefinitions.",
        "summary": "Retrieve Metadata",
        "operationId": "Retrieve Metadata"
      }
    },
    "/v1/commons/labor_categories/multi_delete": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully deleted a list of Labor Categories.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Model"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The labor categories to update.",
          "required": true
        },
        "description": "This operation deletes a list of labor categories.",
        "tags": [
          "Labor Categories"
        ],
        "summary": "Delete Labor Categories",
        "operationId": "Delete Labor Categories"
      }
    },
    "/v1/commons/locations": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrgMapNodeRest"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgMapNodeRest"
              }
            }
          },
          "description": "The Create Location Node request payload.",
          "required": true
        },
        "description": "This operation creates an Organizational Map location node.",
        "tags": [
          "Locations"
        ],
        "summary": "Create Location Node",
        "operationId": "Create Location Node"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "parameters": [
          {
            "description": "The path of a location.",
            "required": true,
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The context of a Location.",
            "required": true,
            "name": "context",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The effective date of a Location in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns Organizational Map location information by location (node) path and date.",
        "tags": [
          "Locations"
        ],
        "summary": "Retrieve Location by Path",
        "operationId": "Retrieve Location by Path"
      }
    },
    "/v1/commons/hyperfind/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HyperfindQueryList"
                }
              }
            }
          },
          "207": {
            "description": "[WCO-112098] - Multi-Read request is partially successful"
          },
          "400": {
            "description": "<ul><li>[WCO-112100] - A request cannot be empty.</li><li>[WCO-112101] - Parameter is required: {parameterName}.</li><li>[WCO-112094] - Request contains multiple parameters.</li><li>[WCO-112095] - Hyperfind Query does not exist.</li><li>[WCO-112096] - Hyperfind Query by given name does not exist.</li><li>[WCO-112097] - Hyperfind Query by given persistent id does not exist.</li><li>[WCO-112098] - Multi-Read request is partially successful.</li><li>[WCO-112099] - Atleast one parameter from id/qualifier/persistentId/ref is required.</li></ul>"
          },
          "404": {
            "description": "[WCO-112095] - Hyperfind Query does not exist."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Multi_Read_Request_for_hyperfind_query_Profiles"
              }
            }
          }
        },
        "tags": [
          "Hyperfind Queries"
        ],
        "description": "This operation returns a list of Hyperfind queries by object references.",
        "summary": "Retrieve Hyperfind Queries",
        "operationId": "Retrieve Hyperfind Queries"
      }
    },
    "/v1/commons/labor_entries/multi_create": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created a list of Labor Category Entries.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Entry_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially succeeded in creating a list of Labor Category Entries."
          },
          "400": {
            "description": "Bad Request: The Labor Category Entries were not created."
          }
        },
        "parameters": [
          {
            "required": false,
            "name": "partial_success",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The labor category entries to create.",
          "required": true
        },
        "description": "This operation creates a list of labor category entries. Each entry is created as inactive unless the 'inactive' Boolean is set to 'false' for each entry.",
        "tags": [
          "Labor Category Entries"
        ],
        "summary": "Create Labor Category Entries",
        "operationId": "Create Labor Category Entries"
      }
    },
    "/v1/commons/labor_category_profiles/current_user": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved the labor category profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Profile_Model"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not to retrieve the employee profile. If false, the manager profile is retrieved.",
            "required": false,
            "in": "query",
            "name": "employeeProfile",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "A Boolean indicator of whether or not the entry lists should be fully populated.",
            "required": false,
            "in": "query",
            "name": "populateEntryLists",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "A Boolean indicator of whether or not the system entry lists should be fully populated.",
            "required": false,
            "in": "query",
            "name": "populateSystemLists",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "The Date that define which version will be retrieved.",
            "required": false,
            "name": "snapshot_date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns the labor category profile for the current user.",
        "tags": [
          "Labor Category Profiles"
        ],
        "summary": "Retrieve Labor Category Profile for Current User",
        "operationId": "Retrieve Labor Category Profile for Current User"
      }
    },
    "/v1/commons/jobs/{jobId}": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericJob"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad Request:</p><ul> <li>[WCO-103002] - Some unexpected error occurs {detail}, please check the system log. </li> <li>[WCO-103005] - The supplied identifier {identifier} in the URI does not match the identifier {identifier2} in the payload. </li> <li>[WCO-103006] - The parameter {paramName} is mandatory, cannot be missing or empty. </li> <li>[WCO-103015] - The organizational object reference is mandatory and cannot be missing or empty. </li> <li>[WCO-103023] - The expiration date {date} cannot be earlier than or the same as the effective date {date2}. </li> <li>[WCO-103108] - The job {identifier} does not exist. </li> <li>[WCO-103109] - The job {identifier} does not exist on {date}. </li> <li>[WCO-103110] - The job name or id is mandatory and cannot be missing or empty. </li> <li>[WCO-103015] - The organizational object reference is mandatory and cannot be missing or empty. </li> <li>[WFP-90005] - Operation not permitted.{S} </li> <li>Incorrect Request Parameter/Invalid Request Body.</li></ul>"
          },
          "404": {
            "description": "The Job cannot be found."
          }
        },
        "parameters": [
          {
            "description": "The ID of the generic job.",
            "required": true,
            "in": "path",
            "name": "jobId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericJob"
              }
            }
          },
          "description": "The Update Generic Job by ID request payload.",
          "required": true
        },
        "description": "This operation updates a generic job by ID according to the provided data.",
        "tags": [
          "Jobs"
        ],
        "summary": "Update Generic Job by ID",
        "operationId": "Update Generic Job by ID"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          },
          "404": {
            "description": "The Locale Policy cannot be found."
          }
        },
        "parameters": [
          {
            "description": "The ID of the generic job.",
            "required": true,
            "in": "path",
            "name": "jobId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "This operation deletes all revisions of a generic job by ID and according to the provided data.",
        "tags": [
          "Jobs"
        ],
        "summary": "Delete Generic Job by ID",
        "operationId": "Delete Generic Job by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericJob"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          },
          "404": {
            "description": "The Job cannot be found."
          }
        },
        "parameters": [
          {
            "description": "The ID of the effective job.",
            "required": true,
            "in": "path",
            "name": "jobId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The effective date of the job in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns an effective job by ID and date.",
        "tags": [
          "Jobs"
        ],
        "summary": "Retrieve Effective Job by ID",
        "operationId": "Retrieve Effective Job by ID"
      }
    },
    "/v1/commons/known_places/{id}": {
      "put": {
        "responses": {
          "200": {
            "description": "Successfully updated known place.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Known_Place_Response"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Name must be unique. This name is already used.</li><li>The latitude must be a double number within the following range: -90, 90.</li><li>The longitude must be a double number within the following range: -180, 180.</li><li>Punch radius must be a positive float number.</li><li>Name is required.</li><li>Latitude is required.</li><li>Longitude is required.</li><li>Punch radius is required.</li><li>Version is required.</li><li>Id is required.</li><li>Id doesn't match the URI path.</li><li>Name contains illegal characters.</li><li>Description contains illegal characters.</li></ul>"
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "A Known Place with that ID does not exist."
          },
          "409": {
            "description": "The Known Place has been modified by another user. Please refresh your data, incorporate your changes, and save again."
          }
        },
        "parameters": [
          {
            "description": "The ID of a Known Place.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Known_Place_Request"
        },
        "description": "<p>This operation updates a Known Place.</p><br /><p>The associated Access Control Point is KNOWN_PLACES.</p>",
        "tags": [
          "GPS Known Places"
        ],
        "summary": "Update Known Place by ID",
        "operationId": "Update Known Place by ID"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Successfully deleted Known Place."
          },
          "404": {
            "description": "A Known Place with that ID does not exist."
          }
        },
        "parameters": [
          {
            "description": "The ID of a Known Place.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "<p>This operation deletes a Known Place by ID.</p><br /><p>The associated Access Control Point is KNOWN_PLACES.</p>",
        "tags": [
          "GPS Known Places"
        ],
        "summary": "Delete Known Place by ID",
        "operationId": "Delete Known Place by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved the Known Place.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Known_Place_Response"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "404": {
            "description": "A Known Place with that ID does not exist."
          }
        },
        "parameters": [
          {
            "description": "Unique identifier for the Known Place to retrieve.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "<p>This operation returns a Known Place by ID.</p><br /><p>The associated Access Control Point is KNOWN_PLACES.</p>",
        "tags": [
          "GPS Known Places"
        ],
        "summary": "Retrieve Known Place by ID",
        "operationId": "Retrieve Known Place by ID"
      }
    },
    "/v2/commons/labor_entries": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Labor Category Entries.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Entry_Model"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The ID of a labor category.",
            "required": true,
            "in": "query",
            "name": "categoryId",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "<p>This operation returns a list of all labor category entries associated with a labor category ID.</p><br /><p>The associated Access Control Point is LABOR_CATEGORY.</p>",
        "tags": [
          "Labor Category Entries"
        ],
        "summary": "Retrieve Labor Category Entries by Category ID",
        "operationId": "Retrieve Labor Category Entries by Category ID"
      }
    },
    "/v1/commons/locations/external_ids/{external_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          },
          "404": {
            "description": "A Location with the specified external ID does not exist."
          }
        },
        "parameters": [
          {
            "description": "The path of a location.",
            "required": false,
            "name": "sub_path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The context of a location.",
            "required": true,
            "name": "context",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The effective date of a location in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a location.",
            "required": true,
            "name": "external_id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns a location by external ID and date.",
        "tags": [
          "Locations"
        ],
        "summary": "Retrieve Location by External ID",
        "operationId": "Retrieve Location by External ID"
      }
    },
    "/v1/commons/home_pages": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created a home page with tile assignments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomePage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HomePage"
              }
            }
          },
          "description": "The Create Home Page request payload."
        },
        "tags": [
          "Home Pages"
        ],
        "description": "This operation creates a home page with tile assignments.",
        "summary": "Create Home Page",
        "operationId": "Create Home Page"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved all home pages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomePage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not to retrieve home pages with a full set of properties for tile references (id, qualifier, name, label). If false, home pages are retrieved with default properties for tile references (id, qualifier).",
            "required": false,
            "in": "query",
            "name": "ref_extensions",
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "description": "A Boolean indicator of whether or not to retrieve home pages with tile references and associated card details. If false, the system returns only tile references.",
            "required": false,
            "in": "query",
            "name": "expanded",
            "schema": {
              "type": "boolean",
              "enum": [
                "true",
                "false"
              ]
            }
          }
        ],
        "tags": [
          "Home Pages"
        ],
        "description": "This operation returns all home pages.",
        "summary": "Retrieve Home Pages",
        "operationId": "Retrieve Home Pages"
      }
    },
    "/v1/commons/locations/multi_create": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrgMapNodeRest"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad Request:</p><ul> <li>WCO-103002 : Some unexpected error occurs {detail}, please check the system log. </li> <li>WCO-103006 : The parameter {paramName} is mandatory, cannot be missing or empty. </li> <li>WCO-103015 : The organizational object reference is mandatory and cannot be missing or empty. </li> <li>WFP-90005 : Operation not permitted.{S} </li> <li>Incorrect Request Parameter/Invalid Request Body.</li> </ul>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/OrgMapNodeRest"
                },
                "type": "array"
              }
            }
          },
          "description": "A list of nodes as an input for creation.",
          "required": true
        },
        "description": "This operation creates Organizational Map locations.",
        "tags": [
          "Locations"
        ],
        "summary": "Create Locations",
        "operationId": "Create Locations"
      }
    },
    "/v1/commons/jobs/persistent_ids/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiReadByPersistentIdResponse"
                }
              }
            }
          },
          "207": {
            "description": "Partially retrieved nodeIds."
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiReadJobsByPersistentIdRequest"
              }
            }
          },
          "description": "The Retrieve Job Mappings by Persistent IDs request payload.",
          "required": true
        },
        "description": "This operation returns mappings between <code>nodeId</code> and <code>persistentId</code> by persistent IDs.",
        "tags": [
          "Jobs"
        ],
        "summary": "Retrieve Job Mappings by Persistent IDs",
        "operationId": "Retrieve Job Mappings by Persistent IDs"
      }
    },
    "/v1/commons/labor_category_list_assignments/multi_update": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully updated a list of labor category list assignments.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Entry_ListAssignment_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: <ul><li>The labor category list assignments to update must exist</li></ul>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_ListAssignment_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The Update Labor Category List Assignments request payload.",
          "required": true
        },
        "description": "This operation updates a list of labor category list assignments.",
        "tags": [
          "Labor Category List Assignments"
        ],
        "summary": "Update Labor Category List Assignments",
        "operationId": "Update Labor Category List Assignments"
      }
    },
    "/v1/commons/location_attribute_assignments/apply_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationAttributeValueResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-129901] - You must specify the following parameter: {paramName}.</li><li>[WCO-129907] - Request body is missing. Specify request parameters.</li><li>[WCO-129913] - Entity not found. Type: {object}. Name or ID: {qualifier/id}.</li><li>[WFP-90100] - The date format is invalid.</li></ul>"
          },
          "403": {
            "description": "<ul><li>[WCO-129903] - The user is not authorized to perform this action.</li></ul>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationAttributeAssignmentRequest"
              }
            }
          },
          "description": "The Retrieve Location Attribute Value request payload.",
          "required": true
        },
        "description": "<p>This operation returns a location attribute value.</p><br /><p>The associated Access Control Point is REST_API_SETUP.</p>",
        "tags": [
          "Location Attribute Assignments"
        ],
        "summary": "Retrieve Location Attribute Value",
        "operationId": "Retrieve Location Attribute Value"
      }
    },
    "/v1/commons/entity_definitions/multi_upsert": {
      "post": {
        "responses": {
          "204": {
            "description": "One or more entity definitions successfully updated."
          },
          "207": {
            "description": "[WCO-111041] - Partially updated a list of entity definitions. A save error occurred when attempting to update some of the entity definitions."
          },
          "400": {
            "description": "[WCO-111042] - A save error occurred when attempting to update the specified entity definitions."
          },
          "404": {
            "description": "[WCO-111038] - The specified entity definition object references do not exist."
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/IA_Entity_Definition_ModelArray"
        },
        "tags": [
          "Entity Definitions"
        ],
        "description": "This operation creates or updates one or more entity definitions.",
        "summary": "Create or Update Entity Definitions",
        "operationId": "Create or Update Entity Definitions"
      }
    },
    "/v1/commons/locale_policies/multi_create": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CommonsLocalePolicy"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Incorrect Request Parameter/Invalid Request Body.</li><li>Invalid characters ({reservedChar}) were found in the parameter for locale.</li>"
          },
          "409": {
            "description": "<ul><li>The name already exists for another locale.</li><li>The length of {param} cannot exceed {max} characters for locale.</li><li>DecimalSymbol and GroupingSymbol must not be the same for locale.</li>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CommonsLocalePolicy"
                },
                "type": "array"
              }
            }
          },
          "description": "The Create Locale Policies request payload.",
          "required": true
        },
        "description": "This operation creates new locale policies.",
        "tags": [
          "Locale Policies"
        ],
        "summary": "Create Locale Policies",
        "operationId": "Create Locale Policies"
      }
    },
    "/v1/commons/labor_category_lists/multi_create": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created a list of labor category lists.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LaborCategoryEntryList"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially succeeded in creating a list of labor category lists."
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not processing continues if errors are encountered. When false, the operation fails on the first error and results in no changes. Defaults to false.",
            "required": false,
            "name": "partial_success",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "A Boolean indicator of whether or not to support resolving labor category list entries by wildcard.",
            "required": false,
            "name": "resolvedByWildcard",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_List_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The Create Labor Category Lists request payload.",
          "required": true
        },
        "description": "This operation creates a list of labor category lists.",
        "tags": [
          "Labor Category Lists"
        ],
        "summary": "Create Labor Category Lists",
        "operationId": "Create Labor Category Lists"
      }
    },
    "/v1/commons/labor_entries/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieved Labor Category Entries.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_Model"
                }
              }
            }
          },
          "207": {
            "description": "Partially succeeded in retrieving Labor Category Entries."
          },
          "400": {
            "description": "Bad Request: The Labor Category Entries retrieval unsuccessful."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaborCategoryEntrySearchCriteria"
              }
            }
          },
          "description": "The Retrieve Labor Category Entries request payload.",
          "required": true
        },
        "description": "<p>This operation returns one or more labor category entries by object references.</p><br /><p>The associated Access Control Point is LABOR_CATEGORY.</p>",
        "tags": [
          "Labor Category Entries"
        ],
        "summary": "Retrieve Labor Category Entries",
        "operationId": "Retrieve Labor Category Entries"
      }
    },
    "/v1/commons/jobs/external_ids/{externalId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgObjectRef"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          },
          "404": {
            "description": "An Effective Job with the specified external ID does not exist."
          }
        },
        "parameters": [
          {
            "description": "The external ID of the effective job.",
            "required": true,
            "name": "externalId",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The effective date of the job in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns an object reference to an effective job by external ID and date.",
        "tags": [
          "Jobs"
        ],
        "summary": "Retrieve Effective Job Reference by External ID",
        "operationId": "Retrieve Effective Job Reference by External ID"
      }
    },
    "/v2/commons/labor_category_lists/versions/apply_upsert": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully updated a list of labor category lists with effective versions.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Entry_List_With_Versions_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially succeeded in updating a list of labor category lists with effective versions."
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not to support resolving labor category list entries by wildcard.",
            "required": false,
            "name": "resolvedByWildcard",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_List_With_Versions_Apply_Upsert_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The Update Labor Category Lists with Effective Versions request payload.",
          "required": true
        },
        "description": "<p>This operation updates one or more labor category lists with effective versions.</p><br /><p>The associated Access Control Point is LABOR_ENTRIES_LIST.</p>",
        "tags": [
          "Labor Category Lists"
        ],
        "summary": "Update Labor Category Lists with Effective Versions",
        "operationId": "Update Labor Category Lists with Effective Versions"
      }
    },
    "/v1/commons/locations/multi_delete": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgMapMultipleLocationMultiDeleteRequest"
              }
            }
          },
          "description": "The Delete Locations request payload.",
          "required": true
        },
        "description": "This operation deletes Organizational Map locations.",
        "tags": [
          "Locations"
        ],
        "summary": "Delete Locations",
        "operationId": "Delete Locations"
      }
    },
    "/v1/commons/home_pages/{id}/personalization": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully personalized a home page's tile assignments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomePage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "parameters": [
          {
            "description": "The ID of a home page.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HomePage"
              }
            }
          },
          "description": "The Personalize Home Page by ID request payload, which defines the personalizations to a home page's tile assignments."
        },
        "tags": [
          "Home Pages"
        ],
        "description": "This operation personalizes a home page by ID.",
        "summary": "Personalize Home Page by ID",
        "operationId": "Personalize Home Page by ID"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Successfully deleted a personalized home page and restored that home page to a default state."
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "parameters": [
          {
            "description": "The ID of a home page.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Home Pages"
        ],
        "description": "This operation deletes a personalized home page and restores that home page to a default state by removing all personalized tile associations according to the provided home page ID.",
        "summary": "Delete a Personalized Home Page by ID",
        "operationId": "Delete a Personalized Home Page by ID"
      }
    },
    "/v1/commons/labor_categories/multi_update": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully updated a list of Labor Categories.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: <ul><li>The labor categories to update must exist</li></ul>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The labor categories to update.",
          "required": true
        },
        "description": "This operation updates a list of labor categories.",
        "tags": [
          "Labor Categories"
        ],
        "summary": "Update Labor Categories",
        "operationId": "Update Labor Categories"
      }
    },
    "/v1/commons/labor_categories": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully Retrieved a list of Labor Categories.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Model"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "description": "The name of the labor category to retrieve.",
            "required": false,
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "deprecated": true,
        "description": "<p><strong>This operation is deprecated; instead use GET /v2/commons/labor_categories.</strong></p><p>This operation returns a list of all labor categories or a single labor category by name.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "tags": [
          "Labor Categories"
        ],
        "summary": "Retrieve All Labor Categories or by Name (Deprecated)",
        "operationId": "Retrieve All Labor Categories or by Name (Deprecated)"
      }
    },
    "/v1/commons/start_day_weeks/apply_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalDateSpan"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-129901] - You must specify the following parameter: {paramName}.</li><li>[WCO-129907] - Request body is missing. Specify request parameters.</li><li>[WCO-129913] - Entity not found. Type: {object}. Name or ID: {qualifier/id}.</li><li>[WCO-129930] - This API operation is disabled as part of the Multiple Week Start Days feature. Enable that feature to gain access to this operation.</li><li>[WFP-90100] - The date format is invalid.</li></ul>"
          },
          "403": {
            "description": "<ul><li>[WCO-129903] - The user is not authorized to perform this action.</li></ul>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartDayWeekRequest"
              }
            }
          },
          "description": "The Retrieve Location Attribute Week Span request payload.",
          "required": true
        },
        "description": "<p>This operation returns a location attribute week span.</p><br /><p>The associated Access Control Point is REST_API_SETUP.</p>",
        "tags": [
          "Location Attribute Start Day Of Week"
        ],
        "summary": "Retrieve a Location Attribute Week Span",
        "operationId": "Retrieve a Location Attribute Week Span"
      }
    },
    "/v1/commons/location_types/{id}": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonsOrgNodeType"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "parameters": [
          {
            "description": "The ID of the location type.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommonsOrgNodeType"
              }
            }
          },
          "description": "The Update Location Type by ID request payload.",
          "required": true
        },
        "description": "This operation updates a location type by ID and according to the provided data.",
        "tags": [
          "Location Types"
        ],
        "summary": "Update Location Type by ID",
        "operationId": "Update Location Type by ID"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Incorrect Request Parameter or Invalid Request Body."
          },
          "404": {
            "description": "Location Type not found."
          }
        },
        "parameters": [
          {
            "description": "The ID of the location type.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "This operation deletes a location type by ID and according to the provided data.",
        "tags": [
          "Location Types"
        ],
        "summary": "Delete Location Type by ID",
        "operationId": "Delete Location Type by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonsOrgNodeType"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "parameters": [
          {
            "description": "The ID of the location type.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The effective date of the location type.",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns location (node) type information by ID and date.",
        "tags": [
          "Location Types"
        ],
        "summary": "Retrieve Location Type by ID",
        "operationId": "Retrieve Location Type by ID"
      }
    },
    "/v2/commons/labor_category_lists/apply_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieval of labor category list with effective version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paginationSortAndFilterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The Labor Category List of Entries retrieval unsuccessful."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/laborCategoryEntryListPaginationSortFilterRestParameters"
              }
            }
          },
          "description": "The Retrieve Paginated Labor Category List with Effective Version request payload.",
          "required": true
        },
        "description": "<p>This operation returns a paginated labor category list with effective version.</p><br /><p>The associated Access Control Point is LABOR_ENTRIES_LIST.</p>",
        "tags": [
          "Labor Category Lists"
        ],
        "summary": "Retrieve Paginated Labor Category List with Effective Version",
        "operationId": "Retrieve Paginated Labor Category List with Effective Version"
      }
    },
    "/v1/commons/hyperfind_profiles": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Hyperfind Profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HyperFind_Profile"
                  },
                  "type": "array"
                }
              }
            }
          },
          "403": {
            "description": "The current user is not authorized to access Hyperfind Profiles."
          }
        },
        "description": "This operation returns a list of all Hyperfind Profiles.",
        "tags": [
          "Hyperfind Profiles"
        ],
        "summary": "Retrieve All Hyperfind Profiles",
        "operationId": "Retrieve All Hyperfind Profiles"
      }
    },
    "/v1/commons/entity_definitions": {
      "post": {
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IA_Entity_Definition_Model"
                }
              }
            }
          },
          "201": {
            "description": "Successfully created an entity definition.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IA_Entity_Definition_Model"
                }
              }
            }
          },
          "400": {
            "description": "[WCO-111042] - A save error occurred when attempting to create the entity definition."
          },
          "409": {
            "description": "[WCO-111034] - An entity definition with that key and type already exists."
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/IA_Entity_Definition_Model"
        },
        "tags": [
          "Entity Definitions"
        ],
        "description": "This operation creates an entity definition.",
        "summary": "Create Entity Definition",
        "operationId": "Create Entity Definition"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved all entity definitions.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IA_Entity_Definition_Model"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "tags": [
          "Entity Definitions"
        ],
        "description": "This operation returns all entity definitions.",
        "summary": "Retrieve All Entity Definitions",
        "operationId": "Retrieve All Entity Definitions"
      }
    },
    "/v1/commons/location_attributes/multi_delete": {
      "post": {
        "responses": {
          "204": {
            "description": "Success."
          },
          "207": {
            "description": "[WCO-129922] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseBatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-129902] - The following object reference is invalid: {paramName}.</li><li>[WCO-129924] - The following reference list cannot be empty: {paramName}.</li><li>[WCO-129923] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li><li>[WCO-129901] - You must specify the following parameter: {paramName}.</li><li>[WCO-129907] - Request body is missing. Specify request parameters.</li><li>[WCO-129904] - Entity not found. Type: Attribute. Name or ID: {id}</li><li>[WCO-129906] - Can not delete attribute as it has locations assigned.</li></ul>"
          },
          "403": {
            "description": "[WCO-129903] - The user is not authorized to perform this action."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationAttributeSearchCriteria"
              }
            }
          },
          "description": "The Delete Location Attributes request payload.",
          "required": true
        },
        "description": "<p>This operation deletes one or more location attributes.</p><br /><p>The associated Access Control Point is REST_API_SETUP.</p>",
        "tags": [
          "Location Attributes"
        ],
        "summary": "Delete Location Attributes",
        "operationId": "Delete Location Attributes"
      }
    },
    "/v2/commons/labor_category_lists/multi_create": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created a list of labor category lists with effective versions.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LaborCategoryListServiceForRestV2"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially succeeded in creating a list of labor category lists with effective versions."
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not to support resolving labor category list entries by wildcard.",
            "required": false,
            "name": "resolvedByWildcard",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_List_With_Versions_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The Create Labor Category Lists with Effective Versions request payload.",
          "required": true
        },
        "description": "<p>This operation creates one or more labor category lists with effective versions.</p><br /><p>The associated Access Control Point is LABOR_ENTRIES_LIST.</p>",
        "tags": [
          "Labor Category Lists"
        ],
        "summary": "Create Labor Category Lists with Effective Versions",
        "operationId": "Create Labor Category Lists with Effective Versions"
      }
    },
    "/v1/commons/location_types": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonsOrgNodeType"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommonsOrgNodeType"
              }
            }
          },
          "description": "The Create Location Type request payload.",
          "required": true
        },
        "description": "This operation creates a location type according to the provided data.",
        "tags": [
          "Location Types"
        ],
        "summary": "Create Location Type",
        "operationId": "Create Location Type"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Incorrect Request Parameter or Invalid Request Body."
          },
          "404": {
            "description": "Location Type not found."
          }
        },
        "parameters": [
          {
            "description": "The name of the location type.",
            "required": true,
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The effective date of the location type.",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation deletes a location type according to the provided data.",
        "tags": [
          "Location Types"
        ],
        "summary": "Delete Location Type",
        "operationId": "Delete Location Type"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonsOrgNodeType"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "parameters": [
          {
            "description": "The name of the location type.",
            "required": true,
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The effective date of the location type.",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns location (node) types by name and date.",
        "tags": [
          "Location Types"
        ],
        "summary": "Retrieve Location Types by Name",
        "operationId": "Retrieve Location Types by Name"
      }
    },
    "/v1/commons/locations/multi_update/async": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrgMapNodeRest"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/OrgMapNodeRest"
                },
                "type": "array"
              }
            }
          },
          "description": "A list of nodes in the payload.",
          "required": true
        },
        "description": "This operation updates Organizational Map locations asynchronously.",
        "tags": [
          "Locations"
        ],
        "summary": "Update Locations Asynchronously",
        "operationId": "Update Locations Asynchronously"
      }
    },
    "/v1/commons/location_attributes/multi_upsert": {
      "post": {
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LocationAttribute"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "[WCO-129922] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseBatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-129915] - Start day of week can not be changed as it already has assigned locations.</li><li>[WCO-129907] - Request body is missing. Specify request parameters.</li><li>[WCO-129901] - You must specify the following parameter: {paramName}.</li><li>[WCO-129911] - The attribute name exceeds the maximum allowed 75 length.</li><li>[WCO-129912] - The following parameter: {paramName} contains forbidden symbols: {forbiddenSymbols}.</li><li>[WCO-129917] - The following parameter must be null: {param}.</li><li>[WCO-129913] - Entity not found. Type: {object}. Name or ID: {qualifier/id}.</li><li>[WCO-129908] - Category path {categoryPathName} is not site type or type above site.</li><li>[WCO-129921] - The attribute name: {paramName} is not unique.</li><li>[WCO-129919] - The following parameter can not be empty: {paramName}.</li><li>[WCO-129914] - Org nodes are not unique.</li><li>[WCO-129909] - ID from path does not match ID from request payload.</li><li>[WCO-129916] - Cannot assign selected Locations. The Location: {location} is already assigned to another Location Attribute: {name}. A Location can be assigned to only one Location Attribute.</li></ul>"
          },
          "403": {
            "description": "[WCO-129903] - The user is not authorized to perform this action."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/LocationAttribute"
                },
                "type": "array"
              }
            }
          },
          "description": "The Create or Update Location Attributes request payload.",
          "required": true
        },
        "description": "<p>This operation creates or updates one or more location attributes.</p><br /><p>The associated Access Control Point is REST_API_SETUP.</p>",
        "tags": [
          "Location Attributes"
        ],
        "summary": "Create or Update Location Attributes",
        "operationId": "Create or Update Location Attributes"
      }
    },
    "/v1/commons/labor_category_profiles/apply_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieval of Labor Category Profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pagination_Response_for_Labor_Category_Profiles_with_entry"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The Labor Category Profiles retrieval unsuccessful."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/laborCategoryProfilePaginationSortFilterRestParameters"
              }
            }
          },
          "description": "The Retrieve Labor Category Profiles request payload.",
          "required": true
        },
        "description": "<p>This operation returns a paginated list of labor category profiles.</p><br /><p>The associated Access Control Point is LABOR_ENTRIES_LIST.</p>",
        "tags": [
          "Labor Category Profiles"
        ],
        "summary": "Retrieve Paginated List of Labor Category Profiles",
        "operationId": "Retrieve Paginated List of Labor Category Profiles"
      }
    },
    "/v1/commons/location_types/external_ids/{externalId}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgObjectRef"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          },
          "404": {
            "description": "A Location Type with the specified external ID does not exist."
          }
        },
        "parameters": [
          {
            "description": "The external ID of the location type.",
            "required": true,
            "name": "externalId",
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The effective date of the location type.",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns location (node) type information by external ID and date.",
        "tags": [
          "Location Types"
        ],
        "summary": "Retrieve Location Type by External ID",
        "operationId": "Retrieve Location Type by External ID"
      }
    },
    "/v1/commons/hyperfind/public": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of public Hyperfind queries.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HyperfindQueryList"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul> <li>[WCO-112057] - Unknown error occurred. {Message} </li> <li>[WCO-112060] - User is not allowed to access this resource. </li> <li>[WCO-112062] - You do not have access to the following filters in requested operation: {inaccessibleFilters} </li> <li>[WCO-112063] - Cannot find specified Hyperfind query. </li> <li>[WCO-112064] - Cannot determine access control point of the filter. </li> <li>[WCO-112068] - A {queryType} Hyperfind query already exist with same name. </li> </ul>"
          },
          "403": {
            "description": "[WCO-112060] - User is not allowed to access this resource."
          },
          "500": {
            "description": "<ul><li>[WCO-112057] - An unknown error occurred. {Message}</li></ul>"
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not to retrieve detailed constraint information. This parameter defaults to false.",
            "required": false,
            "name": "all_details",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "description": "This operation returns a list of public Hyperfind queries accessible to the current user.",
        "tags": [
          "Hyperfind Queries"
        ],
        "summary": "Retrieve Public Hyperfind Queries",
        "operationId": "Retrieve Public Hyperfind Queries"
      }
    },
    "/v1/commons/location_types/external_ids/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiReadTypesByExternalIdResponse"
                }
              }
            }
          },
          "207": {
            "description": "Partially retrieved effective location types."
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiReadTypesByExternalIdRequest"
              }
            }
          },
          "description": "The Retrieve Location Types by External IDs request payload.",
          "required": true
        },
        "description": "This operation returns location (node) types by external IDs and date.",
        "tags": [
          "Location Types"
        ],
        "summary": "Retrieve Location Types by External IDs",
        "operationId": "Retrieve Location Types by External IDs"
      }
    },
    "/v1/commons/currency/conversions/apply_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieved the converted Exchange Amount."
          },
          "403": {
            "description": "You are not authorized to perform this operation."
          },
          "404": {
            "description": "The requested resource cannot be found."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExchangeCurrencyParam"
              }
            }
          },
          "description": "A reference to an object that contains the source currency reference, the target currency reference, the apply date or date range, and the amount to be converted."
        },
        "tags": [
          "Exchange Rates"
        ],
        "description": "This operation converts an amount in one currency to an amount in another currency, both of which must already be defined, valid currencies in your environment.",
        "summary": "Retrieve Converted Amount",
        "operationId": "Retrieve Converted Amount"
      }
    },
    "/v1/commons/locations/persistent_ids/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "207": {
            "description": "Partially retrieved nodeIds."
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiReadLocationsByPersistentIdRequest"
              }
            }
          },
          "description": "The Retrieve Location Mappings by Persistent IDs request payload.",
          "required": true
        },
        "description": "This operation returns mappings between <code>nodeId</code> and <code>persistentId</code> by persistent IDs.",
        "tags": [
          "Locations"
        ],
        "summary": "Retrieve Location Mappings by Persistent IDs",
        "operationId": "Retrieve Location Mappings by Persistent IDs"
      }
    },
    "/v1/commons/labor_entries/multi_update": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully updated a list of Labor Category Entries.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Entry_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially succeeded in updating a list of Labor Category Entries."
          },
          "400": {
            "description": "Bad Request: <ul><li>The labor category entries to update must exist</li></ul>"
          }
        },
        "parameters": [
          {
            "required": false,
            "name": "partial_success",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The labor category entries to update.",
          "required": true
        },
        "description": "This operation updates a list of labor category entries.",
        "tags": [
          "Labor Category Entries"
        ],
        "summary": "Update Labor Category Entries",
        "operationId": "Update Labor Category Entries"
      }
    },
    "/v1/commons/labor_category_profiles/multi_delete": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully deleted a list of labor category profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Profile_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially deleted a list of labor category profiles."
          },
          "400": {
            "description": "Bad Request: <ul><li>The labor category profiles to delete must exist</li></ul>"
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not processing continues if errors are encountered. Defaults to false.",
            "required": false,
            "in": "query",
            "name": "partial_success",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaborCategoryWhereRequest"
              }
            }
          },
          "description": "The Delete Labor Category Profiles request payload.",
          "required": true
        },
        "description": "This operation deletes a list of labor category profiles.",
        "tags": [
          "Labor Category Profiles"
        ],
        "summary": "Delete Labor Category Profiles",
        "operationId": "Delete Labor Category Profiles"
      }
    },
    "/v1/commons/entity_definitions/{id}": {
      "put": {
        "responses": {
          "200": {
            "description": "Successfully updated an entity definition by ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IA_Entity_Definition_Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "409": {
            "description": "[WCO-111034] - An entity definition with that key and type already exists."
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/IA_Entity_Definition_Model"
        },
        "tags": [
          "Entity Definitions"
        ],
        "description": "This operation updates an entity definition by ID.",
        "summary": "Update Entity Definition by ID",
        "operationId": "Update Entity Definition by ID"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Entity definition successfully deleted."
          },
          "404": {
            "description": "[WCO-111035] - An entity definition with ID: {id} does not exist."
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Entity Definitions"
        ],
        "description": "This operation deletes an entity definition by ID.",
        "summary": "Delete Entity Definition by ID",
        "operationId": "Delete Entity Definition by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved an entity definition by ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IA_Entity_Definition_Model"
                }
              }
            }
          },
          "404": {
            "description": "[WCO-111035] - Entity Definition with ID:{id} does not exist to retrieve."
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Entity Definitions"
        ],
        "description": "This operation returns an entity definition by ID.",
        "summary": "Retrieve Entity Definition by ID",
        "operationId": "Retrieve Entity Definition by ID"
      }
    },
    "/v1/commons/locations/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrgMapNodeWithPath"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p> <ul> <li>[WCO-103002] - Some unexpected error occurs {detail}, please check the system log. </li> <li>[WCO-103006] - The parameter {paramName} is mandatory, cannot be missing or empty. </li> <li>[WCO-103007] - Provide value for exactly one of the criteria to receive response. Criteria: {criteriaNameStr}. </li> <li>[WCO-103008] - At least one of the criteria must be specified. Parameter: {paramName}. </li> <li>[WCO-103010] - The date range is invalid, verify the effective date {start_date} and the expiration date {end_date}. </li> <li>[WCO-103511] - No data found corresponding to the qualifier {locationSetQualifier}. </li> <li>[WCO-103015] - The organizational object reference is mandatory and cannot be missing or empty. </li> <li>[WCO-103020] - The effective and expiration dates are mandatory and cannot be missing or empty. </li> <li>[WCO-103027] - The location id is mandatory and should not be missing or empty. </li> <li>[WCO-103029] - The location {identifier} does not exist. </li> <li>[WCO-103030] - The location {identifier} does not exist on {date}. </li> <li>[WCO-103094] - The context {identifier} does not exist. </li> <li>[WCO-103095] - The context is mandatory and cannot be missing or empty. </li> <li>[WCO-103123] - The location set is mandatory and cannot be missing or empty. </li> <li>[WCO-103124] - The location set type {identifier} does not exist. </li> <li>[WCO-103198] - Either ids or qualifiers should be present. </li> <li>[WCO-103199] - Start date value {start_date} is after the end date value {end_date}. </li> <li>[WCO-103208] - Completed with error(s). Detailed errors should be wrapped within this exception. </li> <li>[WCO-103507] - Please provide exactly one attribute in {paramName}. </li> <li>[WCO-103512] - No data found corresponding to the persistentId {locationSetPersistentId}. </li> <li>[WFP-90004] - You are trying to update an item that has been modified by another user or process.  Reload and try again. </li> <li>[WFP-90005] - Operation not permitted.{S} </li> </ul>"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/OrgMapMultipleLocationMultiReadRequest"
        },
        "description": "<p>This operation returns Organizational Map locations. Search data can include query info, date, location set, descendants, parent, ancestors, or children.</p><p>You can use this powerful operation to retrieve a variety of location-related data.</p><p>Consider the following example. Given an employee's primary job, you can retrieve the location type names for each node of the employee's primary job path. In the following example response, the <code>orgNodeTypeRef</code> is the location type of each node in the path. Refer to the example below for request and response details.</p><br /><h2>Example Request</h2><pre><code>{<br />  \"multiReadOptions\": {<br />    \"includeOrgPathDetails\": true<br />  },<br />  \"where\": {<br />    \"ancestorsOf\": {<br />      \"context\": \"ORG\",<br />      \"date\": \"2022-03-18\",<br />      \"locationRef\": {<br />        \"qualifier\": \"Organization/United States/Metropolitan Plant/Machine Shop/Apprentice Welder\"<br />      }<br />    }<br />  }<br />}</code></pre><br /><h2>Example Response</h2><pre><code>[<br />  {<br />    \"nodeId\": 63,<br />    \"orgNodeTypeRef\": {<br />      \"id\": 6,<br />      \"qualifier\": \"Department\"<br />    },<br />    \"parentNodeRef\": {<br />      \"id\": 51,<br />      \"qualifier\": \"Organization/United States/Metropolitan Plant\"<br />    },<br />    \"name\": \"Machine Shop\",<br />    \"fullName\": \"Machine Shop\",<br />    \"description\": \"Machine Shop\",<br />    \"effectiveDate\": \"1900-01-01\",<br />    \"expirationDate\": \"3000-01-01\",<br />    \"firstRevision\": true,<br />    \"lastRevision\": true,<br />    \"transferable\": false,<br />    \"orgPath\": \"Organization/United States/Metropolitan Plant/Machine Shop\",<br />    \"orgPathHierarchy\": [<br />      {<br />        \"id\": 1,<br />        \"qualifier\": \"Organization\"<br />      },<br />      {<br />        \"id\": 2,<br />        \"qualifier\": \"United States\"<br />      },<br />      {<br />        \"id\": 51,<br />        \"qualifier\": \"Metropolitan Plant\"<br />      },<br />      {<br />        \"id\": 63,<br />        \"qualifier\": \"Machine Shop\"<br />      }<br />    ],<br />    \"contextRef\": {<br />      \"id\": -1,<br />      \"qualifier\": \"ORG\"<br />    },<br />    \"persistentId\": \"f367c0ff-0232-49fe-899e-c568cc4e588f\"<br />  },<br />  {<br />    \"nodeId\": 51,<br />    \"orgNodeTypeRef\": {<br />      \"id\": 5,<br />      \"qualifier\": \"Site\"<br />    },<br />    \"parentNodeRef\": {<br />      \"id\": 2,<br />      \"qualifier\": \"Organization/United States\"<br />    },<br />    \"name\": \"Metropolitan Plant\",<br />    \"fullName\": \"Metropolitan Plant\",<br />    \"description\": \"Metropolitan Plant\",<br />    \"effectiveDate\": \"2019-02-09\",<br />    \"expirationDate\": \"3000-01-01\",<br />    \"address\": \"1 innovation Way (Manchester St.) Merrimack, NH 03054\",<br />    \"firstRevision\": false,<br />    \"lastRevision\": true,<br />    \"transferable\": false,<br />    \"orgPath\": \"Organization/United States/Metropolitan Plant\",<br />    \"orgPathHierarchy\": [<br />      {<br />        \"id\": 1,<br />        \"qualifier\": \"Organization\"<br />      },<br />      {<br />        \"id\": 2,<br />        \"qualifier\": \"United States\"<br />      },<br />      {<br />        \"id\": 51,<br />        \"qualifier\": \"Metropolitan Plant\"<br />      }<br />    ],<br />    \"contextRef\": {<br />      \"id\": -1,<br />      \"qualifier\": \"ORG\"<br />    },<br />    \"persistentId\": \"f227ca87-e3e3-4600-9c04-c5d5a410f8b5\"<br />  },<br />  {<br />    \"nodeId\": 2,<br />    \"orgNodeTypeRef\": {<br />      \"id\": 11,<br />      \"qualifier\": \"Region\"<br />    },<br />    \"parentNodeRef\": {<br />      \"id\": 1,<br />      \"qualifier\": \"Organization\"<br />    },<br />    \"name\": \"United States\",<br />    \"fullName\": \"United States\",<br />    \"description\": \"United States\",<br />    \"effectiveDate\": \"1900-01-01\",<br />    \"expirationDate\": \"3000-01-01\",<br />    \"firstRevision\": true,<br />    \"lastRevision\": true,<br />    \"transferable\": false,<br />    \"orgPath\": \"Organization/United States\",<br />    \"orgPathHierarchy\": [<br />      {<br />        \"id\": 1,<br />        \"qualifier\": \"Organization\"<br />      },<br />      {<br />        \"id\": 2,<br />        \"qualifier\": \"United States\"<br />      }<br />    ],<br />    \"contextRef\": {<br />      \"id\": -1,<br />      \"qualifier\": \"ORG\"<br />    },<br />    \"persistentId\": \"fa058093-d659-4f1c-a479-3412b86b4ea1\"<br />  },<br />  {<br />    \"nodeId\": 1,<br />    \"orgNodeTypeRef\": {<br />      \"id\": 4,<br />      \"qualifier\": \"Company\"<br />    },<br />    \"parentNodeRef\": {<br />      \"id\": -1,<br />      \"qualifier\": \"/\"<br />    },<br />    \"name\": \"Organization\",<br />    \"fullName\": \"Organization\",<br />    \"description\": \"Default\",<br />    \"effectiveDate\": \"1900-01-01\",<br />    \"expirationDate\": \"3000-01-01\",<br />    \"firstRevision\": true,<br />    \"lastRevision\": true,<br />    \"transferable\": false,<br />    \"orgPath\": \"Organization\",<br />    \"orgPathHierarchy\": [<br />      {<br />        \"id\": 1,<br />        \"qualifier\": \"Organization\"<br />      }<br />    ],<br />    \"contextRef\": {<br />      \"id\": -1,<br />      \"qualifier\": \"ORG\"<br />    },<br />    \"persistentId\": \"64658ea9-d6d1-49d6-b757-8a655c2dc433\"<br />  }<br />]</code></pre>",
        "tags": [
          "Locations"
        ],
        "summary": "Retrieve Locations",
        "operationId": "Retrieve Locations"
      }
    },
    "/v1/commons/labor_entry_lists/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of entry lists.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LaborCategoryEntryAccessList"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaborEntryListAccessRequestDataForRest"
              }
            }
          },
          "description": "The Retrieve Labor Entry Lists request payload, which includes an employee reference, orgNode, and effective date."
        },
        "description": "This operation returns a list of labor category entry lists by employee, orgNode, and effective date. The <code>employee</code> property ensures that the returned list of labor category entries are available as transfers for that employee.",
        "tags": [
          "Labor Entry Lists"
        ],
        "summary": "Retrieve Labor Entry Lists",
        "operationId": "Retrieve Labor Entry Lists"
      }
    },
    "/v1/commons/known_places/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested known places.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "207": {
            "description": "Partial success, returned Known Places with error(s).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Input."
          },
          "403": {
            "description": "You do not have permission to access this resource."
          },
          "413": {
            "description": "The service limit of this API operation has been exceeded."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Known_Place_Multi_Get_Request"
              }
            }
          },
          "description": "The Retrieve Known Places request payload.",
          "required": true
        },
        "description": "<p>This operation returns one or more known places by ID, name, or orgJob (which is a location on the Business Structure).</p><br /><p>The associated Access Control Point is KNOWN_PLACES when retrieving by IDs or names. The associated Access Control Points are EMPLOYEE_LOCATION_VIEW_DATA and MANAGER_LOCATION_VIEW_DATA when retrieving by orgJobs.</p>",
        "tags": [
          "GPS Known Places"
        ],
        "summary": "Retrieve Known Places",
        "operationId": "Retrieve Known Places"
      }
    },
    "/v1/commons/labor_categories/multi_create": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created a list of Labor Categories.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Model"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The labor categories to create.",
          "required": true
        },
        "description": "This operation creates a list of labor categories.",
        "tags": [
          "Labor Categories"
        ],
        "summary": "Create Labor Categories",
        "operationId": "Create Labor Categories"
      }
    },
    "/v1/commons/hyperfind_profiles/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Hyperfind Profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HyperFind_Profile"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "[WCO-112020] - Partially retrieved a list of the Hyperfind Profiles. Some of the specified object references do not exist."
          },
          "403": {
            "description": "The current user is not authorized to access Hyperfind Profiles."
          },
          "404": {
            "description": "[WCO-112021] - The specified Hyperfind Profile object references do not exist."
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/MultiReadRequest"
        },
        "tags": [
          "Hyperfind Profiles"
        ],
        "description": "This operation returns a list of Hyperfind Profiles by object references.",
        "summary": "Retrieve Hyperfind Profiles",
        "operationId": "Retrieve Hyperfind Profiles"
      }
    },
    "/v1/commons/time_increments/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResolvedTimeIncrement"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeIncrementResolverRequest"
              }
            }
          },
          "description": "The Resolve Time Increments request payload, which contains a symbolic representation of the time to resolve."
        },
        "tags": [
          "Time Increment Resolver"
        ],
        "description": "This operation resolves the start and end dates of a specified time increment. Time increment values can be DAY, WEEK, MONTH, and QUARTER.",
        "summary": "Resolve Time Increments",
        "operationId": "Resolve Time Increments"
      }
    },
    "/v1/commons/labor_category_list_assignments/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of labor category list assignments.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Entry_ListAssignment_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: <ul><li>The labor category list assignments to retrieve must exist</li></ul>"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_List_Assignment_Request_Data_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "Request data used to filter list assignments based on orgNode and date."
        },
        "description": "This operation returns a list labor category list assignments.",
        "tags": [
          "Labor Category List Assignments"
        ],
        "summary": "Retrieve Labor Category List Assignments",
        "operationId": "Retrieve Labor Category List Assignments"
      }
    },
    "/v1/commons/location_attributes": {
      "post": {
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationAttribute"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-129907] - Request body is missing. Specify request parameters.</li><li>[WCO-129901] - You must specify the following parameter: {paramName}.</li><li>[WCO-129911] - The attribute name exceeds the maximum allowed 75 length.</li><li>[WCO-129912] - The following parameter: {paramName} contains forbidden symbols: {forbiddenSymbols}.</li><li>[WCO-129917] - The following parameter must be null: {param}.</li><li>[WCO-129913] - Entity not found. Type: {object}. Name or ID: {qualifier/id}.</li><li>[WCO-129908] - Category path {categoryPathName} is not site type or type above site.</li><li>[WCO-129921] - The attribute name: {paramName} is not unique.</li><li>[WCO-129919] - The following parameter can not be empty: {paramName}.</li><li>[WCO-129914] - Org nodes are not unique.</li><li>[WCO-129916] - Cannot assign selected Locations. The Location: {location} is already assigned to another Location Attribute: {name}. A Location can be assigned to only one Location Attribute.</li></ul>"
          },
          "403": {
            "description": "[WCO-129903] - The user is not authorized to perform this action."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationAttribute"
              }
            }
          },
          "description": "The Create Location Attribute request payload.",
          "required": true
        },
        "description": "<p>This operation creates a location attribute.</p><br /><p>The associated Access Control Point is REST_API_SETUP.</p>",
        "tags": [
          "Location Attributes"
        ],
        "summary": "Create Location Attribute",
        "operationId": "Create Location Attribute"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationAttribute"
                }
              }
            }
          },
          "400": {
            "description": "[WCO-129904] - Entity not found. Type: Attribute. Name or ID: {id}."
          },
          "403": {
            "description": "[WCO-129903] - The user is not authorized to perform this action."
          }
        },
        "parameters": [
          {
            "description": "The location ID associated with a location attribute.",
            "required": false,
            "in": "query",
            "name": "location_id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The location qualifier associated with a location attribute.",
            "required": false,
            "name": "location_qualifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The effective date of a location attribute in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "required": false,
            "name": "effective_date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "<p>This operation returns a location attribute by ID, qualifier, and effective date.</p><br /><p>The associated Access Control Point is REST_API_SETUP.</p>",
        "tags": [
          "Location Attributes"
        ],
        "summary": "Retrieve Location Attribute by Criteria",
        "operationId": "Retrieve Location Attribute by Criteria"
      }
    },
    "/v1/commons/hyperfind_profiles/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a Hyperfind Profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HyperFind_Profile"
                }
              }
            }
          },
          "403": {
            "description": "The current user is not authorized to access Hyperfind Profiles."
          },
          "404": {
            "description": "[WCO-112018] - A Hyperfind Profile does not exist with specified ID."
          }
        },
        "parameters": [
          {
            "description": "The ID of the Hyperfind Profile to retrieve.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "description": "This operation returns a Hyperfind Profile by ID.",
        "tags": [
          "Hyperfind Profiles"
        ],
        "summary": "Retrieve Hyperfind Profile by ID",
        "operationId": "Retrieve Hyperfind Profile by ID"
      }
    },
    "/v1/commons/location_sets": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMapGroup"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "parameters": [
          {
            "description": "The effective date of the business structure whose location node is being referenced in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgMapGroup"
              }
            }
          },
          "description": "The location set to create.",
          "required": true
        },
        "description": "This operation creates an Organizational Map group (location set).",
        "tags": [
          "Location Sets"
        ],
        "summary": "Create Location Set",
        "operationId": "Create Location Set"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMapGroup"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "parameters": [
          {
            "description": "The name of a location set.",
            "required": false,
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "All possible objects that can be selected to be returned in the Org Map Location set request.",
            "required": false,
            "in": "query",
            "name": "system",
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "EMPTY"
              ]
            }
          },
          {
            "description": "Indicates if the context is ORG or FORECAST.",
            "required": true,
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string",
              "enum": [
                "ORG",
                "FORECAST"
              ]
            }
          },
          {
            "description": "The effective date of the business structure whose location node is being referenced in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A Boolean indicator of whether or not to return a model that provides the Business Structure as a tree instead of a flat list.",
            "required": false,
            "name": "only_node_refs_tree",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "description": "This operation returns an Organizational Map group (location set) by name and system.",
        "tags": [
          "Location Sets"
        ],
        "summary": "Retrieve Location Set by Name",
        "operationId": "Retrieve Location Set by Name"
      }
    },
    "/v1/commons/location_sets/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMapGroup"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "parameters": [
          {
            "description": "The ID of the location set to update.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "Indicate if the context is ORG or FORECAST.",
            "required": true,
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string",
              "enum": [
                "ORG",
                "FORECAST"
              ]
            }
          },
          {
            "description": "The searching date.",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A Boolean indicator of whether or not to return a model that provides the Business Structure as a tree instead of a flat list.",
            "required": false,
            "name": "only_node_refs_tree",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "description": "This operation returns an Organizational Map group (location set) by ID.",
        "tags": [
          "Location Sets"
        ],
        "summary": "Retrieve Location Set by ID",
        "operationId": "Retrieve Location Set by ID"
      }
    },
    "/v1/commons/tiles/{id}": {
      "put": {
        "responses": {
          "200": {
            "description": "Succesfully updated Admin Tile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "parameters": [
          {
            "description": "The ID of an Admin Tile.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tile"
              }
            }
          },
          "description": "The Update Admin Tile request payload."
        },
        "tags": [
          "Tiles"
        ],
        "description": "This operation updates an Admin Tile by ID.",
        "summary": "Update Admin Tile by ID",
        "operationId": "Update Admin Tile by ID"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Successfully deleted Admin Tile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server Error."
          }
        },
        "parameters": [
          {
            "description": "The ID of an Admin Tile.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Tiles"
        ],
        "description": "This operation deletes an Admin Tile by ID.",
        "summary": "Delete Admin Tile by ID",
        "operationId": "Delete Admin Tile by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a tile by ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "description": "The ID of a tile.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "A Boolean indicator of whether or not to include personalized tiles in the response.",
            "required": false,
            "in": "query",
            "name": "personalization",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": [
          "Tiles"
        ],
        "description": "This operation returns a tile by ID.",
        "summary": "Retrieve Tile by ID",
        "operationId": "Retrieve Tile by ID"
      }
    },
    "/v1/commons/currency/policies/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a currency policy by ID."
          },
          "403": {
            "description": "You are not authorized to perform this operation."
          },
          "404": {
            "description": "The requested resource cannot be found."
          }
        },
        "parameters": [
          {
            "description": "An ID that uniquely identifies a currency policy.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Currency Policies"
        ],
        "description": "This operation returns a currency policy by ID.",
        "summary": "Retrieve Currency Policy by ID",
        "operationId": "Retrieve Currency Policy by ID"
      }
    },
    "/v1/commons/dataviews/{id}/personalization": {
      "put": {
        "responses": {
          "200": {
            "description": "Successful update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "The ID of a personalized Dataview.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The name of the consumer of a Dataview, which determines whether the Dataview is consumed by the suite UI or as a platform by services other than Information Access. For example, SPRING or REPORT-SPRING. SPRING is used for Information Access.",
            "required": false,
            "in": "query",
            "name": "consumer",
            "schema": {
              "type": "string",
              "enum": [
                "consumer_name"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataView"
              }
            }
          },
          "description": "Personalized Dataview to update."
        },
        "tags": [
          "Dataviews"
        ],
        "description": "This operation updates a personalized Dataview by ID.",
        "summary": "Update Personalized Dataview by ID",
        "operationId": "Update Personalized Dataview by ID"
      },
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataView"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "The ID of an administrator Dataview.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The name of the consumer of a Dataview, which determines whether the Dataview is consumed by the suite UI or as a platform by services other than Information Access. For example, SPRING or REPORT-SPRING. SPRING is used for Information Access.",
            "required": false,
            "in": "query",
            "name": "consumer",
            "schema": {
              "type": "string",
              "enum": [
                "consumer_name"
              ]
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DataView"
        },
        "tags": [
          "Dataviews"
        ],
        "description": "This operation creates a new personalized Dataview.",
        "summary": "Create Personalized Dataview",
        "operationId": "Create Personalized Dataview"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Successful delete."
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "The ID of a personalized Dataview.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "The name of the consumer of a Dataview, which determines whether the Dataview is consumed by the suite UI or as a platform by services other than Information Access. For example, SPRING or REPORT-SPRING. SPRING is used for Information Access.",
            "required": false,
            "in": "query",
            "name": "consumer",
            "schema": {
              "type": "string",
              "enum": [
                "consumer_name"
              ]
            }
          }
        ],
        "tags": [
          "Dataviews"
        ],
        "description": "This operation deletes a personalized Dataview by ID.",
        "summary": "Delete Personalized Dataview by ID",
        "operationId": "Delete Personalized Dataview by ID"
      }
    },
    "/v1/commons/locations/{id}": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrgMapNodeRest"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "parameters": [
          {
            "description": "The ID of the location to update.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgMapNodeRest"
              }
            }
          },
          "description": "The Update Location by ID request payload.",
          "required": true
        },
        "description": "This operation updates an Organizational Map location.",
        "tags": [
          "Locations"
        ],
        "summary": "Update Location by ID",
        "operationId": "Update Location by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMapNodeRest"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "parameters": [
          {
            "description": "The searching node ID.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "Indicate if the context is ORG or FORECAST.",
            "required": true,
            "name": "context",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The searching date.",
            "required": true,
            "name": "date",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "This operation returns Organizational Map location (node) information by ID.",
        "tags": [
          "Locations"
        ],
        "summary": "Retrieve Location by ID",
        "operationId": "Retrieve Location by ID"
      }
    },
    "/v1/commons/home_pages/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieves list of home page profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HomePage"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "[WCO-106928] - Partially retrieved a list of Home page profiles. Some of the specified object references do not exist."
          },
          "400": {
            "description": "[WCO-133102] -Please provide only 1 of these parameters :- ids/qualifiers/refs."
          },
          "403": {
            "description": "[WCO-106800] - This operation is disallowed for current user."
          },
          "404": {
            "description": "[WCO-106929] - The specified Home page profiles object references do not exist."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiReadRequest"
              }
            }
          },
          "description": "The Retrieve Home Page Profiles request payload."
        },
        "tags": [
          "Home Pages"
        ],
        "description": "This operation returns a list of Home page profiles by object references.",
        "summary": "Retrieve Home Page Profiles",
        "operationId": "Retrieve Home Page Profiles"
      }
    },
    "/v1/commons/locale_policies/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CommonsLocalePolicy"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          },
          "404": {
            "description": "The Locale Policy cannot be found."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocalePolicyMultiReadRequest"
              }
            }
          },
          "description": "The Retrieve Locales request payload.",
          "required": true
        },
        "description": "This operation returns locales according to the provided request.",
        "tags": [
          "Locale Policies"
        ],
        "summary": "Retrieve Locales",
        "operationId": "Retrieve Locales"
      }
    },
    "/v1/commons/dataview_profiles/{id}": {
      "put": {
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataViewProfile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "The ID of a Dataview Profile.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DataViewProfile"
        },
        "tags": [
          "Dataview Profiles"
        ],
        "description": "This operation updates a Dataview Profile by ID.",
        "summary": "Update Dataview Profile by ID",
        "operationId": "Update Dataview Profile by ID"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Successfully deleted."
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "The ID of a Dataview Profile.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Dataview Profiles"
        ],
        "description": "This operation deletes a Dataview Profile by ID.",
        "summary": "Delete Dataview Profile by ID",
        "operationId": "Delete Dataview Profile by ID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Successful retrieval.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataViewProfile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "The ID of a Dataview Profile.",
            "required": true,
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "tags": [
          "Dataview Profiles"
        ],
        "description": "This operation returns a Dataview Profile by ID.",
        "summary": "Retrieve Dataview Profile by ID",
        "operationId": "Retrieve Dataview Profile by ID"
      }
    },
    "/v1/commons/labor_category_profiles/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of labor category profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Profile_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially retrieved list of labor category profiles."
          },
          "400": {
            "description": "Unable to retrieve labor category profiles."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaborCategoryProfileSearchCriteria"
              }
            }
          },
          "description": "The Retrieve Labor Category Profiles request payload.",
          "required": true
        },
        "description": "<p>This operation returns a list of labor category profiles for request payload.</p><br /><p>The associated Access Control Point is LABOR_ENTRIES_LIST.</p>",
        "tags": [
          "Labor Category Profiles"
        ],
        "summary": "Retrieve Labor Category Profiles",
        "operationId": "Retrieve Labor Category Profiles"
      }
    },
    "/v1/commons/entity_definitions/multi_read": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of entity definitions.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IA_Entity_Definition_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "[WCO-111037] - Some entity definitions object references do not exist."
          },
          "400": {
            "description": "[WCO-111053] - Only one from ids/qualifiers/refs is allowed in the request."
          },
          "404": {
            "description": "[WCO-111038] - The specified entity definition object references do not exist."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityReference"
              }
            }
          }
        },
        "tags": [
          "Entity Definitions"
        ],
        "description": "This operation returns a list of entity definitions by object references.",
        "summary": "Retrieve Entity Definitions",
        "operationId": "Retrieve Entity Definitions"
      }
    },
    "/v1/commons/locations/apply_create": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrgMapNodeRest"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgMapMultipleLocationCopyRequest"
              }
            }
          },
          "description": "The Copy Location request payload.",
          "required": true
        },
        "description": "This operation copies an Organizational Map location and its descendants.",
        "tags": [
          "Locations"
        ],
        "summary": "Copy Location",
        "operationId": "Copy Location"
      }
    },
    "/v1/commons/labor_category_lists/multi_upsert": {
      "post": {
        "responses": {
          "200": {
            "description": "Successfully created and updated a list of labor category lists.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Labor_Category_Entry_List_Model"
                  },
                  "type": "array"
                }
              }
            }
          },
          "207": {
            "description": "Partially succeeded in creating and updating a list of labor category lists."
          },
          "400": {
            "description": "Bad Request: Failed to create or update the labor category lists."
          }
        },
        "parameters": [
          {
            "description": "A Boolean indicator of whether or not to support resolving labor category list entries by wildcard.",
            "required": false,
            "name": "resolvedByWildcard",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/Labor_Category_Entry_List_Model"
                },
                "type": "array"
              }
            }
          },
          "description": "The labor category lists to create or update.",
          "required": true
        },
        "description": "This operation creates or updates a list of labor category lists.",
        "tags": [
          "Labor Category Lists"
        ],
        "summary": "Create or Update Labor Category Lists",
        "operationId": "Create or Update Labor Category Lists"
      }
    }
  },
  "tags": [
    {
      "name": "API",
      "description": "<p markdown=\"1\">From here you may browse our library of API resources, organized hierarchically by domain, or major functional area, logical subgroup, API resource, and all available operations against that resource. For more information about the concepts and technology behind our API, refer to the [Getting started](C:636f581c-50a8-41a7-af43-e5057f9c20bd) documentation.</p><p>Our platform provides a powerful application programming interface and documentation to help you develop secure, scalable, and high-performance applications that leverage the full breadth of capabilities offered by our backend services.</p><p markdown=\"1\">The Workforce Management suite's API is founded on a pragmatic implementation of the [representational state transfer](http://en.wikipedia.org/wiki/Representational_State_Transfer) architectural style and allows access to your organization's workforce management data using common HTTP methods and the [JSON](http://www.json.org) interchange format.</p>"
    },
    {
      "name": "Aggregated Data",
      "x-parent": "Information Access",
      "description": "This resource represents collectively retrievable data from multiple sources: Timekeeping, Scheduling, Commons, and Key Performance Indicators (KPIs). Operations on this resource use a powerful SQL-like syntax to query data. These queries include complex filtering and reduction functions as well as grouping, sorting, and pagination options."
    },
    {
      "name": "Business Structures",
      "x-parent": "Common Resources II",
      "description": "<p>Business structures, also known as organizational maps, enable you to define a hierarchical structure for your organization using types, locations, and jobs.</p><p>A business structure defines trees containing nodes that represent these three components. Types represent logical organizational levels in your enterprise. Locations represent a physical location or a logistical unit that is not a physical location. Jobs represent roles with fixed responsibilities.</p><p markdown=\"1\">Refer to the [Business Structure overview](C:54000deb-0715-49dd-ab03-78c4ce33c060) topic in [Domain overviews](C:f2ccfb74-38e7-466a-a7c7-acddc3d2d00c) for more information.</p>"
    },
    {
      "name": "Common Resources II",
      "x-parent": "API",
      "description": "Common Resources is the largest single domain and consists of two groupings. Common Resources are shared by all domains, allowing you to access and manipulate general employee data, user display profiles, business structures, the Control Center, the Transaction Assistant, and data aggregated across domains."
    },
    {
      "name": "Currency",
      "x-parent": "Common Resources II",
      "description": "<p>Currency contains resources to configure Currency Policies and retrieve conversion rates or conversion amounts between two different currencies.</p>"
    },
    {
      "name": "Currency Definitions",
      "x-parent": "Currency",
      "description": "This resource allows you to retrieve a currency definition by ID or retrieve all currency definitions."
    },
    {
      "name": "Currency Policies",
      "x-parent": "Currency",
      "description": "This resource allows you to create, retrieve, and update currency policies. Currency policies are a regional setting that can be assigned as the tenant default or to individual users. The users’ settings take precedence over the default setting for the tenant default settings."
    },
    {
      "name": "Data Dictionary",
      "x-parent": "Information Access",
      "description": "<p>This resource allows you to create, update, activate, and deactivate Data Elements within the Data Dictionary.</p><p>The Data Dictionary is a collection of Data Elements from all domains in the suite. A particular set of Data Elements, known as Gold Data Elements, are automatically loaded by the system and can be immediately used to create Dataviews.</p>"
    },
    {
      "name": "Dataview Profiles",
      "x-parent": "Information Access",
      "description": "This resource allows you to create, read, delete, and manipulate profiles that control which Dataviews users are allowed to view and the ways in which Dataviews are used."
    },
    {
      "name": "Dataviews",
      "x-parent": "Information Access",
      "description": "This resource allows you to create, read, delete, and manipulate custom data sources that are modeled after the common database concept of views. You can create a Dataview to pull together virtually any kind of data into a single view by selecting data elements from the Data Dictionary and applying a filter to one or more of those elements. Dataviews are often used to retrieve the same kinds of data multiple times, such as reusing a query, rather than for ad hoc data retrieval. A particular set of Dataviews, known as Gold Dataviews, are automatically loaded by the system. Dataview operations use the user profile, and a particular user gains access to a Dataview by means of a DataviewProfile, which has one or more associated Dataviews."
    },
    {
      "name": "Entity Definitions",
      "x-parent": "Information Access",
      "description": "This resource allows you to create, retrieve, update, and delete entity definitions. An entity definition contains information about a business entity, including: its relationship with other entities, such as one2one, one2many, and many2many, its view type, such as emp, organization, emp timeseries, or organization timeseries, and its join condition which encapsulates the join conditions for merging two distinct one-to-many entities."
    },
    {
      "name": "Exchange Rates",
      "x-parent": "Currency",
      "description": "This resource allows you to retrieve conversion rates and exchange amounts between different currency policies for a defined time period."
    },
    {
      "name": "GPS Known Places",
      "x-parent": "Known Places",
      "description": "This resource allows you to retrieve and manipulate Known Places, which are defined as a GPS position with a radius and accuracy and/or a collection of WiFi Networks. Known Places can be associated with a location. Known Places can be used for a variety of location-based features, such as geofencing."
    },
    {
      "name": "Home Pages",
      "x-parent": "Information Access",
      "description": "The Home Pages resource allows you to create, retrieve, update, and delete home pages, which are the first page users see when they log in to the application's user interface. This resource also provides mechanisms for personalizing home pages and restoring home pages to default settings."
    },
    {
      "name": "Hyperfind",
      "x-parent": "Common Resources II",
      "description": "The Hyperfind domain provides search-like functionality that allows you to filter and select groups of employees through queries that specify conditions or locations."
    },
    {
      "name": "Hyperfind Profiles",
      "x-parent": "Hyperfind",
      "description": "This resource allows you to retrieve information about Hyperfind Profiles. Hyperfind Profiles contain a specified group of public Hyperfind queries. Managers to whom a profile is assigned can access those queries."
    },
    {
      "name": "Hyperfind Queries",
      "x-parent": "Hyperfind",
      "description": "<p>This resource allows you to retrieve and execute Hyperfind queries.</p><p>Hyperfind is a search function that you can use for standard and custom queries to find employees who match specified search criteria.</p><p>The system uses employee IDs to display data, generate a report, or generate schedules for the group of employees selected. Dataviews use Hyperfind queries to display summaries of employee activity or details within a specified time period.</p><p>Hyperfind returns only the employee IDs allowed by a user's Function Access Profile; that is, a query only returns those people in the user's employee group and/or organizational sets to whom the user has access.</p>"
    },
    {
      "name": "Information Access",
      "x-parent": "Common Resources II",
      "description": "<p>The Information Access domain provides programmatic access to data from various sources in a manner similar to the way a database is accessed. The resources within this domain allow ad hoc queries, dynamic definition and execution of Data Views, and access to the Data Dictionary.</p><p markdown=\"1\">Refer to the [Information Access overview](C:38186b1e-324f-426e-919e-3ee82e47e877) topic in [Domain overviews](C:f2ccfb74-38e7-466a-a7c7-acddc3d2d00c) for more information.</p>"
    },
    {
      "name": "Jobs",
      "x-parent": "Business Structures",
      "description": "<p>This resource provides a set of operations that allow you to create, read, update, and delete jobs.</p><p>Jobs are roles that have a fixed responsibility (Registered Nurse, Associate, Welder). Jobs are attached to locations on the business structure that represent locations where employees actually perform those jobs.</p>"
    },
    {
      "name": "Known Places",
      "x-parent": "Common Resources II",
      "description": "Known Places are used for GEO Sensing. GEO Sensing allows managers who are responsible for multiple departments or geographic areas to set the context for their workforce data to any specific location. A Known Place is defined as a GPS position with a radius. In setup, administrators can define one or many Known Places. When employees log in, the system uses the employees' GPS positions to determine if they are in a Known Place."
    },
    {
      "name": "Labor Categories",
      "x-parent": "Labor Category Setup",
      "description": "<p>This resource allows you to create, retrieve, update, and delete labor categories.</p><p>Labor categories can be used to collect additional data that is not part of the hierarchical structure of the organization (the business structure). Typically, this is what the employee can work on. For example, a labor category could be a project, contract, or shift.</p><p>Labor categories are optional. A maximum of 6 labor categories can be configured on a system. No relationship exists, hierarchical or otherwise, between labor categories. Labor categories are treated as independent data fields. You can assign labor categories to locations on the business structure.</p>"
    },
    {
      "name": "Labor Category Entries",
      "x-parent": "Labor Category Setup",
      "description": "<p>This resource allows you to create, retrieve, update, or delete labor category entries. Labor category entries are assigned to a labor category.</p>"
    },
    {
      "name": "Labor Category List Assignments",
      "x-parent": "Labor Category Setup",
      "description": "This resource allows you to create, retrieve, update, and delete labor category list assignments. Labor category list assignments are the association between an organization node (in the business structure), a labor category, and a labor category list assignment."
    },
    {
      "name": "Labor Category Lists",
      "x-parent": "Labor Category Setup",
      "description": "This resource allows you to create, retrieve, update, and delete labor category lists. Labor category lists contain labor category entries."
    },
    {
      "name": "Labor Category Profiles",
      "x-parent": "Labor Category Setup",
      "description": "The Labor Category Profiles resource allows you to add, delete, or change labor category profile objects within the system."
    },
    {
      "name": "Labor Category Setup",
      "x-parent": "Common Resources II",
      "description": "<p>Labor categories capture data that is not part of the hierarchical structure, like Crew, Event, or Shift; typically representing what is worked on. Labor categories may be contrasted to business structures, which represent where employees perform work.</p>"
    },
    {
      "name": "Labor Entry Lists",
      "x-parent": "Labor Category Setup",
      "description": "This resource allows you to retrieve labor entry lists, which define the labor category entries to which an employee can transfer."
    },
    {
      "name": "Licensing",
      "x-parent": "Common Resources II",
      "description": "The Licensing domain allows you to provide license- and package-related information."
    },
    {
      "name": "Locale Policies",
      "x-parent": "Locale Settings",
      "description": "<p>This resource allows you to create, retrieve, update, and delete locale policies. Local policies contain regional settings (language locale, date format, number format, and currency format) that can be assigned as the tenant default or to individual users. The users' settings take precedence over the default setting for the tenant. Users see the user interface in the language and regional settings assigned to them in their locale policy. The locale policy is assigned to users in People Information.</p>"
    },
    {
      "name": "Locale Settings",
      "x-parent": "Common Resources II",
      "description": "<p>The Locale Settings domain contains regional settings (language locale, date format, number format, and currency format) that can be assigned as the tenant default or to individual users. The users' settings take precedence over the default setting for the tenant. Users see the user interface in the language and regional settings assigned to them in their locale policy. The locale policy is assigned to users in People Information.</p>"
    },
    {
      "name": "Location Attribute Assignments",
      "x-parent": "Business Structures",
      "description": "<p>This resource allows you to retrieve and manipulate location attribute assignments.</p><p>Location attribute assignments display the direct assignments for a set of assigned locations and an effective date. Starting from the effective date, such locations will have a directly assigned location attribute and will not inherit it from parent locations.</p>"
    },
    {
      "name": "Location Attribute Start Day Of Week",
      "x-parent": "Business Structures",
      "description": "<p>This resource allows you to retrieve location attribute values, such as the start day of the week for a specified location and effective date.</p><p>The start day of the week can be directly assigned to a specified location or can be inherited from the parent location. The start day of the week allows you retrieve forecasts, manipulate the business structure, and correctly use other forecasting functionality.</p>"
    },
    {
      "name": "Location Attributes",
      "x-parent": "Business Structures",
      "description": "<p>This resource allows you to retrieve and manipulate business structure location attributes.</p><p>Location attributes can be used to collect additional data about an organization on the business structure. For example, a location attribute can define a starting day of the week for a location. By default, location attributes are inherited from parent locations and can be overridden by assigning another location attribute. You can assign location attributes to locations on the business structure.</p>"
    },
    {
      "name": "Location Sets",
      "x-parent": "Business Structures",
      "description": "<p>This resource provides a set of operations that allow you to retrieve and manipulate location sets.</p><p>Locations, which each represent a physical location (Operating Room or Mail Room) or a logistical unit that is not a physical location (Support, Administration, a Home Care Unit), can be grouped into sets.</p>"
    },
    {
      "name": "Location Types",
      "x-parent": "Business Structures",
      "description": "<p>This resource provides a set of operations that allow you to create, read, update, and delete location types.</p><p>Location types are logical organizational levels in your enterprise, such as region, division, store, area, and department.</p>"
    },
    {
      "name": "Locations",
      "x-parent": "Business Structures",
      "description": "Locations can be a physical location (Operating Room or Mail Room) or a logistical unit that is not a physical location (Support, Administration, a Home Care Unit). You can use the operations associated with this resource to create, update, delete, and view locations."
    },
    {
      "name": "Tiles",
      "x-parent": "Information Access",
      "description": "<p>The Tiles resource allows you to retrieve all administrator- and user-created tiles and cards.</p><p>Tiles provide access to important content about your employees and organization. They can appear on your home page as a visual representation of a common task that you frequently perform, such as a current schedule or a timesheet. They can also appear as a visualization of a metric, or other summarization, in the form of a pie chart or graph. You can show or hide tiles depending on what aspect of your business you want to view.</p>"
    },
    {
      "name": "Time Increment Resolver",
      "x-parent": "Information Access",
      "description": "This resource allows you to resolve start and end dates of a specified time increment. Time increment values can be DAY, WEEK, MONTH and QUARTER."
    },
    {
      "name": "User Preferences",
      "x-parent": "Locale Settings",
      "description": "This resource allows you to access locale policy user preferences."
    }
  ],
  "servers": [
    {
      "url": "/api"
    }
  ],
  "components": {
    "requestBodies": {
      "IA_Entity_Definition_Model": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/IA_Entity_Definition_Model"
            }
          }
        }
      },
      "Known_Place_Request": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Known_Place_Request"
            }
          }
        }
      },
      "DataView": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DataView"
            }
          }
        },
        "description": "Dataview to create."
      },
      "DataViewProfile": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DataViewProfile"
            }
          }
        }
      },
      "MultiReadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MultiReadRequest"
            }
          }
        }
      },
      "IA_Entity_Definition_ModelArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/IA_Entity_Definition_Model"
              },
              "type": "array"
            }
          }
        }
      },
      "OrgMapMultipleLocationMultiReadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgMapMultipleLocationMultiReadRequest"
            }
          }
        },
        "description": "The Retrieve Locations request payload.",
        "required": true
      }
    },
    "schemas": {
      "DataResponse": {
        "type": "object",
        "description": "Aggregated Data Response",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NodeEntity"
          },
          "metadata": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object",
            "description": "<p>Response metadata, consisting of the following:</p><ul><li><code>\"totalNodes\"</code>: The maximum number of nodes that can be returned.</li><li><code>\"numNodes\"</code>: The number of nodes returned after paging.</li><li><code>\"totalElements\"</code>: The number of nodes returned.</li><li><code>\"lastRefreshed\"</code>: The time stamp of the most recent data refresh.</li><li><code>\"cacheKey\"</code>: The unique identifier associated with the original request which allows for caching and paging.</li><li><code>\"notCached\"</code>: A Boolean indicator of whether or not the response was retrieved from the cache.</li><li><code>\"metadataKey\"</code>: The metadata key used to retrieve the Map of Provider Metadata used for a provider's calls.</li><li><code>\"currentAsOfDateStatus\"</code>: The last updated status of the most recent payroll or volume batch run. Possible status values include Consistent and Inconsistent. This property is applicable to Work Unit Views only.</li><li><code>\"currentAsOfDate\"</code>: The time stamp of the most recent payroll or volume batch run in ISO_LOCAL_DATE format (YYYY-MM-DD). This property is applicable to Work Unit Views only.</li></ul>"
          }
        }
      },
      "ExtraDetailsForRest": {
        "required": [
          "summary"
        ],
        "type": "object",
        "description": "Context for additional response details.",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/SummaryForRest"
          }
        }
      },
      "LocalePolicyMultiReadRequest": {
        "required": [
          "orderBy",
          "sortOrder",
          "where"
        ],
        "type": "object",
        "description": "Model for Scheduling multi-read requests.",
        "properties": {
          "orderBy": {
            "enum": [
              "NAME",
              "DISPLAY_NAME"
            ],
            "type": "string",
            "description": "Values by which locale policy request results can be ordered."
          },
          "where": {
            "$ref": "#/components/schemas/LocalePolicyMultiReadWhere"
          },
          "sortOrder": {
            "enum": [
              "ASCENDING",
              "DESCENDING"
            ],
            "type": "string",
            "description": "A number indicating each locale policy's precedence in a sort."
          }
        }
      },
      "LocationAttributeSearchCriteria": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for the retrieve or delete Location Attributes request.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/LocationAttributeWhereCriteria"
          }
        }
      },
      "laborCategoryEntryListSortCriteria": {
        "type": "object",
        "description": "The parameters that define sorting behavior.",
        "properties": {
          "sortDirection": {
            "enum": [
              "ascending",
              "descending"
            ],
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        }
      },
      "LaborCategoryWhere": {
        "type": "object",
        "description": "Model for labor category 'where' criteria.",
        "properties": {
          "laborCategoryProfiles": {
            "$ref": "#/components/schemas/TimekeepingObjectRefList"
          }
        }
      },
      "DisplayPolicy": {
        "type": "object",
        "description": "The display policy of a data element. Example: 'displayPolicy': { 'sort': 'DEFAULT', 'round': 6, 'scale': 0, 'format': 'DEFAULT' }",
        "properties": {
          "sort": {
            "enum": [
              "DEFAULT",
              "STRING_SORT",
              "NUMBER_SORT",
              "UNSUPPORTED"
            ],
            "type": "string",
            "description": "The sorting policy of a data element. Possible values includes: DEFAULT, STRING_SORT, NUMBER_SORT"
          },
          "scale": {
            "type": "integer",
            "description": "The scale to apply to a data element. Only applicable for the NUMBER data type.",
            "format": "int32"
          },
          "round": {
            "enum": [
              "6",
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "7"
            ],
            "type": "string",
            "description": "The rounding policy of a data element. Supported rounding policies are - ROUND_HALF_EVEN (6), ROUND_UP (0), ROUND_DOWN (1), ROUND_CEILING (2), ROUND_FLOOR (3), ROUND_HALF_UP (5) and ROUND_UNNECESSARY (7). If none specified ROUND_HALF_EVEN is applied by default."
          },
          "format": {
            "enum": [
              "DEFAULT",
              "CURRENCY",
              "PERCENTAGE",
              "TIMEDURATION",
              "LONGDATE",
              "SHORTDATE",
              "DAYMONTH",
              "BALANCE_AMOUNT",
              "TIMEINCREMENT",
              "UNSUPPORTED"
            ],
            "type": "string",
            "description": "The Formatting Policy to apply to a data element. Supported formatting policies are - DEFAULT, CURRENCY, PERCENTAGE, TIMEDURATION, DAYDURATION, LONGDATE, BALANCE_AMOUNT. For NUMBER and LONG data type the supported policies are - DEFAULT, CURRENCY, PERCENTAGE, TIMEDURATION, DAYDURATION. For DATE the supported policies are DEFAULT, LONGDATE, SHORTDATE and DAYMONTH."
          }
        }
      },
      "LaborCategoryProfileSearchCriteria": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/LaborCategoryProfileWhereCriteria"
          }
        }
      },
      "CommonsOrgNodeType": {
        "required": [
          "effectiveDate",
          "expirationDate",
          "hierarchyOrder",
          "lastRevision",
          "mapContextType",
          "name"
        ],
        "type": "object",
        "description": "The organization node type model.",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "description": {
            "type": "string",
            "description": "The description of a node type. If a <code>null</code> value is passed on update, an empty string is set."
          },
          "effectiveDate": {
            "type": "string",
            "description": "The effective date of a node type in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "goldData": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a node type.",
            "format": "int64"
          },
          "firstRevision": {
            "type": "boolean"
          },
          "externalId": {
            "type": "string",
            "description": "The external ID of a node type. If no value is passed during an update, the previous value remains in effect and is taken from the revision with the most recent effective date."
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date of a node type in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "updatedDateTime": {
            "type": "string",
            "description": "The date and time of the most recent update to a node type in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss)."
          },
          "hierarchyOrder": {
            "type": "integer",
            "description": "The hierarchical order of a node type.",
            "format": "int32"
          },
          "lastRevision": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not this is a node type's last revision."
          },
          "persistentId": {
            "type": "string",
            "description": "The persistent ID of a node type."
          },
          "mapContextType": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "name": {
            "type": "string",
            "description": "The name of a node type."
          }
        }
      },
      "OrgMapMultipleJobApplyReadForLocation": {
        "required": [
          "date",
          "locationRef"
        ],
        "type": "object",
        "description": "Model containing information for the search of generic jobs by location",
        "properties": {
          "date": {
            "type": "string",
            "description": "The as of date to do the search",
            "format": "date"
          },
          "locationRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          }
        }
      },
      "OrgMapMultipleLocationMoveWhere": {
        "required": [
          "sourceRef"
        ],
        "type": "object",
        "description": "Model holding conditions related to source location and date to be used in an Org Map move request.",
        "properties": {
          "sourceRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          }
        }
      },
      "OrgMapNodeWithPath": {
        "required": [
          "effectiveDate",
          "expirationDate",
          "name",
          "nodeId",
          "orgPath",
          "parentNodeRef"
        ],
        "type": "object",
        "description": "Model for an org map node, which is a location on the Business Structure.",
        "properties": {
          "orgPathHierarchy": {
            "items": {
              "$ref": "#/components/schemas/OrgObjectRef"
            },
            "type": "array",
            "description": "An array containing the hierarchy of an org map node, which is a location on the Business Structure."
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date of the current node revision.",
            "format": "date"
          },
          "effectiveDate": {
            "type": "string",
            "description": "The effective date of the current node revision.",
            "format": "date"
          },
          "indirectWorkPercent": {
            "type": "integer",
            "description": "The indirect work allocation associated with a node.",
            "format": "int32"
          },
          "nodeId": {
            "type": "integer",
            "description": "The effective-dated node ID.",
            "format": "int64"
          },
          "costCenterRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "color": {
            "type": "string",
            "description": "The color of an org map node. Only job nodes can have a color."
          },
          "externalId": {
            "type": "string",
            "description": "The external ID of an org map node. If no value is passed during an update, the previous value remains in effect and is taken from the revision with the most recent effective date."
          },
          "lastRevision": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not this is a node's last revision. If no value is passed during an update, this value will update to true."
          },
          "orgNodeTypeRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "description": {
            "type": "string",
            "description": "The description of an org node."
          },
          "firstRevision": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not this is a node's first revision."
          },
          "directWorkPercent": {
            "type": "integer",
            "description": "The direct work allocation associated with a node.",
            "format": "int32"
          },
          "address": {
            "type": "string",
            "description": "The address associated with a node."
          },
          "fullName": {
            "type": "string",
            "description": "The full name of an effective-dated node."
          },
          "persistentId": {
            "type": "string",
            "description": "The PersistentId of an org map node."
          },
          "contextRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "orgPath": {
            "type": "string",
            "description": "The path of the org map node, which is a location on the Business Structure."
          },
          "name": {
            "type": "string",
            "description": "The short name of an effective-dated node.If null passed on update then previous value from the revision with the closest effective date will be set."
          },
          "currencyRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "transferable": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a location is transferable."
          },
          "parentNodeRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "timezoneRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "genericJobRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          }
        }
      },
      "Metadata": {
        "type": "object",
        "description": "Metadata that describes a data element. Metadata would include dataType, views (Data Sources), sortPolicies, roundingPolicies, formattingPolicies, categories, licenses, dataProviders and entityDefinitions",
        "properties": {
          "views": {
            "items": {
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "The view in which data is rendered. Supported views are EMPLOYEE, ORGANIZATION, EMPLOYEE TIMESERIES, or ORGANIZATION TIMESERIES, enumerated as 0-EMP , 1-ORG , 2-EMP_TIME_SERIES and 3-ORGANIZATION_TIME_SERIES."
          },
          "roundingPolicies": {
            "items": {
              "enum": [
                "6",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "7"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "The supported rounding policies. Only applicable for NUMBER data type. Supported rounding policies are - ROUND_HALF_EVEN (6), ROUND_UP (0), ROUND_DOWN (1), ROUND_CEILING (2), ROUND_FLOOR (3), ROUND_HALF_UP (5) and ROUND_UNNECESSARY (7). If none specified ROUND_HALF_EVEN is applied by default."
          },
          "orgEntityDefinitions": {
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/IEntityDefinition"
            },
            "type": "array",
            "description": "The Organization Entity definition for a data element."
          },
          "empTSEntityDefinitions": {
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/IEntityDefinition"
            },
            "type": "array",
            "description": "A list of references to employee TS entity definitions."
          },
          "workunitTSEntityDefinitions": {
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/IEntityDefinition"
            },
            "type": "array",
            "description": "A list of work unit TS entity definitions."
          },
          "workunitEntityDefinitions": {
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/IEntityDefinition"
            },
            "type": "array",
            "description": "A list of work unit entity definitions."
          },
          "entityDefinitions": {
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/IEntityDefinition"
            },
            "type": "array",
            "description": "The entity definition for a data element."
          },
          "sortPolicies": {
            "items": {
              "enum": [
                "DEFAULT",
                "STRING_SORT",
                "NUMBER_SORT",
                "UNSUPPORTED"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "A sorting policies that can be applied for a data element. The supported policies are DEFAULT, STRING_SORT and NUMBER_SORT. User shall select NUMER_SORT for NUMBER and LONG data type. STRING_SORT for BOOLEAN, STRING data type and leave it to default if not sure."
          },
          "licenses": {
            "items": {
              "enum": [
                "DEFAULT",
                "UNSUPPORTED"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "The license types for a data element. Currently, only DEFAULT is supported. Other licenses will be supported in future releases."
          },
          "formattingPolicies": {
            "items": {
              "enum": [
                "DEFAULT",
                "CURRENCY",
                "PERCENTAGE",
                "TIMEDURATION",
                "LONGDATE",
                "SHORTDATE",
                "DAYMONTH",
                "BALANCE_AMOUNT",
                "TIMEINCREMENT",
                "UNSUPPORTED"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "A set of policies for applying formats to a set of data. Supported formatting policies are - DEFAULT, CURRENCY, PERCENTAGE, TIMEDURATION, DAYDURATION, LONGDATE, BALANCE_AMOUNT. For NUMBER and LONG data type the supported policies are - DEFAULT, CURRENCY, PERCENTAGE, TIMEDURATION, DAYDURATION. For DATE the supported policies are DEFAULT, LONGDATE, SHORTDATE and DAYMONTH."
          },
          "dataTypes": {
            "items": {
              "enum": [
                "STRING",
                "DATE",
                "DATETIME",
                "TIME",
                "BOOLEAN",
                "NUMBER",
                "ENUM",
                "UNSUPPORTED"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "A list of supported data types. They are STRING, DATE, DATETIME, TIME, LONG, BOOLEAN, NUMBER ad ENUM."
          },
          "dataProviders": {
            "items": {
              "enum": [
                "TK",
                "SCH",
                "ATTENDANCE",
                "PEOPLE",
                "KPI",
                "LEAVE",
                "LOCATION",
                "MOCK_ORG",
                "GROUP_EDIT_RESULT",
                "AUDIT",
                "MOCK_DATA",
                "CORE_ENTITY",
                "DATAVIEW",
                "SCH_ZSA",
                "SCH_WORKLOAD_COVERAGE_DETAILS",
                "POST_UNPOST_SCH",
                "SCH_VOLUME",
                "SCH_SWAP_SHIFT",
                "SCH_AVAILABILITY_REQUEST",
                "SCH_AUDIT",
                "FOR_AUDIT",
                "THIRD_PARTY",
                "MOBILE_APP",
                "INTERNAL_API",
                "SCH_INCOMING_TORS_COUNT",
                "HCA",
                "ENTITIES_STATIC_PROPERTY_PROVIDER",
                "UNSUPPORTED"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "The domain from which a set of data originates. The following are supported domain values - TK, SCH, ATTENDANCE, PEOPLE, KPI, LEAVE, LOCATION, MOCK_ORG, GROUP_EDIT_RESULT, AUDIT, MOCK_DATA and CORE_ENTITY."
          },
          "orgTSEntityDefinitions": {
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/IEntityDefinition"
            },
            "type": "array",
            "description": "A list of references to organization TS entity definitions."
          },
          "providerDataUnits": {
            "items": {
              "enum": [
                "HOURS",
                "MINUTES",
                "SECONDS",
                "MILLISECONDS",
                "UNSUPPORTED"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "The Provider Data Unit for a data element - HOURS or MILLISECONDS."
          },
          "categories": {
            "items": {
              "enum": [
                "EMPLOYEE_SUMMARY",
                "KPI",
                "GROUP_EDIT_RESULT",
                "LOCATION",
                "MOCK_DATA",
                "AUDIT",
                "COST_CENTER",
                "EMPLOYEE",
                "TIMEKEEPING",
                "ATTENDANCE_ACTIONS",
                "ATTENDANCE",
                "ATTENDANCE_BALANCE_RESET",
                "ATTENDANCE_BALANCE_UPDATE",
                "ATTENDANCE_DAILY_SUMMARY",
                "ATTENDANCE_DAILY",
                "ATTENDANCE_DISCIPLINE_LEVEL",
                "ATTENDANCE_EVENTS",
                "ATTENDANCE_EXPIRING_POINTS",
                "PERFECT_ATTENDANCE_AWARDS",
                "PERFECT_ATTENDANCE_DEDUCTIONS",
                "PERFECT_ATTENDANCE_DISQUALIFICATION",
                "ATTENDANCE_PERIOD_SUMMARY",
                "ATTENDANCE_PROFILE",
                "LICENSES",
                "GROUP_EDIT",
                "DATA_STATUS",
                "ABSENTEEISM",
                "ACTUAL_VS_SCHEDULE",
                "EXCEPTIONS",
                "NON_PRODUCTIVE",
                "OVERTIME",
                "PRODUCTIVE",
                "REGULAR",
                "ROUNDING_RULES",
                "TRAINING",
                "ACTUAL_TOTALS",
                "APPROVALS",
                "PROJECTED_TOTALS",
                "SCHEDULED_TOTALS",
                "LEAVE",
                "BUSINESS_STRUCTURE",
                "SCHEDULING",
                "SCHEDULE_GROUP",
                "TIMECARD",
                "ACCRUALS",
                "AUDIT_PUNCH",
                "AUDIT_PUNCH_COMMENT",
                "EMPLOYEE_HCM",
                "CALENDAR",
                "STATUTORY_REPORTING",
                "TARGET",
                "MOBILE_APP",
                "FORECASTING",
                "PAID",
                "WORK_AUDIT_ACTIVITY_SEGMENT",
                "WORK_AUDIT_RESULT",
                "WORK_TOTALS",
                "WORK_RAW_INPUT",
                "WORK_RAW_RESULTS",
                "WORK_ACTIVITY_SEGMENT",
                "WORK_RESULT",
                "WORK_ACTIVITY_DEFINITION",
                "WORK_EFFICIENCY",
                "REQUESTS",
                "KIOSK",
                "HEALTHCARE_ANALYTICS",
                "ASSIGNMENT",
                "AUDITOR",
                "UNSUPPORTED",
                "WAGE_WORKRULE_OVERRIDE",
                "ACTIVITY_TEAM",
                "ACTIVITY_TEAM_SEGMENT",
                "ACTIVITY_TEAM_RESULT"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "The category of a data element - EMPLOYEE_SUMMARY, TIMEKEEPING, SCHEDULING, ATTENDANCE, KPI, LEAVE, GROUP_EDIT_RESULT, AUDIT, LOCATION and MOCK_DATA."
          }
        }
      },
      "BaseErrorDetailsForRest": {
        "required": [
          "input"
        ],
        "type": "object",
        "description": "Model context for base error details.",
        "properties": {
          "input": {
            "type": "object",
            "description": "The input associated with base error details."
          }
        }
      },
      "laborCategoryProfileWhereCondition": {
        "type": "object",
        "description": "The where clause of a set of sorting, filtering, and selecting parameters in which the actual criteria for retrieving the parameters is specified.",
        "properties": {
          "allDetails": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to load all details about a profile. Default value is true."
          },
          "populateEntryLists": {
            "type": "boolean",
            "description": "The Boolean indicator of whether to populate lists by entries. Default value is false."
          },
          "snapshotDate": {
            "type": "string",
            "description": "The Date that define which version will be retrieved."
          },
          "populateSystemLists": {
            "type": "boolean",
            "description": "The Boolean indicator of whether to populate system lists. Default value is false."
          },
          "filterCriteria": {
            "$ref": "#/components/schemas/paginationSortFilterCriteria"
          }
        }
      },
      "MultiReadLocationsByPersistentIdWhere": {
        "required": [
          "context",
          "persistentIds"
        ],
        "type": "object",
        "description": "Model specifying the conditions related to persistent IDs for node IDs search.",
        "properties": {
          "context": {
            "type": "string",
            "description": "The search context, which can be either org or forecast."
          },
          "persistentIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The persistent IDs of node IDs used by location retrieval operations."
          }
        }
      },
      "OrgMapMultipleLocationSetReadWhere": {
        "required": [
          "allDetails",
          "context",
          "date",
          "locationSets",
          "types"
        ],
        "type": "object",
        "description": "v1.0.multireadwhere.apimodel.description",
        "properties": {
          "allDetails": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not the response returns all details of each org map group. When false, the response returns only the ID, name, and persistent ID of each org map group. Org map groups are also known as business structure location sets."
          },
          "expandJobs": {
            "type": "boolean",
            "description": "Display org jobs that are descendants of each node. If the node is already a job, the node and job values will be the same."
          },
          "locationSets": {
            "$ref": "#/components/schemas/LocationSets"
          },
          "context": {
            "enum": [
              "ORG",
              "FORECAST"
            ],
            "type": "string",
            "description": "This parameter indicates whether the search context is org or forecast."
          },
          "date": {
            "type": "string",
            "description": "The date of a search.",
            "format": "date"
          },
          "query": {
            "type": "string",
            "description": "The name query of the org map groups to retrieve."
          },
          "types": {
            "$ref": "#/components/schemas/OrgObjectRefList"
          }
        }
      },
      "SDMLocationDate": {
        "type": "object",
        "properties": {
          "locations": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_Object_Reference_Setup_Model"
            },
            "type": "array"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date"
          },
          "expirationDate": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Where": {
        "type": "object",
        "description": "Model describing the volume label where clause.",
        "properties": {
          "refs": {
            "items": {
              "$ref": "#/components/schemas/VolumeLabel"
            },
            "type": "array",
            "description": "The ID or qualifier that identifies an employee."
          },
          "ids": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "A list of employee IDs. These are not person numbers."
          },
          "qualifiers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A list of employee qualifiers."
          }
        }
      },
      "OrgMapGroupNodeJobs": {
        "type": "object",
        "properties": {
          "node": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "jobs": {
            "items": {
              "$ref": "#/components/schemas/OrgObjectRef"
            },
            "type": "array",
            "description": "A list of references to jobs."
          }
        }
      },
      "OrgMapMultipleLocationFindWhereDescendantsOfDuring": {
        "required": [
          "context",
          "endDate",
          "locationRef",
          "startDate"
        ],
        "type": "object",
        "description": "The Retrieve Locations 'descendants of during' model.",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The start date of the search in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "stopTraversal": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to stop tree traversal on non-included types."
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the search in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "includeLocationTypes": {
            "$ref": "#/components/schemas/OrgObjectRefList"
          },
          "locationRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "context": {
            "enum": [
              "ORG",
              "FORECAST"
            ],
            "type": "string",
            "description": "The context of the search. Valid values include ORG or FORECAST."
          }
        }
      },
      "OrgMapMultipleLocationMultiDeleteRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for an Org Map multiple delete Locations request.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationDeleteWhere"
          }
        }
      },
      "StartDayWeekWhereCriteria": {
        "required": [
          "location"
        ],
        "type": "object",
        "description": "The Start Day of Week where object model.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "asOfDate": {
            "type": "string",
            "description": "The effective date of a location in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          }
        }
      },
      "ExternalJobMapping": {
        "required": [
          "externalId",
          "genericJob"
        ],
        "type": "object",
        "description": "Mapping for effective jobs.",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "The external ID of an effective job."
          },
          "genericJob": {
            "$ref": "#/components/schemas/OrgObjectRef"
          }
        }
      },
      "OrgMapMultipleLocationCopyRequest": {
        "required": [
          "copy"
        ],
        "type": "object",
        "description": "Model for an Org Map Copy Locations request.",
        "properties": {
          "copy": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationCopy"
          }
        }
      },
      "Selector": {
        "type": "object",
        "properties": {
          "refs": {
            "items": {
              "$ref": "#/components/schemas/IA_Object_Reference"
            },
            "type": "array",
            "description": "The ID or qualifier that identifies an employee or work unit."
          },
          "ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The list of employee IDs or work unit IDs requested."
          },
          "qualifiers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The list of employee qualifiers or work unit qualifiers requested."
          }
        }
      },
      "CommonDateRange": {
        "type": "object",
        "description": "Model for date range.",
        "properties": {
          "symbolicPeriod": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "endDate": {
            "type": "string",
            "description": "The end date associated with date range.",
            "format": "date"
          },
          "startDate": {
            "type": "string",
            "description": "The start date associated with date range.",
            "format": "date"
          }
        }
      },
      "LocationAttributeAssignmentWhereCriteria": {
        "required": [
          "location"
        ],
        "type": "object",
        "description": "The Location Attribute Assignment where object model.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "asOfDate": {
            "type": "string",
            "description": "The effective date of a location in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          }
        }
      },
      "ObjectRefList": {
        "type": "object",
        "description": "Model describing a collection of object references.",
        "properties": {
          "refs": {
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            },
            "type": "array",
            "description": "The object references."
          },
          "ids": {
            "uniqueItems": true,
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "The list of references by ID."
          },
          "qualifiers": {
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The qualifier of the object reference, such as name."
          }
        }
      },
      "laborCategoryEntryListPaginationSortFilterRestParameters": {
        "type": "object",
        "description": "The sorting, filtering, and selected page pagination model.",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The pagination count, which represents the number of entities to return per page. This parameter has no upper limit.",
            "format": "int32"
          },
          "index": {
            "type": "integer",
            "description": "The pagination index, which represents the particular page of entities to return in the response.",
            "format": "int32"
          },
          "where": {
            "$ref": "#/components/schemas/laborCategoryEntryListWhereCondition"
          },
          "sortBy": {
            "$ref": "#/components/schemas/laborCategoryEntryListSortCriteria"
          }
        }
      },
      "BaseErrorResultForRest": {
        "required": [
          "details",
          "errorCode",
          "message"
        ],
        "type": "object",
        "description": "Model context for a base error result.",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "The error code associated with a base error result."
          },
          "message": {
            "type": "string",
            "description": "The message associated with a base error result."
          },
          "details": {
            "$ref": "#/components/schemas/BaseErrorDetailsForRest"
          }
        }
      },
      "OrgMapMultipleLocationMoveTo": {
        "required": [
          "destinationRef",
          "endDate",
          "startDate"
        ],
        "type": "object",
        "description": "Model holding the destination to be used in an Org Map move request.",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The start date for the destination location.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The end date for the destination location.",
            "format": "date"
          },
          "destinationRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          }
        }
      },
      "laborCategoryEntryListWhereCondition": {
        "type": "object",
        "description": "The where clause of a set of sorting, filtering, and selecting parameters in which the actual criteria for retrieving the parameters is specified.",
        "properties": {
          "resolvedByWildcard": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to load entries resolved by wildcard into the list. Default value is false."
          },
          "allDetails": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to load all details about a profile. Default value is true."
          },
          "laborCategory": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "filterCriteria": {
            "$ref": "#/components/schemas/laborCategoryEntryListFilterCriteria"
          }
        }
      },
      "paginationSortAndFilterResponse": {
        "type": "object",
        "description": "@v2.0.paginationresponse.apimodel.description",
        "properties": {
          "records": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "description": "@v2.0.paginationresponsev2.apimodelproperty.records.value"
          },
          "totalElements": {
            "type": "integer",
            "description": "@v2.0.paginationresponsev2.apimodelproperty.totalelements.value",
            "format": "int32"
          }
        }
      },
      "MultiReadRequest": {
        "type": "object",
        "description": "Model for Scheduling multi-read requests.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/ObjectRefList"
          },
          "exclusiveObjectRefList": {
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            },
            "type": "array"
          }
        }
      },
      "IAccessProfile": {
        "type": "object",
        "properties": {
          "accessProfileId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OrgMapMultipleLocationTypeApplyReadForLocation": {
        "required": [
          "date",
          "locationRef"
        ],
        "type": "object",
        "description": "Model containing information to retrieve the type of a location.",
        "properties": {
          "date": {
            "type": "string",
            "description": "The as-of date used when retrieving the location type.",
            "format": "date"
          },
          "locationRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          }
        }
      },
      "ChunkDefinition": {
        "type": "object",
        "properties": {
          "chunkServiceLimitProperty": {
            "type": "string"
          },
          "chunkProperty": {
            "type": "string"
          }
        }
      },
      "OrgMapMultipleLocationSetReadRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for an Org Map Find Locations sets multi read request.",
        "properties": {
          "returnOnlyNodeRefsTree": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to return tree structure instead of flat list."
          },
          "where": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationSetReadWhere"
          }
        }
      },
      "SummaryForRest": {
        "required": [
          "failCount",
          "processCount",
          "successCount"
        ],
        "type": "object",
        "description": "Context for additional response details.",
        "properties": {
          "processCount": {
            "type": "integer",
            "description": "The total amount of processes.",
            "format": "int32"
          },
          "failCount": {
            "type": "integer",
            "description": "The amount of failed processes.",
            "format": "int32"
          },
          "successCount": {
            "type": "integer",
            "description": "The amount of successful processes.",
            "format": "int32"
          }
        }
      },
      "MultiReadJobsByExternalIdWhere": {
        "required": [
          "date",
          "externalIds"
        ],
        "type": "object",
        "description": "Model specifying the conditions related to the effective date and external IDs for effective jobs search.",
        "properties": {
          "date": {
            "type": "string",
            "description": "The search date in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "externalIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The external IDs of effective job references for which to search."
          }
        }
      },
      "DataElementMetadata": {
        "type": "object",
        "description": "Metadata about data element. User can define the data element with a dataType, employee based view, org based view , emp timeseries based view or organization timeseries based view using views property, displayPolicy, the entity type it maps to in IA using entity property, it also can indicate wither it is parameterized, computable and summarizable.",
        "properties": {
          "summarizable": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a data element is summarizable by Information Access."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the metadata."
          },
          "views": {
            "items": {
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "The type of view: emp, org, emp timeseries, or organization timeseries."
          },
          "dataType": {
            "enum": [
              "STRING",
              "DATE",
              "DATETIME",
              "TIME",
              "BOOLEAN",
              "NUMBER",
              "ENUM",
              "UNSUPPORTED"
            ],
            "type": "string",
            "description": "The data type of a data element - NUMBER, LONG, STRING, DATE, DATETIME, TIME, BOOLEAN and ENUM."
          },
          "entityfilter": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a data element has an entity filter enabled."
          },
          "displayPolicy": {
            "$ref": "#/components/schemas/DisplayPolicy"
          },
          "parameterized": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a data element is parameterized."
          },
          "entity": {
            "$ref": "#/components/schemas/Entity"
          },
          "computable": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a data element is computable by Information Access."
          },
          "currencyConvertible": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a currency is convertible."
          },
          "licenses": {
            "items": {
              "enum": [
                "DEFAULT",
                "UNSUPPORTED"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "The licenses required by a data element."
          },
          "facp": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A Boolean indicator of whether or not the ability to access a data element is restricted by a Function Access Control Point."
          }
        }
      },
      "MultiReadTypesByExternalIdWhere": {
        "required": [
          "date",
          "externalIds"
        ],
        "type": "object",
        "description": "Model specifying the conditions related to effective date and external IDs for effective location types search.",
        "properties": {
          "date": {
            "type": "string",
            "description": "The search date in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "externalIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The external IDs of effective location type references for which to search."
          }
        }
      },
      "Configuration": {
        "type": "object",
        "properties": {
          "useAllHomeLocations": {
            "type": "boolean"
          },
          "timeframe": {
            "$ref": "#/components/schemas/SchedulingObjectRef"
          }
        }
      },
      "WorkUnitDataSource": {
        "type": "object",
        "description": "The work unit model.",
        "properties": {
          "dateRange": {
            "$ref": "#/components/schemas/IaPlatformSearchModelTimeFrame"
          },
          "rollupBy": {
            "items": {
              "$ref": "#/components/schemas/DataElementProperty"
            },
            "type": "array",
            "description": "A reference to the work unit rollup type. For example: Work Group, Job, Employee, Volume Label, and Volume Label By Post Date."
          },
          "hyperfind": {
            "$ref": "#/components/schemas/IA_Object_Reference"
          },
          "workUnits": {
            "$ref": "#/components/schemas/Selector"
          }
        }
      },
      "MultiReadJobsByPersistentIdRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for an Org Map multi-read nodeId request.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/MultiReadJobsByPersistentIdWhere"
          }
        }
      },
      "LaborCategoryListEffectiveVersion": {
        "type": "object",
        "properties": {
          "entryListWildcard": {
            "type": "string"
          },
          "expirationDate": {
            "type": "string",
            "format": "date"
          },
          "entryList": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
            },
            "type": "array"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "OrgMapNodeRest": {
        "required": [
          "effectiveDate",
          "expirationDate",
          "name",
          "nodeId",
          "parentNodeRef"
        ],
        "type": "object",
        "description": "Model for an org map location for widgets.",
        "properties": {
          "color": {
            "type": "string",
            "description": "The color of an org map node. Only job nodes can have a color."
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date of the current node revision.",
            "format": "date"
          },
          "effectiveDate": {
            "type": "string",
            "description": "The effective date of the current node revision.",
            "format": "date"
          },
          "indirectWorkPercent": {
            "type": "integer",
            "description": "The indirect work allocation associated with a node.",
            "format": "int32"
          },
          "nodeId": {
            "type": "integer",
            "description": "The effective-dated node ID.",
            "format": "int64"
          },
          "costCenterRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "externalId": {
            "type": "string",
            "description": "The external ID of an org map node. If no value is passed during an update, the previous value remains in effect and is taken from the revision with the most recent effective date."
          },
          "lastRevision": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not this is a node's last revision. If no value is passed during an update, this value will update to true."
          },
          "timezoneRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "description": {
            "type": "string",
            "description": "The description of an org node."
          },
          "firstRevision": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not this is a node's first revision."
          },
          "directWorkPercent": {
            "type": "integer",
            "description": "The direct work allocation associated with a node.",
            "format": "int32"
          },
          "address": {
            "type": "string",
            "description": "The address associated with a node."
          },
          "fullName": {
            "type": "string",
            "description": "The full name of an effective-dated node."
          },
          "persistentId": {
            "type": "string",
            "description": "The PersistentId of an org map node."
          },
          "contextRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "name": {
            "type": "string",
            "description": "The short name of an effective-dated node.If null passed on update then previous value from the revision with the closest effective date will be set."
          },
          "currencyRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "transferable": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a location is transferable."
          },
          "parentNodeRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "orgNodeTypeRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "genericJobRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          }
        }
      },
      "OrgMapMultipleLocationTypeReadWhere": {
        "type": "object",
        "description": "Model for criteria related to Locale Policy multi-read requests.",
        "properties": {
          "locationTypeRefSpan": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationTypeFindWhereSpanByRef"
          },
          "span": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationTypeFindWhereSpan"
          }
        }
      },
      "OrgObjectRefList": {
        "type": "object",
        "description": "Model for an org object reference list.",
        "properties": {
          "ids": {
            "uniqueItems": true,
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "A collection of object reference IDs used in a request."
          },
          "qualifiers": {
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A collection of object reference qualifiers used in a request."
          }
        }
      },
      "MultiReadByPersistentIdResponse": {
        "required": [
          "details",
          "message"
        ],
        "type": "object",
        "description": "Model for an Org Map multi-read node IDs response.",
        "properties": {
          "message": {
            "type": "string",
            "description": "The success message returned when retrieving node IDs."
          },
          "details": {
            "$ref": "#/components/schemas/MultiReadDetails"
          }
        }
      },
      "Entity": {
        "type": "object",
        "properties": {
          "composed": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OrgMapMultipleLocationDeleteWhere": {
        "required": [
          "nodes"
        ],
        "type": "object",
        "description": "Model holding conditions for locations to delete and date to be used. ",
        "properties": {
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/OrgObjectRef"
            },
            "type": "array",
            "description": "The node references list of the Org Map to get."
          },
          "forDate": {
            "type": "string",
            "description": "The effective date",
            "format": "date"
          }
        }
      },
      "OrgMapJobsMultiReadWhere": {
        "type": "object",
        "description": "Model specifying the conditions relating to the date span for Generic jobs search.",
        "properties": {
          "span": {
            "$ref": "#/components/schemas/OrgMapJobsFindWhereSpan"
          },
          "forDate": {
            "$ref": "#/components/schemas/OrgMapJobsFindWhereForDate"
          },
          "allJobsBySpan": {
            "$ref": "#/components/schemas/OrgMapJobsFindWhereAllJobsBySpan"
          }
        }
      },
      "ResolvedTimeIncrement": {
        "type": "object",
        "description": "The response object of Time Increment Resolver which contains the ID and name of an object, a date range, and a time increment type.",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The start date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD)."
          },
          "isPartial": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a date range covers a complete WEEK, MONTH, or QUARTER."
          },
          "timeIncrement": {
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "QUARTER",
              "PAYPERIOD"
            ],
            "type": "string",
            "description": "The time increment type. Valid values include DAY, WEEK, MONTH, and QUARTER."
          },
          "endDate": {
            "type": "string",
            "description": "The end date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD)."
          },
          "id": {
            "type": "string",
            "description": "The ID of an object."
          }
        }
      },
      "LaborCategoryEntrySearchCriteria": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/LaborCategoryEntryWhereCriteria"
          }
        }
      },
      "IAccessProfileService": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "accessProfiles": {
            "items": {
              "$ref": "#/components/schemas/IAccessProfile"
            },
            "type": "array"
          },
          "defaultProfile": {
            "$ref": "#/components/schemas/IAccessProfile"
          },
          "accessProfilesWithoutGDAP": {
            "items": {
              "$ref": "#/components/schemas/IAccessProfile"
            },
            "type": "array"
          }
        }
      },
      "MultiReadDetails": {
        "required": [
          "results"
        ],
        "type": "object",
        "description": "Model for an Org Map multi-read node IDs response.",
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/MultiReadResults"
            },
            "type": "array",
            "description": "The results containing the mapping between <code>nodeId</code> and <code>persistentId</code>."
          }
        }
      },
      "OrgMapMultipleLocationMove": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for an Org Map Move Locations request.",
        "properties": {
          "do": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationMoveTo"
          },
          "where": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationMoveWhere"
          },
          "showDescendants": {
            "type": "boolean",
            "description": "Show descendants even if they are not updated."
          }
        }
      },
      "LaborCategoryProfileWhereCriteria": {
        "type": "object",
        "properties": {
          "allDetails": {
            "type": "boolean"
          },
          "snapshotDate": {
            "type": "string"
          },
          "profiles": {
            "$ref": "#/components/schemas/ProfileMultiReadRef"
          }
        }
      },
      "OrgMapMultipleLocationTypeFindWhereSpanByRef": {
        "required": [
          "endDate",
          "locationTypeRef",
          "startDate"
        ],
        "type": "object",
        "description": "Model containing information related to the searching date span.",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The effective start date of a search.",
            "format": "date"
          },
          "locationTypeRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "endDate": {
            "type": "string",
            "description": "The effective end date of a search.",
            "format": "date"
          },
          "revisionDate": {
            "type": "string",
            "description": "The effective date of a revision for the search",
            "format": "date"
          }
        }
      },
      "From": {
        "type": "object",
        "description": "From",
        "properties": {
          "employeeSet": {
            "$ref": "#/components/schemas/EmpDataSource"
          },
          "workUnitSet": {
            "$ref": "#/components/schemas/WorkUnitDataSource"
          },
          "viewPresentation": {
            "type": "string"
          },
          "locationSet": {
            "$ref": "#/components/schemas/OrgDataSource"
          },
          "view": {
            "enum": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5"
            ],
            "type": "string",
            "description": "The view that specifies the data source. Valid values are 0 - Employee, 1 - Organization, 2 - Employee Timeseries, 3 - Organization Timeseries, 4 - Work Unit, and 5 - Work Unit TimeSeries, or EMP, ORGANIZATION, EMP_TIME_SERIES, ORGANIZATION_TIME_SERIES, WORKUNIT, and WORKUNIT_TIMESERIES, respectively."
          }
        }
      },
      "LocationSetForUpsert": {
        "required": [
          "name",
          "typeId"
        ],
        "type": "object",
        "description": "Model for a location set, which is also known as an org map group.",
        "properties": {
          "typeId": {
            "type": "integer",
            "description": "The type ID of a location set type.",
            "format": "int64"
          },
          "removeNodeRefs": {
            "items": {
              "$ref": "#/components/schemas/OrgObjectRef"
            },
            "type": "array",
            "description": "The node references to remove from a location set."
          },
          "description": {
            "type": "string",
            "description": "The description of a location set."
          },
          "effectiveOnDate": {
            "type": "string",
            "description": "The date on which a location set is effective in ISO_LOCAL_DATE format (YYYY-MM-DD)."
          },
          "includeAllEnabled": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to include all enabled locations."
          },
          "versionCount": {
            "type": "integer",
            "description": "The version count of a location set.",
            "format": "int64"
          },
          "addNodeRefs": {
            "items": {
              "$ref": "#/components/schemas/OrgObjectRef"
            },
            "type": "array",
            "description": "The node references to add to a location set. If the specified location set does not exist, this property is required."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a location set.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a location set."
          }
        }
      },
      "LaborCategoryEntryWhereCriteria": {
        "type": "object",
        "properties": {
          "entries": {
            "$ref": "#/components/schemas/LaborCategoryObjectRefs"
          }
        }
      },
      "LaborCategoryEntryAccessList": {
        "type": "object",
        "properties": {
          "allEntriesList": {
            "type": "boolean"
          },
          "entryList": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
            },
            "type": "array"
          },
          "laborCategory": {
            "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
          }
        }
      },
      "OrgMapMultipleLocationReadWhere": {
        "type": "object",
        "description": "Model holding conditions be used in an Org Map multi read request.",
        "properties": {
          "descendantsOfDuring": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationFindWhereDescendantsOfDuring"
          }
        }
      },
      "DataViewColumnProperty": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "MultiReadLocationTypesByPersistentIdRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "The Org Map multi-read location types by persistent ID request model.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/MultiReadLocationTypesByPersistentIdWhere"
          }
        }
      },
      "laborCategoryProfilePaginationSortFilterRestParameters": {
        "type": "object",
        "description": "Entity containing parameters for sorting, filtering and selected page",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The pagination count, which represents the number of entities to return per page. This parameter has no upper limit.",
            "format": "int32"
          },
          "index": {
            "type": "integer",
            "description": "The pagination index, which represents the particular page of entities to return in the response.",
            "format": "int32"
          },
          "where": {
            "$ref": "#/components/schemas/laborCategoryProfileWhereCondition"
          },
          "sortBy": {
            "$ref": "#/components/schemas/laborCategoryProfileSortCriteria"
          }
        }
      },
      "StatusType": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "family": {
            "enum": [
              "INFORMATIONAL",
              "SUCCESSFUL",
              "REDIRECTION",
              "CLIENT_ERROR",
              "SERVER_ERROR",
              "OTHER"
            ],
            "type": "string"
          },
          "reasonPhrase": {
            "type": "string"
          }
        }
      },
      "DataViewColumn": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "dataType": {
            "enum": [
              "STRING",
              "DATE",
              "TIME",
              "BOOLEAN",
              "NUMBER",
              "ENUM",
              "DATETIME",
              "DURATION"
            ],
            "type": "string"
          },
          "entityName": {
            "type": "string"
          },
          "selected": {
            "type": "boolean"
          },
          "columnOrder": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "sortDirection": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "operation": {
            "enum": [
              "SUM",
              "AVG",
              "MIN",
              "MAX",
              "COUNT"
            ],
            "type": "string"
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/DataViewColumnProperty"
            },
            "type": "array"
          }
        }
      },
      "MultiReadLocationsByExternalIdWhere": {
        "required": [
          "context",
          "date",
          "externalPaths"
        ],
        "type": "object",
        "description": "Model specifying the conditions related to effective date and external IDs for effective locations search.",
        "properties": {
          "date": {
            "type": "string",
            "description": "The search date in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "externalPaths": {
            "items": {
              "$ref": "#/components/schemas/ExternalPath"
            },
            "type": "array",
            "description": "The external paths of effective location references for which to search."
          },
          "context": {
            "type": "string",
            "description": "This parameter indicates whether the search context is org or forecast."
          }
        }
      },
      "LaborEntryListAccessRequestDataForRest": {
        "type": "object",
        "description": "Retrieve Labor Entry List Access request model.",
        "properties": {
          "employee": {
            "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
          },
          "position": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "isManagerRole": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not the currently logged in user has a manager role."
          },
          "orgJob": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "asOfDate": {
            "type": "string",
            "description": "The date of the assignment."
          }
        }
      },
      "NewCookie": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "maxAge": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string"
          },
          "expiry": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "path": {
            "type": "string"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "secure": {
            "type": "boolean"
          }
        }
      },
      "LocalePolicyMultiDeleteWhere": {
        "required": [
          "localePolicyIds"
        ],
        "type": "object",
        "description": "Model for criteria related to Locale Policy multi-delete requests.",
        "properties": {
          "localePolicyIds": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "A list of locale policy IDs."
          }
        }
      },
      "LocalePolicyTenantDefaultRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for Locale Policy tenant default locale policy update requests.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/LocalePolicyTenantDefaultWhere"
          }
        }
      },
      "KnownPlaceObjectRefList": {
        "type": "object",
        "description": "@v1.0.knownplaceobjectreflist.apimodel.description",
        "properties": {
          "refs": {
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            },
            "type": "array",
            "description": "The object references."
          },
          "ids": {
            "uniqueItems": true,
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "The list of references by ID."
          },
          "persistentIds": {
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "@v1.0.knownplaceobjectreflist.apimodelproperty.persistentids.description"
          },
          "qualifiers": {
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The qualifier of the object reference, such as name."
          }
        }
      },
      "OrgMapMultipleLocationMultiReadResponse": {
        "type": "object",
        "description": "Model for an Org Map Find Locations multi read response.",
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/OrgMapNodeWithPath"
            },
            "type": "array",
            "description": "The list of elements."
          },
          "totalElements": {
            "type": "integer",
            "description": "Indicate the tetal of elements.",
            "format": "int64"
          }
        }
      },
      "Link": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "rels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uri": {
            "type": "string",
            "format": "uri"
          },
          "uriBuilder": {
            "$ref": "#/components/schemas/UriBuilder"
          },
          "params": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "rel": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "OrgMapJobsFindWhereSpan": {
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object",
        "description": "Model containing information related to the searching date span",
        "properties": {
          "jobRefs": {
            "$ref": "#/components/schemas/OrgObjectRefList"
          },
          "startDate": {
            "type": "string",
            "description": "The effective date for the search",
            "format": "date"
          },
          "jobRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "endDate": {
            "type": "string",
            "description": "The effective date for the search",
            "format": "date"
          },
          "revisionDate": {
            "type": "string",
            "description": "The effective date of a revision for the search",
            "format": "date"
          }
        }
      },
      "OrgMapMultipleJobReadRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for an Org Map multi read Generic jobs multi read request.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/OrgMapJobsMultiReadWhere"
          },
          "multiReadOptions": {
            "$ref": "#/components/schemas/OrgMapGenericJobMultiReadOptions"
          }
        }
      },
      "laborCategoryEntryWhereCondition": {
        "type": "object",
        "description": "The where clause of a set of sorting, filtering, and selecting parameters in which the actual criteria for retrieving the parameters is specified.",
        "properties": {
          "laborCategory": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "filterCriteria": {
            "$ref": "#/components/schemas/laborCategoryEntryFilterCriteria"
          }
        }
      },
      "CommonsLocalePolicy": {
        "required": [
          "countryCode",
          "currencyFormat",
          "dateTimeFormats",
          "displayDateTimeFormats",
          "displayName",
          "languageCode",
          "name",
          "numberFormat",
          "selectableAtLogon"
        ],
        "type": "object",
        "description": "Model context for Locale Policy.",
        "properties": {
          "displayDateTimeFormats": {
            "$ref": "#/components/schemas/LocalePolicyDateTimeFormats"
          },
          "showWeekNumber": {
            "type": "boolean",
            "description": "A Boolean indicator for displaying or hiding week numbers."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of a locale policy."
          },
          "description": {
            "type": "string",
            "description": "The description of a locale policy."
          },
          "numberFormat": {
            "$ref": "#/components/schemas/LocalePolicyNumberFormat"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of a locale policy."
          },
          "tenantDefault": {
            "type": "boolean"
          },
          "localeSettings": {
            "$ref": "#/components/schemas/DerivedLocaleSettings"
          },
          "weekStartDay": {
            "type": "integer",
            "description": "The starting day of the week defined in a locale policy.",
            "format": "int64"
          },
          "countryCode": {
            "type": "string",
            "description": "The country code of a locale policy."
          },
          "currencyFormat": {
            "$ref": "#/components/schemas/LocalePolicyCurrencyFormat"
          },
          "selectableAtLogon": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not the locale policy is selectable at logon."
          },
          "activesw": {
            "type": "boolean",
            "description": "The status of a locale policy."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a locale policy.",
            "format": "int64"
          },
          "dateTimeFormats": {
            "$ref": "#/components/schemas/LocalePolicyDateTimeFormats"
          },
          "name": {
            "type": "string",
            "description": "The name of a locale policy."
          }
        }
      },
      "TimeIncrementResolverRequest": {
        "type": "object",
        "description": "Time Increment Resolver value, which contains timeframe, provided as a TimeframeId or a range with start and end dates.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/TimeIncrementWhere"
          }
        }
      },
      "TimekeepingObjectRefList": {
        "type": "object",
        "description": "Model describing a collection of object references.",
        "properties": {
          "refs": {
            "items": {
              "$ref": "#/components/schemas/ObjectRef_Entity"
            },
            "type": "array",
            "description": "The object references."
          },
          "ids": {
            "uniqueItems": true,
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "The list of references by ID."
          },
          "qualifiers": {
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The qualifier of the object reference, such as name."
          }
        }
      },
      "MultiReadTypeByExternalIdRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "The Org Map multi-read effective jobs request model.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/MultiReadJobsByExternalIdWhere"
          }
        }
      },
      "OrgMapGenericJobMultiReadOptions": {
        "type": "object",
        "description": "Model holding conditions related to read options to be used in a generic job multi read request.",
        "properties": {
          "modifiedSince": {
            "type": "string",
            "description": "Indicate if modified time details are required."
          }
        }
      },
      "MediaType": {
        "type": "object",
        "properties": {
          "subtype": {
            "type": "string"
          },
          "wildcardType": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "parameters": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "wildcardSubtype": {
            "type": "boolean"
          }
        }
      },
      "StartDayWeekRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "The Location Attribute Start Day of Week operation request model.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/StartDayWeekWhereCriteria"
          }
        }
      },
      "LocationSets": {
        "type": "object",
        "properties": {
          "refs": {
            "items": {
              "$ref": "#/components/schemas/OrgObjectRef"
            },
            "type": "array",
            "description": "A list of references to business structure location set objects. These entities are also known as org map groups."
          },
          "ids": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "A list of business structure location set IDs. These entities are also known as org map groups."
          },
          "persistentIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A list of business structure location set persistent IDs. These entities are also known as org map groups."
          },
          "qualifiers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A list of business structure location set qualifiers. These entities are also known as org map groups."
          }
        }
      },
      "OrgMapMultipleLocationMoveRequest": {
        "required": [
          "move"
        ],
        "type": "object",
        "description": "Model for an Org Map Move Locations request.",
        "properties": {
          "move": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationMove"
          }
        }
      },
      "MultiReadLocationTypesByPersistentIdWhere": {
        "required": [
          "persistentIds"
        ],
        "type": "object",
        "description": "The Org Map multi-read location types by persistent ID model for the where property.",
        "properties": {
          "persistentIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A list of persistent IDs associated with location types."
          }
        }
      },
      "LocationSetsMultiDeleteRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for an Org Map Locations sets multi delete request.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/MultiDeleteWhere"
          }
        }
      },
      "IEntityDefinition": {
        "type": "object",
        "properties": {
          "coreEntityKey": {
            "$ref": "#/components/schemas/BitSet"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDefinition"
          },
          "parent": {
            "$ref": "#/components/schemas/IEntityDefinition"
          },
          "oneToMany": {
            "type": "boolean"
          },
          "chunk": {
            "$ref": "#/components/schemas/ChunkDefinition"
          },
          "children": {
            "additionalProperties": {
              "uniqueItems": true,
              "items": {
                "$ref": "#/components/schemas/IEntityDefinition"
              },
              "type": "array"
            },
            "type": "object"
          },
          "dataSourceId": {
            "type": "string"
          },
          "dataSource": {
            "type": "string"
          },
          "joinCondition": {
            "enum": [
              "CORE_ENTITY_MATCH",
              "SAME_ENTITY_GRAPH_ID_MATCH",
              "CORE_ENTITY_ORG_JOB_MATCH",
              "UNSUPPORTED"
            ],
            "type": "string"
          },
          "entity": {
            "$ref": "#/components/schemas/Entity"
          },
          "root": {
            "$ref": "#/components/schemas/IEntityDefinition"
          },
          "serviceLimitProperty": {
            "type": "string"
          }
        }
      },
      "OrgMapMultipleLocationCopyTo": {
        "required": [
          "destinationRef",
          "endDate",
          "fullName",
          "name",
          "startDate"
        ],
        "type": "object",
        "description": "Model holding the destination to be used in an Org Map copy request.",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The start date for the destination location.",
            "format": "date"
          },
          "fullName": {
            "type": "string",
            "description": "The destination node fullname."
          },
          "endDate": {
            "type": "string",
            "description": "The end date for the destination location.",
            "format": "date"
          },
          "name": {
            "type": "string",
            "description": "The destination node name."
          },
          "destinationRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          }
        }
      },
      "GenericJob": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date"
          },
          "color": {
            "type": "string"
          },
          "firstRevision": {
            "type": "boolean"
          },
          "expirationDate": {
            "type": "string",
            "format": "date"
          },
          "fullName": {
            "type": "string"
          },
          "lastRevision": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "displayOrder": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "LaborCategoryListServiceForRestV2": {
        "type": "object",
        "properties": {
          "accessProfileService": {
            "$ref": "#/components/schemas/IAccessProfileService"
          },
          "updateService": {
            "$ref": "#/components/schemas/ILaborCategoryListUpdateService"
          }
        }
      },
      "OrgMapMultipleLocationTypeMultiReadOptions": {
        "type": "object",
        "description": "Model holding conditions related to read options to be used in a location type multi read request.",
        "properties": {
          "modifiedSince": {
            "type": "string",
            "description": "Indicate if modified time details are required."
          }
        }
      },
      "OrgMapMultipleLocationCopyWhere": {
        "required": [
          "date",
          "sourceRef"
        ],
        "type": "object",
        "description": "Model holding conditions related to source location and date to be used in an Org Map copy request.",
        "properties": {
          "date": {
            "type": "string",
            "description": "The effective date for the source location.",
            "format": "date"
          },
          "sourceRef": {
            "$ref": "#/components/schemas/OrgObjectRef"
          }
        }
      },
      "EntityTag": {
        "type": "object",
        "properties": {
          "weak": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "UriBuilder": {
        "type": "object"
      },
      "laborCategoryEntryPaginationSortFilterRestParameters": {
        "type": "object",
        "description": "Entity containing parameters for sorting, filtering and selected page",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The pagination count, which represents the number of entities to return per page. This parameter has no upper limit.",
            "format": "int32"
          },
          "index": {
            "type": "integer",
            "description": "The pagination index, which represents the particular page of entities to return in the response.",
            "format": "int32"
          },
          "where": {
            "$ref": "#/components/schemas/laborCategoryEntryWhereCondition"
          },
          "sortBy": {
            "$ref": "#/components/schemas/laborCategoryEntrySortCriteria"
          }
        }
      },
      "PagedMultiReadRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for an org map apply-read locations sets request with pagination.",
        "properties": {
          "count": {
            "type": "integer",
            "description": "An integer used to support pagination that represents the number of entities returned per page. This property has no upper limit.",
            "format": "int32"
          },
          "index": {
            "type": "integer",
            "description": "An integer used to support pagination that is the zero-based index for the first org set returned.",
            "format": "int32"
          },
          "where": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationSetReadWhere"
          },
          "returnOnlyNodeRefsTree": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to return a tree structure instead of a flat list."
          }
        }
      },
      "DataViewProfile": {
        "type": "object",
        "description": "Dataview Profile model.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of a Dataview Profile.",
            "format": "int64"
          },
          "dataViews": {
            "items": {
              "$ref": "#/components/schemas/DataViewKey"
            },
            "type": "array",
            "description": "Dataviews belonging to a particular Dataview Profile."
          },
          "name": {
            "type": "string",
            "description": "Name of a Dataview Profile."
          },
          "description": {
            "type": "string",
            "description": "Description of a Dataview Profile."
          }
        }
      },
      "MultiReadLocationsByPersistentIdRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for an Org Map multi-read nodeId request.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/MultiReadLocationsByPersistentIdWhere"
          }
        }
      },
      "PaginationDefinition": {
        "type": "object",
        "properties": {
          "paginationProperty": {
            "type": "string"
          },
          "pageSizeProperty": {
            "type": "string"
          },
          "paginationServiceLimitProperty": {
            "type": "string"
          }
        }
      },
      "LocalDateSpan": {
        "type": "object",
        "description": "A local date span object.",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The start date of a local date span in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the local date span in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          }
        }
      },
      "MultiDeleteWhere": {
        "required": [
          "locationSets"
        ],
        "type": "object",
        "description": "Criterias definition of a multi delete Locations sets where.",
        "properties": {
          "locationSets": {
            "$ref": "#/components/schemas/MultiDeleteLocationSets"
          }
        }
      },
      "CoreEntityValue": {
        "type": "object",
        "properties": {
          "qualifier": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "MultiReadResults": {
        "required": [
          "success"
        ],
        "type": "object",
        "description": "Model for an Org Map multi-read node IDs response.",
        "properties": {
          "success": {
            "$ref": "#/components/schemas/PersistentIdMapping"
          }
        }
      },
      "MultiReadJobsByExternalIdResponse": {
        "required": [
          "mappings"
        ],
        "type": "object",
        "description": "Model for an Org Map multi-read effective jobs response.",
        "properties": {
          "mappings": {
            "items": {
              "$ref": "#/components/schemas/ExternalJobMapping"
            },
            "type": "array",
            "description": "The effective jobs retrieved."
          }
        }
      },
      "LocalePolicyTenantDefaultWhere": {
        "required": [
          "localePolicyId"
        ],
        "type": "object",
        "description": "Model for criteria related to LocalePolicy apply update request.",
        "properties": {
          "localePolicyId": {
            "type": "integer",
            "description": "The ID of a locale policy.",
            "format": "int64"
          }
        }
      },
      "MultiReadLocationsByExternalIdRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for an Org Map multi-read effective locations request.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/MultiReadLocationsByExternalIdWhere"
          }
        }
      },
      "OrgDataSource": {
        "type": "object",
        "description": "Location: representing Department, Region, or Country",
        "properties": {
          "savedLocations": {
            "$ref": "#/components/schemas/IA_Object_Reference"
          },
          "dateRange": {
            "$ref": "#/components/schemas/IaPlatformSearchModelTimeFrame"
          },
          "rollupBy": {
            "items": {
              "$ref": "#/components/schemas/DataElementProperty"
            },
            "type": "array",
            "description": "A reference to the location rollup type. For example: Department, Region, and Country."
          },
          "hyperfind": {
            "$ref": "#/components/schemas/IA_Object_Reference"
          },
          "locations": {
            "$ref": "#/components/schemas/Selector"
          }
        }
      },
      "OrgMapMultipleLocationMultiReadOptions": {
        "type": "object",
        "description": "Model holding conditions related to read options to be used in an Org Map multi read request.",
        "properties": {
          "modifiedSince": {
            "type": "string",
            "description": "Indicate if modified time details are required."
          },
          "count": {
            "type": "integer",
            "description": "Indicate the number of elements to be returned.",
            "format": "int32"
          },
          "includeInheritedCurrency": {
            "type": "boolean",
            "description": "Indicate that need to resolve effectiveCurrency field."
          },
          "includeOrgPathDetails": {
            "type": "boolean",
            "description": "Indicate if org path details are required."
          },
          "index": {
            "type": "integer",
            "description": "Indicate the index page to be returned.",
            "format": "int32"
          }
        }
      },
      "TimeIncrementMetaData": {
        "type": "object",
        "description": "The Time Increment metadata. Contains the time increment and a list of time increment formatters.",
        "properties": {
          "timeIncrement": {
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "QUARTER",
              "PAYPERIOD"
            ],
            "type": "string",
            "description": "The time increment object."
          },
          "formatters": {
            "items": {
              "enum": [
                "DAY_OF_WEEK",
                "LONG_DATE",
                "DAY_OF_WEEK_LONGDATE",
                "WEEK_NUMBER",
                "WEEK_NUMBER_LONG_DATERANGE",
                "LONG_DATERANGE",
                "MONTH_NAME",
                "MONTH_SHORTNAME",
                "MONTH_LONG_DATERANGE",
                "QUARTER_NAME",
                "QUARTER_SHORTNAME",
                "QUARTER_NAME_LONG_DATERANGE",
                "QUARTER_SHORTNAME_DATERANGE"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "A list of time increment formatters."
          }
        }
      },
      "PersistentIdMapping": {
        "required": [
          "nodeId",
          "persistentId"
        ],
        "type": "object",
        "description": "Model for an Org Map multi-read node IDs response.",
        "properties": {
          "persistentId": {
            "type": "string",
            "description": "The persistent ID of the requested node ID."
          },
          "nodeId": {
            "type": "string",
            "description": "The node ID corresponding to a persistent ID."
          }
        }
      },
      "LocalePolicyNumberFormat": {
        "type": "object",
        "description": "Model for formatting number.",
        "properties": {
          "decimalSymbol": {
            "type": "string"
          },
          "negativePattern": {
            "enum": [
              "BETWEEN_PARENTHESIS",
              "MINUS_LEFT_NO_SPACE",
              "MINUS_LEFT_WITH_SPACE",
              "MINUS_RIGHT_NO_SPACE",
              "MINUS_RIGHT_WITH_SPACE"
            ],
            "type": "string"
          },
          "decimalPrecision": {
            "type": "integer",
            "format": "int32"
          },
          "groupingPattern": {
            "enum": [
              "NO_GROUP",
              "GROUP_BY_3",
              "GROUP_ONLY_LAST_3",
              "GROUP_BY_2_EXCEPT_LAST_3"
            ],
            "type": "string"
          },
          "groupingSymbol": {
            "type": "string"
          }
        }
      },
      "Tile": {
        "type": "object",
        "description": "Tile object context",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a tile."
          },
          "originalId": {
            "type": "integer",
            "description": "The original ID of a tile. ID of a tile will be replaced with Admin ID and this field holds the replaced ID.",
            "format": "int64"
          },
          "baseTileId": {
            "type": "integer",
            "description": "The base tile ID of a tile. It is the id of an Admin tile where the tile personalized from.",
            "format": "int64"
          },
          "label": {
            "type": "string",
            "description": "The label of a tile. Labels can be localized."
          },
          "width": {
            "type": "integer",
            "description": "The width of a tile. Default value is card width.",
            "format": "int64"
          },
          "height": {
            "type": "integer",
            "description": "The height of a tile. Default value is card height.",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a tile.",
            "format": "int64"
          },
          "card": {
            "$ref": "#/components/schemas/Card"
          }
        }
      },
      "BaseBatchResponseForRest": {
        "required": [
          "details",
          "errorCode",
          "message"
        ],
        "type": "object",
        "description": "Model describing the base batch response.",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "The error code associated with a base batch response."
          },
          "message": {
            "type": "string",
            "description": "The message associated with a base batch response."
          },
          "details": {
            "$ref": "#/components/schemas/BaseResponseDetailsForRest"
          }
        }
      },
      "OrgMapMultipleLocationTypeApplyReadRequest": {
        "required": [
          "forLocation"
        ],
        "type": "object",
        "description": "Model containing query information regarding an announcement's apply-read request.",
        "properties": {
          "forLocation": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationTypeApplyReadForLocation"
          }
        }
      },
      "RequestOptions": {
        "type": "object",
        "description": "DataRequest - Additional Options",
        "properties": {
          "responseType": {
            "enum": [
              "TREE",
              "GRID"
            ],
            "type": "string",
            "description": "The response type. Valid values are: TREE, GRID."
          },
          "extended": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object",
            "description": "A map containing extended parameters for Information Access (IA). An example of the parameter is 'forWorkWeek: true'."
          },
          "secondaryRequestTag": {
            "type": "string",
            "description": "A secondary request tag identifier used when the request is split into one or more subrequests."
          },
          "includeColumnTotals": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to provide summary column totals."
          },
          "refresh": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to force a realtime response retrival regardless of whether or not the response is available in the cache."
          },
          "timeIncrementFormat": {
            "enum": [
              "DAY_OF_WEEK",
              "LONG_DATE",
              "DAY_OF_WEEK_LONGDATE",
              "WEEK_NUMBER",
              "WEEK_NUMBER_LONG_DATERANGE",
              "LONG_DATERANGE",
              "MONTH_NAME",
              "MONTH_SHORTNAME",
              "MONTH_LONG_DATERANGE",
              "QUARTER_NAME",
              "QUARTER_SHORTNAME",
              "QUARTER_NAME_LONG_DATERANGE",
              "QUARTER_SHORTNAME_DATERANGE"
            ],
            "type": "string",
            "description": "The Time Increment format."
          },
          "requestTag": {
            "type": "string",
            "description": "A unique UUID tag which identifies the request. Used by the caller for pagination and caching."
          },
          "isLegacyResponse": {
            "type": "boolean"
          },
          "metadataKey": {
            "type": "string",
            "description": "The metadata key received from providers that is used in subsequent requests."
          }
        }
      },
      "OrgMapMultipleLocationTypeApplyReadResponse": {
        "required": [
          "nodetype"
        ],
        "type": "object",
        "description": "Model for the node type retrieved by the apply read request.",
        "properties": {
          "nodetype": {
            "$ref": "#/components/schemas/CommonsOrgNodeType"
          }
        }
      },
      "SummaryNodeAttributeDTO": {
        "type": "object",
        "description": "Summary Attribute",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of nodes.",
            "format": "int32"
          },
          "min": {
            "type": "string",
            "description": "The minimum value."
          },
          "max": {
            "type": "string",
            "description": "The maximum value."
          },
          "sum": {
            "type": "string",
            "description": "The sum of values."
          },
          "key": {
            "type": "string",
            "description": "Each data element key represents an existing data element in the Data Dictionary."
          },
          "avg": {
            "type": "string",
            "description": "The average value."
          }
        }
      },
      "laborCategoryEntryFilterCriteria": {
        "type": "object",
        "description": "An entity containing parameters for filtering.",
        "properties": {
          "ivrNum": {
            "type": "string",
            "description": "Labor category entry ivr number."
          },
          "inactive": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a labor category entry is inactive."
          },
          "supportPartialStringMatch": {
            "type": "boolean",
            "description": "The Boolean indicator of whether to enable or disable partial matching. Default value is true."
          },
          "name": {
            "type": "string",
            "description": "The name of an entity."
          },
          "description": {
            "type": "string",
            "description": "The description of an entity."
          }
        }
      },
      "OrgMapMultipleJobApplyReadResponse": {
        "required": [
          "job"
        ],
        "type": "object",
        "description": "Model for an Org Map apply read Generic jobs apply read response.",
        "properties": {
          "job": {
            "$ref": "#/components/schemas/GenericJob"
          }
        }
      },
      "MultiReadJobsByPersistentIdWhere": {
        "required": [
          "persistentIds"
        ],
        "type": "object",
        "description": "Model specifying the conditions related to persistent IDs for node IDs search.",
        "properties": {
          "persistentIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The persistent IDs of node IDs used by location retrieval operations."
          }
        }
      },
      "LocalePolicyCurrencyFormat": {
        "type": "object",
        "description": "Model for formatting currency.",
        "properties": {
          "negativePattern": {
            "enum": [
              "CURRENCY_LEFT_BETWEEN_PARENTHESIS_NO_SPACE",
              "CURRENCY_LEFT_BETWEEN_PARENTHESIS_WITH_SPACE",
              "CURRENCY_RIGHT_BETWEEN_PARENTHESIS_NO_SPACE",
              "CURRENCY_RIGHT_BETWEEN_PARENTHESIS_WITH_SPACE",
              "CURRENCY_LEFT_MINUS_LEFT_NO_SPACE",
              "CURRENCY_LEFT_MINUS_LEFT_WITH_SPACE",
              "CURRENCY_RIGHT_MINUS_LEFT_NO_SPACE",
              "CURRENCY_RIGHT_MINUS_LEFT_WITH_SPACE",
              "CURRENCY_LEFT_MINUS_RIGHT_NO_SPACE",
              "CURRENCY_LEFT_MINUS_RIGHT_WITH_SPACE",
              "CURRENCY_RIGHT_MINUS_RIGHT_NO_SPACE",
              "CURRENCY_RIGHT_MINUS_RIGHT_WITH_SPACE",
              "CURRENCY_LEFT_MINUS_BEFORE_CURRENCY_NO_SPACE",
              "CURRENCY_LEFT_MINUS_BEFORE_CURRENCY_WITH_SPACE",
              "CURRENCY_RIGHT_MINUS_AFTER_CURRENCY_NO_SPACE",
              "CURRENCY_RIGHT_MINUS_AFTER_CURRENCY_WITH_SPACE"
            ],
            "type": "string"
          },
          "decimalPrecision": {
            "type": "integer",
            "format": "int32"
          },
          "positivePattern": {
            "enum": [
              "CURRENCY_LEFT_NO_SPACE",
              "CURRENCY_LEFT_WITH_SPACE",
              "CURRENCY_RIGHT_NO_SPACE",
              "CURRENCY_RIGHT_WITH_SPACE"
            ],
            "type": "string"
          }
        }
      },
      "ExchangeCurrencyParam": {
        "type": "object",
        "description": "DTO that contains parameters for converting amount from one currency to another.",
        "properties": {
          "targetCurrency": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "applyDate": {
            "type": "string",
            "description": "The date for which an exchange rate is required in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "amount": {
            "type": "number",
            "description": "The amount to convert from one currency to another.",
            "format": "double"
          },
          "sourceCurrency": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "dateRange": {
            "$ref": "#/components/schemas/CommonDateRange"
          }
        }
      },
      "EmpDataSource": {
        "type": "object",
        "description": "Data Source",
        "properties": {
          "dateRange": {
            "$ref": "#/components/schemas/IaPlatformSearchModelTimeFrame"
          },
          "employees": {
            "$ref": "#/components/schemas/Selector"
          },
          "hyperfind": {
            "$ref": "#/components/schemas/IA_Object_Reference"
          }
        }
      },
      "HyperfindQueryForList": {
        "type": "object",
        "description": "An abbreviated Hyperfind query model for lists.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a Hyperfind query."
          },
          "inclusiveExclusivefilterType": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "The description of a Hyperfind query."
          },
          "usageType": {
            "enum": [
              "HOME, REGULAR"
            ],
            "type": "string",
            "description": "The Hyperfind query usage type."
          },
          "visibility": {
            "$ref": "#/components/schemas/Visisbility_Combo"
          },
          "persistentId": {
            "type": "string",
            "description": "The persistent ID of a Hyperfind query."
          },
          "id": {
            "type": "integer",
            "description": "The unique ID of a Hyperfind query.",
            "format": "int64"
          },
          "constraints": {
            "$ref": "#/components/schemas/ConstraintList"
          }
        }
      },
      "ExternalLocationTypeMapping": {
        "required": [
          "externalId",
          "locationType"
        ],
        "type": "object",
        "description": "The external location type map model.",
        "properties": {
          "locationType": {
            "$ref": "#/components/schemas/OrgObjectRef"
          },
          "externalId": {
            "type": "string",
            "description": "The external ID of a location type."
          }
        }
      },
      "LaborCategoryEntryList": {
        "type": "object",
        "properties": {
          "systemAllEntriesList": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "entryList": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
            },
            "type": "array"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "entryListWildcard": {
            "type": "string"
          },
          "updateDtm": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "entryListNames": {
            "type": "string"
          },
          "laborCategory": {
            "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
          },
          "effectiveVersions": {
            "items": {
              "$ref": "#/components/schemas/LaborCategoryListEffectiveVersion"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "LocationAttributeValueResponse": {
        "required": [
          "locationAttributeValue"
        ],
        "type": "object",
        "description": "The location attribute value response model.",
        "properties": {
          "locationAttributeValue": {
            "$ref": "#/components/schemas/LocationAttributeValue"
          }
        }
      },
      "HomePage": {
        "required": [
          "name"
        ],
        "type": "object",
        "description": "The Home Page model.",
        "properties": {
          "tiles": {
            "items": {
              "$ref": "#/components/schemas/Tile"
            },
            "type": "array",
            "description": "A read-only list of tiles and a card associated with each tile. This list only exists when the expanded option for home page retrieval is set to TRUE."
          },
          "description": {
            "type": "string",
            "description": "The home page description provide more details about the home page."
          },
          "wallpaperId": {
            "type": "integer",
            "description": "The ID of the Wallpaper associated with a home page.",
            "format": "int64"
          },
          "label": {
            "type": "string",
            "description": "The home page's label, which defaults to a home page's name."
          },
          "dataviewProfile": {
            "$ref": "#/components/schemas/IA_Object_Reference"
          },
          "tileRefs": {
            "items": {
              "$ref": "#/components/schemas/TileReference"
            },
            "type": "array",
            "description": "A list of tiles associated with a home page."
          },
          "personalized": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a home page is personalized."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a home page.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The unique name of a home page."
          }
        }
      },
      "Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "cookies": {
            "additionalProperties": {
              "$ref": "#/components/schemas/NewCookie"
            },
            "type": "object"
          },
          "links": {
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "type": "array"
          },
          "language": {
            "$ref": "#/components/schemas/Locale"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "entityTag": {
            "$ref": "#/components/schemas/EntityTag"
          },
          "length": {
            "type": "integer",
            "format": "int32"
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "headers": {
            "additionalProperties": {
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "type": "object"
          },
          "stringHeaders": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "statusInfo": {
            "$ref": "#/components/schemas/StatusType"
          },
          "location": {
            "type": "string",
            "format": "uri"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "entity": {
            "type": "object"
          },
          "allowedMethods": {
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metadata": {
            "additionalProperties": {
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "type": "object"
          }
        }
      },
      "Card": {
        "type": "object",
        "description": "Card object context",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a card."
          },
          "subType": {
            "type": "string",
            "description": "The chart subtype of a card. Valid values include COLUMN2D, BAR2D, LINE, and PIE2D. This property is REQUIRED when the card type is CHART."
          },
          "enableActions": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to enable card actions."
          },
          "height": {
            "type": "integer",
            "description": "This property specifies the height of the tile.",
            "format": "int64"
          },
          "width": {
            "type": "integer",
            "description": "This property specifies the width of the tile.",
            "format": "int64"
          },
          "flag": {
            "enum": [
              "GLOBAL",
              "PRIVATE",
              "UNSUPPORTED"
            ],
            "type": "string",
            "description": "This property indicates whether the card is created by an Admin (GLOBAL) or by a User (PRIVATE)."
          },
          "configuration": {
            "$ref": "#/components/schemas/Configuration"
          },
          "type": {
            "enum": [
              "GENERIC",
              "CHART",
              "APPLICATION",
              "CUSTOM",
              "MULTISERIESCHART",
              "UNSUPPORTED"
            ],
            "type": "string",
            "description": "The type of a card. Valid values include: APPLICATION, GENERIC, and CHART."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a card.",
            "format": "int64"
          }
        }
      },
      "TreeNode": {
        "type": "object",
        "description": "The model that stores the tree structure of an organizational map.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The data structure for organizational map nodes presented in a tree format.",
            "format": "int64"
          },
          "description": {
            "type": "string",
            "description": "The description of an org node."
          },
          "nodeName": {
            "type": "string",
            "description": "The name of a node."
          },
          "children": {
            "items": {
              "$ref": "#/components/schemas/TreeNode"
            },
            "type": "array",
            "description": "The children of a tree node."
          }
        }
      },
      "LocalePolicyDateTimeFormats": {
        "type": "object",
        "description": "Model for formatting Date Time.",
        "properties": {
          "timeFormat": {
            "type": "string"
          },
          "shortDateFormat": {
            "type": "string"
          },
          "monthYearFormat": {
            "type": "string"
          },
          "longDateFormat": {
            "type": "string"
          },
          "dayMonthFormat": {
            "type": "string"
          }
        }
      },
      "Constraint": {
        "type": "object"
      },
      "PagedOrgMapGroupResult": {
        "type": "object",
        "description": "Returned value for a paged request for organization sets.",
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/OrgMapGroup"
            },
            "type": "array",
            "description": "An ordered array of organization sets."
          },
          "totalElements": {
            "type": "integer",
            "description": "An integer representing the total number of organization sets that could be returned.",
            "format": "int32"
          }
        }
      },
      "LocalePolicyApplyUpdateRequest": {
        "required": [
          "tenantDefault"
        ],
        "type": "object",
        "description": "Model defining the payload structure of a Schedule PayCodeEdit custom Update request.",
        "properties": {
          "tenantDefault": {
            "$ref": "#/components/schemas/LocalePolicyTenantDefaultRequest"
          }
        }
      },
      "LocationAttribute": {
        "required": [
          "id",
          "locationAttributeValue",
          "name",
          "version"
        ],
        "type": "object",
        "description": "Model for a location attribute.",
        "properties": {
          "locationAttributeValue": {
            "$ref": "#/components/schemas/LocationAttributeValue"
          },
          "asOfDateLocationAttributeAssignments": {
            "type": "string",
            "description": "The effective date for locations resolving in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "description": {
            "type": "string",
            "description": "The description of a location attribute."
          },
          "version": {
            "type": "integer",
            "description": "The version of a location attribute to allow support for optimistic locking.",
            "format": "int32"
          },
          "locationAttributeAssignments": {
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            },
            "type": "array",
            "description": "A list of references to the assigned locations."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a location attribute.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a location attribute."
          }
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "operator": {
            "enum": [
              "STARTS_WITH",
              "EQUAL_TO",
              "NOT_EQUAL_TO",
              "LIKE"
            ],
            "type": "string"
          },
          "columnName": {
            "enum": [
              "REPORT_JOB_NAME",
              "REPORT_NAME",
              "TYPE",
              "SCHEDULED_BY",
              "RUNNING_AS"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "laborCategoryProfileSortCriteria": {
        "type": "object",
        "description": "The parameters that define sorting behavior.",
        "properties": {
          "sortDirection": {
            "enum": [
              "ascending",
              "descending"
            ],
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        }
      },
      "SchedulingObjectRef": {
        "type": "object",
        "description": "The object reference model which contains an ID and qualifier.",
        "properties": {
          "localizedQualifier": {
            "type": "string",
            "description": "The localized qualifier of an object reference. The value of this property is imported from the Setup Data component by means of an XLS file."
          },
          "qualifier": {
            "type": "string",
            "description": "The qualifier of an object."
          },
          "id": {
            "type": "integer",
            "description": "The unique ID of an object.",
            "format": "int64"
          }
        }
      },
      "LaborCategoryObjectRefs": {
        "type": "object",
        "properties": {
          "refs": {
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Labor_Category_Object_Reference_Setup_Model"
            },
            "type": "array"
          },
          "ids": {
            "uniqueItems": true,
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array"
          },
          "persistentIds": {
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "qualifiers": {
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "TimeIncrementWhere": {
        "type": "object",
        "description": "Time Increment value, which contains Time Increment Resolver value.",
        "properties": {
          "dateRange": {
            "$ref": "#/components/schemas/IaPlatformSearchModelTimeFrame"
          }
        }
      },
      "DataRequest": {
        "type": "object",
        "description": "Aggregated Data Request model.",
        "properties": {
          "count": {
            "type": "integer",
            "description": "<em>[Optional]</em> Requires a value greater than zero. This sets the count of data (rows) per page. For example: If you have 103 rows of data with a count of 10, each page returns 10 rows of data with 3 rows on the last page. This property has no upper limit.",
            "format": "int32"
          },
          "index": {
            "type": "integer",
            "description": "<em>[Optional]</em> An index acts as the page number of the resulting set. For example: 103/10 (103 is the rows of data and 10 is the count) is partitioned into 11 pages. In this example, the index is a value between 0-10.",
            "format": "int32"
          },
          "from": {
            "$ref": "#/components/schemas/From"
          },
          "groupBy": {
            "items": {
              "$ref": "#/components/schemas/DataElementId"
            },
            "type": "array",
            "description": "<em>[Optional]</em> Defines a list of columns for grouping the data elements in the request by means of a list of keys. Each <code>\"key\"</code> is a unique ID of the data element as defined in the Data Dictionary.<code>Note -</code> This field is currently not applicable to Work Unit Views."
          },
          "sortBy": {
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array",
            "description": "<em>[Optional]</em> Contains keys that define sorting behavior for each data element in the request, consisting of the following:<ul><li><code>\"key\"</code>: <em>[Required]</em> a unique ID of the data element as defined in the Data Dictionary.</li><li><code>\"sortDirection\"</code>: <em>[Optional]</em> <code>\"ASC\"</code> or <code>\"DESC\"</code>. Default is <code>\"DESC\"</code>.</li></ul>"
          },
          "where": {
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "type": "array",
            "description": "<p>Consists of keys that define a list of elements and apply filters to each element, consisting of the following:</p><ul><li><code>\"key\"</code>: <em>[Required]</em> A unique ID of the data element as defined in the Data Dictionary.</li><li><code>\"operator\"</code>: <em>[Required]</em> Valid values include:<ul><li>For numeric type elements: EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUAL_TO, LESS_THAN_OR_EQUAL_TO, IS_NULL, IS_NOT_NULL, BETWEEN, NOT_BETWEEN.</li><li>For Boolean type elements: ALL, YES, NO.</li><li>For string type elements: STARTS_WITH, NOT_STARTS, LIKE, NOT_LIKE, IN, NOT_IN, EQUAL_TO, NOT_EQUAL_TO, IS_NULL, IS_NOT_NULL, BETWEEN, NOT_BETWEEN.</li></ul></li><li><code>\"values\"</code> or <code>\"rawValues\"</code>: <em>[Required]</em> A list of values (number, string, or Boolean) to compare:<ul><li>For operators \"BETWEEN\", \"NOT_BETWEEN\": takes two values.</li><li>For operators \"IN\", \"NOT_IN\": takes any number of values.</li><li>For operators \"ALL\", \"YES\", \"NO\": takes no values.</li><li>For all other operators: takes one value.</li></ul></li></ul>"
          },
          "options": {
            "$ref": "#/components/schemas/RequestOptions"
          },
          "select": {
            "items": {
              "$ref": "#/components/schemas/DataElement"
            },
            "type": "array",
            "description": "<em>[Required]</em> A list of data elements for which data is retrieved. Each data element configuration consists of a \"key\", which is a unique ID of the data element as defined in the Data Dictionary."
          }
        }
      },
      "MultiReadTypesByExternalIdRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for an Org Map multi-read effective location types request.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/MultiReadTypesByExternalIdWhere"
          }
        }
      },
      "OrgMapMultipleLocationCopy": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for an Org Map Copy Locations request.",
        "properties": {
          "do": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationCopyTo"
          },
          "where": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationCopyWhere"
          }
        }
      },
      "OrgMapJobsFindWhereForDate": {
        "required": [
          "date"
        ],
        "type": "object",
        "description": "Model containing information related to the searching date",
        "properties": {
          "date": {
            "type": "string",
            "description": "The effective date for the search",
            "format": "date"
          }
        }
      },
      "laborCategoryEntrySortCriteria": {
        "type": "object",
        "description": "The parameters that define sorting behavior.",
        "properties": {
          "sortDirection": {
            "enum": [
              "ascending",
              "descending"
            ],
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        }
      },
      "OrgMapMultipleJobApplyReadRequest": {
        "required": [
          "forLocation"
        ],
        "type": "object",
        "description": "Model for an Org Map Find Generic jobs apply read request.",
        "properties": {
          "forLocation": {
            "$ref": "#/components/schemas/OrgMapMultipleJobApplyReadForLocation"
          }
        }
      },
      "LocalePolicyMultiDeleteRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for a Locale Policy deletion.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/LocalePolicyMultiDeleteWhere"
          }
        }
      },
      "MultiReadTypesByExternalIdResponse": {
        "required": [
          "mappings"
        ],
        "type": "object",
        "description": "Model for an Org Map multi-read effective location types response.",
        "properties": {
          "mappings": {
            "items": {
              "$ref": "#/components/schemas/ExternalLocationTypeMapping"
            },
            "type": "array",
            "description": "The effective location types retrieved."
          }
        }
      },
      "OrgObjectRef": {
        "type": "object",
        "description": "Model for org object references.",
        "properties": {
          "qualifier": {
            "type": "string",
            "description": "The qualifer of an org object."
          },
          "id": {
            "type": "integer",
            "description": "The ID of an org object.",
            "format": "int64"
          }
        }
      },
      "NodeEntity": {
        "type": "object",
        "description": "Response Node Entity",
        "properties": {
          "coreEntityKey": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CoreEntityValue"
            },
            "type": "object",
            "description": "The core node key used to identify an entity."
          },
          "key": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "description": "A unique key used to identify an entity."
          },
          "customProperties": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "description": "Place holder for custom properties returned from domain that are not data elements but are used for building derived attributes."
          },
          "summaryListDisplay": {
            "items": {
              "$ref": "#/components/schemas/SummaryNodeAttributeDTO"
            },
            "type": "array",
            "description": "Display values for summarization such as min, max, avg, and sum."
          },
          "attributes": {
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/DataElementId"
            },
            "type": "array",
            "description": "The node attributes, each of which represents a data element in the Data Dictionary."
          },
          "rootEntity": {
            "$ref": "#/components/schemas/Entity"
          },
          "children": {
            "items": {
              "$ref": "#/components/schemas/NodeEntity"
            },
            "type": "array",
            "description": "A list of child node entities belonging to a parent entity."
          }
        }
      },
      "DataElementDefinition": {
        "required": [
          "categories"
        ],
        "type": "object",
        "description": "A data element is an column of data from the Data Dictionary. The data is provided by data providers.",
        "properties": {
          "deprecated": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not the data element is deprecated."
          },
          "label": {
            "type": "string",
            "description": "A friendly name (description) of a data element."
          },
          "cellLevelActions": {
            "items": {
              "enum": [
                "DEFAULT",
                "UNSUPPORTED"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "The Cell Level Actions associated with a data element."
          },
          "key": {
            "type": "string",
            "description": "A unique key associating a data element with its entry in the Data Dictionary."
          },
          "active": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not the data element is active."
          },
          "dataProvider": {
            "enum": [
              "TK",
              "SCH",
              "ATTENDANCE",
              "PEOPLE",
              "KPI",
              "LEAVE",
              "LOCATION",
              "MOCK_ORG",
              "GROUP_EDIT_RESULT",
              "AUDIT",
              "THIRD_PARTY"
            ],
            "type": "string",
            "description": "A key that identifies the Information Access provider which retrieves data for a data element."
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/DataElementProperty"
            },
            "type": "array",
            "description": "The key or value properties of a data element."
          },
          "categories": {
            "items": {
              "enum": [
                "EMPLOYEE_SUMMARY",
                "KPI",
                "GROUP_EDIT_RESULT",
                "LOCATION",
                "MOCK_DATA",
                "AUDIT",
                "COST_CENTER",
                "EMPLOYEE",
                "TIMEKEEPING",
                "ATTENDANCE_ACTIONS",
                "ATTENDANCE",
                "ATTENDANCE_BALANCE_RESET",
                "ATTENDANCE_BALANCE_UPDATE",
                "ATTENDANCE_DAILY_SUMMARY",
                "ATTENDANCE_DAILY",
                "ATTENDANCE_DISCIPLINE_LEVEL",
                "ATTENDANCE_EVENTS",
                "ATTENDANCE_EXPIRING_POINTS",
                "PERFECT_ATTENDANCE_AWARDS",
                "PERFECT_ATTENDANCE_DEDUCTIONS",
                "PERFECT_ATTENDANCE_DISQUALIFICATION",
                "ATTENDANCE_PERIOD_SUMMARY",
                "ATTENDANCE_PROFILE",
                "LICENSES",
                "GROUP_EDIT",
                "DATA_STATUS",
                "ABSENTEEISM",
                "ACTUAL_VS_SCHEDULE",
                "EXCEPTIONS",
                "NON_PRODUCTIVE",
                "OVERTIME",
                "PRODUCTIVE",
                "REGULAR",
                "ROUNDING_RULES",
                "TRAINING",
                "ACTUAL_TOTALS",
                "APPROVALS",
                "PROJECTED_TOTALS",
                "SCHEDULED_TOTALS",
                "LEAVE",
                "BUSINESS_STRUCTURE",
                "SCHEDULING",
                "SCHEDULE_GROUP",
                "TIMECARD",
                "ACCRUALS",
                "AUDIT_PUNCH",
                "AUDIT_PUNCH_COMMENT",
                "EMPLOYEE_HCM",
                "CALENDAR",
                "STATUTORY_REPORTING",
                "TARGET",
                "MOBILE_APP",
                "FORECASTING",
                "PAID",
                "WORK_AUDIT_ACTIVITY_SEGMENT",
                "WORK_AUDIT_RESULT",
                "WORK_TOTALS",
                "WORK_RAW_INPUT",
                "WORK_RAW_RESULTS",
                "WORK_ACTIVITY_SEGMENT",
                "WORK_RESULT",
                "WORK_ACTIVITY_DEFINITION",
                "WORK_EFFICIENCY",
                "REQUESTS",
                "KIOSK",
                "HEALTHCARE_ANALYTICS",
                "ASSIGNMENT",
                "AUDITOR",
                "UNSUPPORTED",
                "WAGE_WORKRULE_OVERRIDE",
                "ACTIVITY_TEAM",
                "ACTIVITY_TEAM_SEGMENT",
                "ACTIVITY_TEAM_RESULT"
              ],
              "type": "string"
            },
            "type": "array",
            "description": "The classification under which a data element falls."
          },
          "metadata": {
            "$ref": "#/components/schemas/DataElementMetadata"
          }
        }
      },
      "paginationSortFilterCriteria": {
        "type": "object",
        "description": "An entity containing parameters for filtering.",
        "properties": {
          "supportPartialStringMatch": {
            "type": "boolean",
            "description": "The Boolean indicator of whether to enable or disable partial matching. Default value is true."
          },
          "name": {
            "type": "string",
            "description": "The name of an entity."
          },
          "description": {
            "type": "string",
            "description": "The description of an entity."
          }
        }
      },
      "VolumeLabel": {
        "type": "object",
        "description": "Model describing the details of a procedure code/volume label.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of procedure code/volume label.",
            "format": "int64"
          },
          "qualifier": {
            "type": "string",
            "description": "The volume label code of procedure code/volume label."
          },
          "description": {
            "type": "string",
            "description": "The description of procedure code/volume label."
          }
        }
      },
      "OrgMapMultipleLocationMultiReadRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for an Org Map Find Locations multi read request.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationReadWhere"
          },
          "multiReadOptions": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationMultiReadOptions"
          }
        }
      },
      "EntityReference": {
        "type": "object",
        "properties": {
          "refs": {
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            },
            "type": "array"
          },
          "ids": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array"
          },
          "qualifiers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "LocationAttributeWhereCriteria": {
        "required": [
          "locationAttributes"
        ],
        "type": "object",
        "description": "The Location Attributes where object.",
        "properties": {
          "locationAttributes": {
            "$ref": "#/components/schemas/ObjectRefList"
          }
        }
      },
      "DataElementId": {
        "type": "object",
        "description": "DataElementProperty contains key and alias to uniquely identify an element",
        "properties": {
          "alias": {
            "type": "string",
            "description": "A unique identifier set by the caller for each data element."
          },
          "operation": {
            "enum": [
              "SUM",
              "AVG",
              "MIN",
              "MAX",
              "COUNT",
              "UNSUPPORTED"
            ],
            "type": "string"
          },
          "key": {
            "type": "string",
            "description": "A data element key, each of which represents an existing data element in the Data Dictionary."
          }
        }
      },
      "TimeFrameOptions": {
        "type": "object",
        "properties": {
          "timeIncrement": {
            "enum": [
              "DAY",
              "WEEK",
              "MONTH",
              "QUARTER"
            ],
            "type": "string"
          }
        }
      },
      "BasePartialResultForRest": {
        "required": [
          "error",
          "success"
        ],
        "type": "object",
        "description": "Context for base partial response details.",
        "properties": {
          "success": {
            "type": "object",
            "description": "A success body associated with base partial response details."
          },
          "error": {
            "$ref": "#/components/schemas/BaseErrorResultForRest"
          }
        }
      },
      "TileReference": {
        "required": [
          "id"
        ],
        "type": "object",
        "description": "The Tile reference object model.",
        "properties": {
          "qualifier": {
            "type": "string",
            "description": "A tile reference qualifier."
          },
          "originalId": {
            "type": "integer",
            "description": "The original ID of a tile. ID of a tile will be replaced with Admin ID and this field holds the replaced ID.",
            "format": "int64"
          },
          "baseTileId": {
            "type": "integer",
            "description": "The base tile ID of a tile. It is the id of an Admin tile where the tile personalized from.",
            "format": "int64"
          },
          "label": {
            "type": "string",
            "description": "The label of a tile. Labels can be localized. This field is retrieved when requested for reference extensions."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a tile.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a tile. This field is retrieved when requested for reference extensions."
          }
        }
      },
      "DerivedLocaleSettings": {
        "type": "object",
        "properties": {
          "timeAmMarker": {
            "type": "string"
          },
          "timePmMarker": {
            "type": "string"
          },
          "spanCharacter": {
            "type": "string"
          },
          "timeSeparator": {
            "type": "string"
          },
          "spanSeparator": {
            "type": "string"
          },
          "dateTimeSeparator": {
            "type": "string"
          }
        }
      },
      "Sort": {
        "type": "object",
        "properties": {
          "columnName": {
            "enum": [
              "REPORT_JOB_NAME",
              "REPORT_NAME",
              "TYPE",
              "SCHEDULED_BY",
              "RUNNING_AS"
            ],
            "type": "string"
          },
          "sortDirection": {
            "enum": [
              "ASC",
              "DESC"
            ],
            "type": "string"
          }
        }
      },
      "LocationAttributeAssignmentRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model of request used for Location Attribute Assignment operations.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/LocationAttributeAssignmentWhereCriteria"
          }
        }
      },
      "OrgMapGroup": {
        "required": [
          "goldData",
          "includeAllEnabled",
          "name",
          "nodeJobs",
          "nodeRefs",
          "persistentId",
          "typeId",
          "versionCount"
        ],
        "type": "object",
        "description": "Model for a location set, which is also known as an org map group.",
        "properties": {
          "typeId": {
            "type": "integer",
            "description": "The type ID of a location set type.",
            "format": "int64"
          },
          "nodeJobs": {
            "items": {
              "$ref": "#/components/schemas/OrgMapGroupNodeJobs"
            },
            "type": "array",
            "description": "A list of node job references."
          },
          "description": {
            "type": "string",
            "description": "The description of a location set."
          },
          "nodeRefs": {
            "items": {
              "$ref": "#/components/schemas/OrgObjectRef"
            },
            "type": "array",
            "description": "A list of node references of a location set."
          },
          "goldData": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not an org map group is gold data. Org map groups are also known as business structure location sets."
          },
          "versionCount": {
            "type": "integer",
            "description": "The version count of a location set.",
            "format": "int64"
          },
          "includeAllEnabled": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to include all enabled locations."
          },
          "nodeRefsTree": {
            "$ref": "#/components/schemas/TreeNode"
          },
          "updateDateTime": {
            "type": "string",
            "description": "The date and time of the most recent update to a location set."
          },
          "persistentId": {
            "type": "string",
            "description": "The persistent ID of a location set."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a location set.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a location set."
          }
        }
      },
      "OrgMapMultipleLocationTypeFindWhereSpan": {
        "required": [
          "context",
          "endDate",
          "startDate"
        ],
        "type": "object",
        "description": "Model containing information related to the searching date span.",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The effective start date of a search.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The effective end date of a search.",
            "format": "date"
          },
          "context": {
            "enum": [
              "ORG",
              "FORECAST"
            ],
            "type": "string",
            "description": "This parameter indicates whether the search context is org or forecast."
          }
        }
      },
      "DataView": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "currencyType": {
            "enum": [
              "PREFERRED_CURRENCY",
              "ASSIGNED_CURRENCY"
            ],
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "type": {
            "enum": [
              "LOCATION",
              "EMPLOYEE",
              "EMP_TIME_SERIES",
              "ORGANIZATION_TIME_SERIES"
            ],
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "columns": {
            "items": {
              "$ref": "#/components/schemas/DataViewColumn"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OrgMapJobsFindWhereAllJobsBySpan": {
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object",
        "description": "Model containing information related to the searching date span",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The effective date for the search",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The effective date for the search",
            "format": "date"
          }
        }
      },
      "IaPlatformSearchModelTimeFrame": {
        "type": "object",
        "description": "The timeframe, provided as a TimeframeId or a range with start and end dates.",
        "properties": {
          "symbolicPeriod": {
            "$ref": "#/components/schemas/IA_Object_Reference"
          },
          "endDate": {
            "type": "string"
          },
          "options": {
            "$ref": "#/components/schemas/TimeFrameOptions"
          },
          "startDate": {
            "type": "string"
          }
        }
      },
      "LaborCategoryWhereRequest": {
        "type": "object",
        "description": "Model for labor category 'where' request criteria.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/LaborCategoryWhere"
          }
        }
      },
      "HyperfindQueryList": {
        "type": "object",
        "description": "The Hyperfind query list model.",
        "properties": {
          "hyperfindQueries": {
            "xml": {
              "name": "hyperfindquery"
            },
            "items": {
              "$ref": "#/components/schemas/HyperfindQueryForList"
            },
            "type": "array",
            "description": "An array of references to Hyperfind queries."
          }
        }
      },
      "BaseCurrency": {
        "type": "object",
        "description": "The DTO for a currency policy data request.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/BaseCurrency"
          }
        }
      },
      "LocationAttributeValue": {
        "required": [
          "startDayOfWeek"
        ],
        "type": "object",
        "description": "The location attribute value model.",
        "properties": {
          "generateVolumeIntervals": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to generate volume intervals."
          },
          "startDayOfWeek": {
            "$ref": "#/components/schemas/ObjectRef"
          }
        }
      },
      "ILaborCategoryListUpdateService": {
        "type": "object"
      },
      "OrgMapMultipleLocationTypeReadRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Model for Scheduling multi-read requests.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationTypeReadWhere"
          },
          "multiReadOptions": {
            "$ref": "#/components/schemas/OrgMapMultipleLocationTypeMultiReadOptions"
          }
        }
      },
      "HyperFindObjectRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "localizedQualifier": {
            "type": "string"
          },
          "qualifier": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "LocalePolicyMultiReadWhere": {
        "type": "object",
        "description": "Model for criteria related to Locale Policy multi-read requests.",
        "properties": {
          "sdmKeys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A list of locale policy Setup Data Manager (SDM) keys."
          },
          "displayNames": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A list of locale policy display names."
          },
          "names": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A list of locale policy names."
          },
          "localePolicyIds": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "A list of locale policy IDs."
          }
        }
      },
      "ConstraintList": {
        "type": "object",
        "description": "The model context for a list of constraints.",
        "properties": {
          "filters": {
            "items": {
              "$ref": "#/components/schemas/Constraint"
            },
            "type": "array",
            "description": "The list of constraints, also known as filters."
          },
          "comparator": {
            "enum": [
              "OR",
              "AND",
              "NOT"
            ],
            "type": "string",
            "description": "The operator used between different constraints."
          }
        }
      },
      "DataElementProperty": {
        "type": "object",
        "description": "Data Element Key/Value Pair",
        "properties": {
          "sdmKey": {
            "type": "string",
            "description": "The Setup Data Manager (SDM) key associated with a data element in the Data Dictionary."
          },
          "key": {
            "type": "string",
            "description": "Each data element key represents an existing data element in the Data Dictionary."
          },
          "value": {
            "type": "string",
            "description": "The value associated with a data element key, which represents an existing data element in the Data Dictionary."
          }
        }
      },
      "MultiDeleteLocationSets": {
        "type": "object",
        "description": "Criterias definition of a multi delete Locations sets request. Only 1 criteria can be specified per request.",
        "properties": {
          "refs": {
            "items": {
              "$ref": "#/components/schemas/OrgObjectRef"
            },
            "type": "array",
            "description": "A list of location set references."
          },
          "ids": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "A list of location set identifier."
          },
          "qualifiers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A list of location set qualifiers."
          }
        }
      },
      "Locale": {
        "type": "object",
        "properties": {
          "unicodeLocaleAttributes": {
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "iso3Country": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "script": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "displayCountry": {
            "type": "string"
          },
          "displayLanguage": {
            "type": "string"
          },
          "variant": {
            "type": "string"
          },
          "unicodeLocaleKeys": {
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "displayScript": {
            "type": "string"
          },
          "displayVariant": {
            "type": "string"
          },
          "iso3Language": {
            "type": "string"
          },
          "extensionKeys": {
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "DataElement": {
        "type": "object",
        "description": "Data Element",
        "properties": {
          "alias": {
            "type": "string",
            "description": "A unique identifier set by the caller for each data element."
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/DataElementProperty"
            },
            "type": "array",
            "description": "A list of data element properties."
          },
          "key": {
            "type": "string",
            "description": "A data element key, each of which represents an existing data element in the Data Dictionary."
          }
        }
      },
      "ObjectRef": {
        "type": "object",
        "description": "The object reference model which contains an ID and qualifier.",
        "properties": {
          "qualifier": {
            "type": "string",
            "description": "The qualifier of an object."
          },
          "id": {
            "type": "integer",
            "description": "The unique ID of an object.",
            "format": "int64"
          }
        }
      },
      "laborCategoryEntryListFilterCriteria": {
        "type": "object",
        "description": "An entity containing parameters for filtering.",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of an entity."
          },
          "supportPartialStringMatch": {
            "type": "boolean",
            "description": "The Boolean indicator of whether to enable or disable partial matching. Default value is true."
          },
          "systemAllEntriesList": {
            "type": "boolean",
            "description": "The Boolean indicator of whether to load system lists or not."
          },
          "includesWildcard": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to load lists with wildcards."
          },
          "name": {
            "type": "string",
            "description": "The name of an entity."
          }
        }
      },
      "ProfileMultiReadRef": {
        "type": "object",
        "properties": {
          "refs": {
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            },
            "type": "array"
          },
          "ids": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array"
          },
          "persistentIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "qualifiers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "BaseResponseDetailsForRest": {
        "required": [
          "error-offsets",
          "results"
        ],
        "type": "object",
        "description": "Context for base response details.",
        "properties": {
          "error-offsets": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "The error offsets associated with base response details."
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/BasePartialResultForRest"
            },
            "type": "array",
            "description": "The results associated with base response details."
          },
          "extra-details": {
            "$ref": "#/components/schemas/ExtraDetailsForRest"
          }
        }
      },
      "DataViewKey": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of a dataview"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a dataview",
            "format": "int64"
          }
        }
      },
      "ExternalPath": {
        "required": [
          "externalId",
          "localPath"
        ],
        "type": "object",
        "description": "Pair of external id and optional path of a location.",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "The external ID of a location."
          },
          "localPath": {
            "type": "string",
            "description": "An optional relative path to child of a location."
          }
        }
      },
      "BitSet": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        }
      },
      "Known_Place_Response": {
        "required": [
          "accuracy",
          "active",
          "id",
          "latitude",
          "longitude",
          "name",
          "radius",
          "validationOrder",
          "version"
        ],
        "type": "object",
        "description": "Known Place response model.",
        "properties": {
          "wifiNetworks": {
            "type": "array",
            "description": "A list of WiFi networks associated with a Known Place.",
            "items": {
              "$ref": "#/components/schemas/Wi-Fi_Network"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of a Known Place."
          },
          "validationOrder": {
            "type": "array",
            "description": "An array defining the location validation order of a Known Place which supports two values: WIFI and GPS. The user's location is validated based on the prioritized order of this array.",
            "items": {
              "type": "string"
            }
          },
          "multiFactor": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a Known Place supports multi_factor."
          },
          "locations": {
            "type": "array",
            "description": "A list of locations associated with a Known Place.",
            "items": {
              "$ref": "#/components/schemas/Location_Response"
            }
          },
          "longitude": {
            "type": "number",
            "description": "The longitude associated with a Known Place.",
            "format": "double"
          },
          "name": {
            "type": "string",
            "description": "The name of a Known Place."
          },
          "active": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a Known Place is active."
          },
          "version": {
            "type": "integer",
            "description": "The version of a Known Place.",
            "format": "int64"
          },
          "radius": {
            "type": "integer",
            "description": "The radius of a Known Place.",
            "format": "int32"
          },
          "latitude": {
            "type": "number",
            "description": "The latitude associated with a Known Place.",
            "format": "double"
          },
          "persistentId": {
            "type": "string",
            "description": "@v1.0.knownplace.apimodel.request.property.persistentid.description"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a Known Place.",
            "format": "int64"
          },
          "accuracy": {
            "type": "integer",
            "description": "The GPS accuracy of a Known Place.",
            "format": "int32"
          }
        }
      },
      "Multi_Read_Request_for_hyperfind_query_Profiles": {
        "type": "object",
        "description": "Retrieve Attendance Profiles request payload model.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/Multi_Read_Criteria_to_fetch_hyperfind_query_profile."
          }
        }
      },
      "Labor_Category_Entry_List_Model": {
        "type": "object",
        "description": "Entity containing necessary data to fetch and update a labor category entry list.",
        "properties": {
          "systemAllEntriesList": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "description": "A description of the labor category entry list."
          },
          "entryList": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
            },
            "type": "array",
            "description": "A list of references to labor category entries."
          },
          "entryListWildcard": {
            "type": "string",
            "description": "The entry list wildcard of a labor category entry list."
          },
          "updateDtm": {
            "type": "string",
            "description": "The date and time the object was last updated."
          },
          "version": {
            "type": "integer",
            "description": "The current version of the entity. This is used to ensure that an entity is not updated with stale data.",
            "format": "int64"
          },
          "entryListNames": {
            "type": "string",
            "description": "The first two names and the total count of entries associated with the labor category entry list."
          },
          "laborCategory": {
            "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a labor category entry list.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a labor category entry list."
          }
        }
      },
      "Labor_Category_Object_Reference_Setup_Model": {
        "type": "object",
        "description": "An entity representing a reference to an entity in the Labor Category domain.",
        "properties": {
          "qualifier": {
            "type": "string",
            "description": "The name of a labor category object reference."
          },
          "description": {
            "type": "string"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int64"
          },
          "resolvedByWildcard": {
            "type": "boolean"
          },
          "ivrNum": {
            "type": "string"
          },
          "persistentId": {
            "type": "string",
            "description": "The persistent ID of a labor category object reference."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a labor category object reference.",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Pagination_Response_for_Labor_Category_Entry_Lists": {
        "type": "object",
        "description": "Model describing the details of pagination response of a work unit Hyperfind Profile.",
        "properties": {
          "totalRecords": {
            "type": "integer",
            "description": "The total count of entries which match the filter.",
            "format": "int32"
          },
          "records": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_Entry_List_Model"
            },
            "type": "array",
            "description": "The collection of entries for one page."
          }
        }
      },
      "Known_Place_Request": {
        "required": [
          "accuracy",
          "active",
          "id",
          "latitude",
          "longitude",
          "name",
          "radius",
          "validationOrder",
          "version"
        ],
        "type": "object",
        "description": "Known Place request model.",
        "properties": {
          "wifiNetworks": {
            "type": "array",
            "description": "A list of WiFi networks associated with a Known Place.",
            "items": {
              "$ref": "#/components/schemas/Wi-Fi_Network"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of a Known Place."
          },
          "validationOrder": {
            "type": "array",
            "description": "An array defining the location validation order of a Known Place which supports two values: WIFI and GPS. The user's location is validated based on the prioritized order of this array.",
            "items": {
              "type": "string"
            }
          },
          "multiFactor": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a Known Place supports multi_factor."
          },
          "locations": {
            "type": "array",
            "description": "A list of locations associated with a Known Place.",
            "items": {
              "$ref": "#/components/schemas/Location_Request"
            }
          },
          "longitude": {
            "type": "number",
            "description": "The longitude associated with a Known Place.",
            "format": "double"
          },
          "name": {
            "type": "string",
            "description": "The name of a Known Place."
          },
          "active": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a Known Place is active."
          },
          "rankingQR": {
            "type": "integer",
            "description": "The ranking QR of Known Place.",
            "format": "int32"
          },
          "version": {
            "type": "integer",
            "description": "The version of a Known Place.",
            "format": "int64"
          },
          "radius": {
            "type": "integer",
            "description": "The radius of a Known Place.",
            "format": "int32"
          },
          "latitude": {
            "type": "number",
            "description": "The latitude associated with a Known Place.",
            "format": "double"
          },
          "persistentId": {
            "type": "string",
            "description": "@v1.0.knownplace.apimodel.request.property.persistentid.description"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a Known Place.",
            "format": "int64"
          },
          "accuracy": {
            "type": "integer",
            "description": "The GPS accuracy of a Known Place.",
            "format": "int32"
          }
        }
      },
      "Multi_Read_References_which_contains_actual_criterias": {
        "type": "object",
        "description": "Retrieve Attendance Profiles object reference model.",
        "properties": {
          "refs": {
            "items": {
              "$ref": "#/components/schemas/ObjectRef_Entity"
            },
            "type": "array",
            "description": "An array of references to attendance profiles."
          },
          "ids": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "An array of IDs of attendance profiles."
          },
          "persistentIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "An array of persistent IDs of attendance profiles."
          },
          "qualifiers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "An array of qualifiers of attendance profiles."
          }
        }
      },
      "Pagination_Response_for_Labor_Category_Profiles_with_entry": {
        "type": "object",
        "description": "Model describing the details of pagination response of a work unit Hyperfind Profile.",
        "properties": {
          "totalRecords": {
            "type": "integer",
            "description": "The total count of entries which match the filter.",
            "format": "int32"
          },
          "records": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_Profile_Model"
            },
            "type": "array",
            "description": "The collection of entries for one page."
          }
        }
      },
      "Pagination_Response_for_Labor_Category_Entries": {
        "type": "object",
        "description": "Model describing the details of pagination response of a work unit Hyperfind Profile.",
        "properties": {
          "totalRecords": {
            "type": "integer",
            "description": "The total count of entries which match the filter.",
            "format": "int32"
          },
          "records": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_Entry_Model"
            },
            "type": "array",
            "description": "The collection of entries for one page."
          }
        }
      },
      "Labor_Category_Entry_List_Effective_Versions_Apply_Upsert_Model": {
        "type": "object",
        "description": "The Labor Category Entry List Effective Versions Apply Upsert Model.",
        "properties": {
          "delete": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_List_Effective_Version_Model"
            },
            "type": "array",
            "description": "A list of Labor Category Entry List Effective Version to delete."
          },
          "upsert": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_List_Effective_Version_Model"
            },
            "type": "array",
            "description": "A list of Labor Category Entry List Effective Version to add or update."
          }
        }
      },
      "Known_Place_Id_List": {
        "required": [
          "ids"
        ],
        "type": "object",
        "description": "Known Place ID List",
        "properties": {
          "ids": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "Known Place IDs"
          }
        }
      },
      "Known_Place_Multi_Delete_Request_Where": {
        "required": [
          "knownPlaces"
        ],
        "type": "object",
        "description": "Known Place Multi Delete Request Where object encapsulates Known Place ID List for deletion.",
        "properties": {
          "knownPlaces": {
            "$ref": "#/components/schemas/Known_Place_Id_List"
          }
        }
      },
      "Hyperfind_Parameters": {
        "type": "object",
        "description": "The parameters which are used by the Hyperfind query executer while executing the query.",
        "properties": {
          "dateRange": {
            "$ref": "#/components/schemas/Date_Span"
          },
          "locations": {
            "items": {
              "$ref": "#/components/schemas/Generic_Object"
            },
            "type": "array",
            "description": "A list of locations required when the Hyperfind is a session-based \"Ad hoc Locations\" query."
          },
          "persons": {
            "items": {
              "$ref": "#/components/schemas/Generic_Object"
            },
            "type": "array",
            "description": "A list of persons required when the Hyperfind is a session-based \"people or employee ID\" query."
          },
          "isEmployee": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not the Hyperfind requires returned employees have an assigned pay rule ID."
          },
          "threshold": {
            "type": "integer",
            "description": "<p>The maximum number of employees returned by the executor. Exceeding this number throws an exception. The default threshold limits the number of returned employees to 3,500. Use the threshold property to define a higher limit of up to 50,000 employees.<p><em><strong>Note:</strong> The default limit helps ensure performance. Increasing the threshold may decrease performance.</em></p>",
            "format": "int32"
          },
          "validateAccessForPrivateHF": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to validate access for private Hyperfind queries."
          },
          "includeTerminatedInRangeForLocations": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to include terminated employees in the date range for locations."
          },
          "hyperfind": {
            "$ref": "#/components/schemas/Generic_Object"
          }
        }
      },
      "Generic_Object": {
        "type": "object",
        "description": "Model for generic object references.",
        "properties": {
          "qualifier": {
            "type": "string",
            "description": "The qualifier of the reference object."
          },
          "id": {
            "type": "integer",
            "description": "The ID of the reference object.",
            "format": "int64"
          }
        }
      },
      "Hyperfind_Result": {
        "required": [
          "count",
          "result"
        ],
        "type": "object",
        "description": "The result returned by the executor on running the query.",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of employees returned by the exeutor on running the query.",
            "format": "int64"
          },
          "result": {
            "$ref": "#/components/schemas/Person_Reference_Object"
          }
        }
      },
      "Wi-Fi_Network": {
        "required": [
          "essid",
          "id",
          "name",
          "version"
        ],
        "type": "object",
        "description": "WiFi Network model.",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of a WiFi Network."
          },
          "wifiAccessPoints": {
            "type": "array",
            "description": "The WiFi Access Points assigned to the WiFi Network.",
            "items": {
              "$ref": "#/components/schemas/Wi-Fi_Access_Point"
            }
          },
          "qualifier": {
            "type": "string",
            "description": "The qualifier of a WiFi Network (optional)."
          },
          "version": {
            "type": "integer",
            "description": "The version of a WiFi Network (internal).",
            "format": "int32"
          },
          "essid": {
            "type": "string",
            "description": "The ESSID of a WiFi Network."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a WiFi Network.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a WiFi Network."
          }
        }
      },
      "Known_Place_Multi_Get_Request": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "The Known Place multi_read model.",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/Known_Place_Multi_Get_Request_Where"
          }
        }
      },
      "Labor_Category_Entry_List_With_Versions_Model": {
        "type": "object",
        "description": "The Labor Category Entry List With Effective Versions Model.",
        "properties": {
          "systemAllEntriesList": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "description": "The name of a labor category entry list."
          },
          "locationDates": {
            "items": {
              "$ref": "#/components/schemas/SDMLocationDate"
            },
            "type": "array"
          },
          "entryList": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
            },
            "type": "array"
          },
          "hasMultipleVersions": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not this labor category entry list has multiple effective versions."
          },
          "entryListWildcard": {
            "type": "string"
          },
          "updateDtm": {
            "type": "string",
            "description": "The date and time the object was last updated."
          },
          "version": {
            "type": "integer",
            "description": "The current version of the entity. This is used to ensure that an entity is not updated with stale data.",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a labor category entry list.",
            "format": "int64"
          },
          "laborCategory": {
            "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
          },
          "effectiveVersions": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_List_Effective_Version_Model"
            },
            "type": "array",
            "description": "The list of labor category entry list effective versions."
          },
          "description": {
            "type": "string",
            "description": "A description of the labor category entry list."
          }
        }
      },
      "Labor_Category_Entry_Model": {
        "type": "object",
        "description": "Model for labor category entry.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a labor category entry."
          },
          "inactive": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a labor category is inactive."
          },
          "version": {
            "type": "integer",
            "description": "The current version of the entity. This is used to ensure that an entity is not updated with stale data.",
            "format": "int64"
          },
          "ivrNum": {
            "type": "string",
            "description": "The TeleTime IP alias."
          },
          "laborCategory": {
            "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
          },
          "persistentId": {
            "type": "string",
            "description": "The persistent ID of a labor category entry."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a labor category entry.",
            "format": "int64"
          },
          "description": {
            "type": "string",
            "description": "The description of a labor category entry."
          }
        }
      },
      "Date_Span": {
        "type": "object",
        "description": "Custom date span which is used by Hyperfind constraints for filtering results.",
        "properties": {
          "symbolicPeriod": {
            "$ref": "#/components/schemas/Generic_Object"
          },
          "endDate": {
            "type": "string",
            "description": "The end date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          }
        }
      },
      "Labor_Category_List_Assignment_Request_Data_Model": {
        "type": "object",
        "description": "Entity containing necessary data to retrieve and update a labor category list assignment.",
        "properties": {
          "orgNode": {
            "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
          },
          "inheritAncestorAssignments": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to include assignments based on the nodes' ancestors."
          },
          "asOfDate": {
            "type": "string",
            "description": "The date of the assignment."
          }
        }
      },
      "IA_Entity_Definition_Model": {
        "required": [
          "active",
          "entityDefinition",
          "id",
          "key",
          "label",
          "type"
        ],
        "type": "object",
        "description": "Model for Entity Definition",
        "properties": {
          "entityDefinition": {
            "$ref": "#/components/schemas/Entity_Definition_Model"
          },
          "label": {
            "type": "string",
            "description": "The localised name of an entity definition."
          },
          "key": {
            "type": "string",
            "description": "The key associated with each entity definition. The combination of a key with an ID should always be unique to identify an entity definition."
          },
          "active": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not an entity definition is active."
          },
          "type": {
            "type": "string",
            "description": "The view type of an entity definition, such as EMP for employee view."
          },
          "id": {
            "type": "integer",
            "description": "The ID associated with each entity definition. The combination of an ID with a key should always be unique to identify an entity definition.",
            "format": "int64"
          }
        }
      },
      "Labor_Category_Object_Reference_Model": {
        "type": "object",
        "description": "Entity representing a reference to an entity in the Labor Category domain.",
        "properties": {
          "qualifier": {
            "type": "string",
            "description": "The name of a labor category object reference."
          },
          "description": {
            "type": "string"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int64"
          },
          "resolvedByWildcard": {
            "type": "boolean"
          },
          "ivrNum": {
            "type": "string"
          },
          "persistentId": {
            "type": "string",
            "description": "The persistent ID of a labor category object reference."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a labor category object reference.",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "IA_Object_Reference": {
        "type": "object",
        "description": "Model for Information Access object reference.",
        "properties": {
          "qualifier": {
            "type": "string",
            "description": "The qualifying name of the entity being referred by the object."
          },
          "id": {
            "type": "string",
            "description": "The ID of the entity being referred by the object."
          }
        }
      },
      "Labor_Category_Profile_Model": {
        "type": "object",
        "description": "Entity containing necessary data to retrieve and update a labor category profile.",
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of the labor category profile."
          },
          "name": {
            "type": "string",
            "description": "The name of a labor category profile."
          },
          "version": {
            "type": "integer",
            "description": "The current version of the entity. This is used to ensure that an entity is not updated with stale data.",
            "format": "int64"
          },
          "entryLists": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_Entry_List_Model"
            },
            "type": "array",
            "description": "A reference to the associated labor category list"
          },
          "entryListNames": {
            "type": "string",
            "description": "The first two names and the total count of labor category list associated with the labor category profile."
          },
          "persistentId": {
            "type": "string",
            "description": "The persistent ID of a labor category profile."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a labor category profile.",
            "format": "int64"
          },
          "updateDtm": {
            "type": "string",
            "description": "The date and time the object was last updated."
          }
        }
      },
      "Wi-Fi_Access_Point": {
        "required": [
          "bssid",
          "id",
          "name",
          "version"
        ],
        "type": "object",
        "description": "WiFi Access Point model.",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of a WiFi Access Point."
          },
          "bssid": {
            "type": "string",
            "description": "The BSSID of a WiFi Access Point."
          },
          "name": {
            "type": "string",
            "description": "The name of a WiFi Access Point."
          },
          "version": {
            "type": "integer",
            "description": "The version of a WiFi Access Point (internal).",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a WiFi Access Point.",
            "format": "int64"
          },
          "qualifier": {
            "type": "string",
            "description": "The qualifier (optional) of a WiFi Access Point."
          }
        }
      },
      "Location_Response": {
        "required": [
          "id",
          "orgPath"
        ],
        "type": "object",
        "description": "Location Response object",
        "properties": {
          "orgPath": {
            "type": "string",
            "description": "Location Organizational Path"
          },
          "id": {
            "type": "integer",
            "description": "Location ID",
            "format": "int64"
          }
        }
      },
      "Currency_policy_configuration": {
        "type": "object",
        "description": "DTO for Currency policy configuration.",
        "properties": {
          "exchangeRates": {
            "items": {
              "$ref": "#/components/schemas/Exchange_Rate_configuration"
            },
            "type": "array",
            "description": "A list of exchange rate models."
          },
          "initialExchangeRate": {
            "type": "number",
            "description": "The initial or default exchange rate of a currency policy.",
            "format": "double"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a currency.",
            "format": "int64"
          },
          "baseCurrency": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a currency is the base currency."
          },
          "currencyCode": {
            "type": "string",
            "description": "The three digit ISO currency code."
          }
        }
      },
      "Known_Place_Multi_Delete_Request": {
        "required": [
          "where"
        ],
        "type": "object",
        "description": "Known Place Multi Delete Request",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/Known_Place_Multi_Delete_Request_Where"
          }
        }
      },
      "Labor_Category_Entry_ListAssignment_Model": {
        "type": "object",
        "description": "Entity used for associating a labor category entry list with an organization node.",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "description": "The effective date of the association between a labor category entry list and an organization node. An effective date represents the date the association became active.",
            "format": "date"
          },
          "version": {
            "type": "integer",
            "description": "The current version of the entity. This is used to ensure that an entity is not updated with stale data.",
            "format": "int64"
          },
          "expirationDate": {
            "type": "string",
            "description": "The date the association between a labor category entry list and an organization node ceases to be active.",
            "format": "date"
          },
          "laborCategoryList": {
            "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
          },
          "orgNode": {
            "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a labor category entry list assignment.",
            "format": "int64"
          },
          "laborCategory": {
            "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
          }
        }
      },
      "ObjectRef_Entity": {
        "type": "object",
        "description": "ObjectRef contains an id and qualifier and either field should be able to uniquely identify an Object",
        "properties": {
          "qualifier": {
            "type": "string",
            "description": "Object Ref Unique qualifier"
          },
          "id": {
            "type": "integer",
            "description": "Object Ref Id",
            "format": "int64"
          }
        }
      },
      "Exchange_Rate_configuration": {
        "type": "object",
        "description": "DTO for Exchange Rate.",
        "properties": {
          "exchangeRate": {
            "type": "number",
            "description": "The value of an exchange rate for a given period.",
            "format": "double"
          },
          "expirationDate": {
            "type": "string",
            "description": "The end date of an exchange rate in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "effectiveDate": {
            "type": "string",
            "description": "The start date of an exchange rate in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          }
        }
      },
      "Multi_Read_Criteria_to_fetch_hyperfind_query_profile.": {
        "type": "object",
        "description": "Retrieve Attendance Profiles request payload model.",
        "properties": {
          "allDetails": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not the response returns all details of each attendance profile. When false, the response returns only the ID and name of each attendance profile."
          },
          "usageType": {
            "type": "string",
            "description": "The usage type of a Hyperfind query, which filters the results. Valid values include HOME, REGULAR, or ALL. The default value is HOME."
          },
          "hyperFindQuery": {
            "$ref": "#/components/schemas/Multi_Read_References_which_contains_actual_criterias"
          }
        }
      },
      "Labor_Category_List_Effective_Version_Model": {
        "type": "object",
        "description": "The Labor Category List Effective Version Model.",
        "properties": {
          "entryListWildcard": {
            "type": "string",
            "description": "The entry list wildcard of a labor category entry list."
          },
          "entryList": {
            "items": {
              "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
            },
            "type": "array",
            "description": "A list of references to labor category entries."
          },
          "effectiveDate": {
            "type": "string",
            "description": "The effective date of a Labor Category Entry List Effective Version in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date of a Labor Category Entry List Effective Version in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          }
        }
      },
      "HyperFind_Profile": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "description": "Hyperfind Profile model context",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of a Hyperfind profile.",
            "format": "int64"
          },
          "hyperFindProfiles": {
            "items": {
              "$ref": "#/components/schemas/HyperFindObjectRef"
            },
            "type": "array"
          },
          "name": {
            "type": "string",
            "description": "The name of a Hyperfind profile."
          },
          "description": {
            "type": "string",
            "description": "The description of a Hyperfind profile."
          }
        }
      },
      "Person_Reference_Object": {
        "required": [
          "basePersons",
          "refs"
        ],
        "type": "object",
        "description": "The result returned by the executor on running the query.",
        "properties": {
          "basePersons": {
            "items": {
              "$ref": "#/components/schemas/Base_Person_Response"
            },
            "type": "array",
            "description": "The list of base persons returned by the executor."
          },
          "refs": {
            "items": {
              "$ref": "#/components/schemas/Generic_Object"
            },
            "type": "array",
            "description": "The list of references returned by the executor."
          }
        }
      },
      "Visisbility_Combo": {
        "type": "object",
        "description": "Visibility type describes the visibility of a Hyperfind.",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Labor_Category_Model": {
        "type": "object",
        "description": "Entity containing necessary data to fetch and update a labor category.",
        "properties": {
          "minNameLength": {
            "type": "integer",
            "description": "The minimum length for entries in this category.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of a labor category."
          },
          "abbrev": {
            "type": "string",
            "description": "The short name for a labor category."
          },
          "maxNameLength": {
            "type": "integer",
            "description": "The maximum length for entries in this category.",
            "format": "int32"
          },
          "inactive": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a labor category is inactive."
          },
          "sortOrder": {
            "type": "integer",
            "description": "The order in which entries appear for this category in a labor transfer string.",
            "format": "int64"
          },
          "version": {
            "type": "integer",
            "description": "The current version of the entity. This is used to ensure that an entity is not updated with stale data.",
            "format": "int64"
          },
          "persistentId": {
            "type": "string",
            "description": "The persistent ID of a labor category."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a labor category.",
            "format": "int64"
          }
        }
      },
      "Location_Request": {
        "required": [
          "id",
          "qualifier"
        ],
        "type": "object",
        "description": "Location Request object",
        "properties": {
          "qualifier": {
            "type": "string",
            "description": "Location qualifier"
          },
          "id": {
            "type": "integer",
            "description": "Location ID",
            "format": "int64"
          }
        }
      },
      "Base_Person_Response": {
        "type": "object",
        "description": "Person details of Hyperfind response.",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "The person ID of an employee.",
            "format": "int64"
          },
          "personNumber": {
            "type": "string",
            "description": "A unique identifier for a person. This is not an employee ID."
          },
          "fullName": {
            "type": "string",
            "description": "The full name of an employee."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of an employee."
          }
        }
      },
      "Known_Place_Multi_Get_Request_Where": {
        "required": [
          "knownPlaces",
          "orgJobs"
        ],
        "type": "object",
        "description": "The where criteria of a Known Place multi_read request.",
        "properties": {
          "orgJobs": {
            "$ref": "#/components/schemas/ObjectRefList"
          },
          "knownPlaces": {
            "$ref": "#/components/schemas/KnownPlaceObjectRefList"
          }
        }
      },
      "Entity_Definition_Model": {
        "required": [
          "children",
          "coreEntityRelations",
          "entity",
          "joinCondition"
        ],
        "type": "object",
        "description": "Model for Entity Definition",
        "properties": {
          "coreEntityRelations": {
            "additionalProperties": {
              "uniqueItems": true,
              "items": {
                "enum": [
                  "EMP",
                  "ORG",
                  "DAY",
                  "ORGJOB",
                  "PAYCODE",
                  "LABORCATEGORY",
                  "AVAILABILITY_TYPE",
                  "ACTIVITY",
                  "SCH_ZONE",
                  "SCH_JOB_GROUP",
                  "ACTIVITY_TEAM",
                  "WORKUNIT",
                  "WORKGROUP",
                  "PROCEDURE_CODE",
                  "ASSIGNMENT",
                  "TEMP"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "type": "object",
            "description": "The core entity relations associated with an entity."
          },
          "entity": {
            "$ref": "#/components/schemas/Entity"
          },
          "children": {
            "additionalProperties": {
              "uniqueItems": true,
              "items": {
                "$ref": "#/components/schemas/IEntityDefinition"
              },
              "type": "array"
            },
            "type": "object",
            "description": "The children of an entity."
          },
          "dataSourceId": {
            "type": "string",
            "description": "The ID of a data source associated with an entity."
          },
          "dataSource": {
            "type": "string",
            "description": "The data source associated with an entity."
          },
          "joinCondition": {
            "enum": [
              "CORE_ENTITY_MATCH",
              "SAME_ENTITY_GRAPH_ID_MATCH",
              "CORE_ENTITY_ORG_JOB_MATCH",
              "UNSUPPORTED"
            ],
            "type": "string",
            "description": "The join condition associated with an entity."
          },
          "serviceLimitProperty": {
            "type": "string",
            "description": "The service limit property associated with an entity."
          }
        }
      },
      "Labor_Category_Entry_List_With_Versions_Apply_Upsert_Model": {
        "type": "object",
        "description": "The Labor Category Entry List With Versions Apply Upsert Model.",
        "properties": {
          "systemAllEntriesList": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "description": "A description of the labor category entry list."
          },
          "effectiveVersions": {
            "$ref": "#/components/schemas/Labor_Category_Entry_List_Effective_Versions_Apply_Upsert_Model"
          },
          "version": {
            "type": "integer",
            "description": "The current version of the entity. This is used to ensure that an entity is not updated with stale data.",
            "format": "int64"
          },
          "updateDtm": {
            "type": "string",
            "description": "The date and time the object was last updated."
          },
          "laborCategory": {
            "$ref": "#/components/schemas/Labor_Category_Object_Reference_Model"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a labor category entry list.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a labor category entry list."
          }
        }
      }
    }
  },
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true,
    "samples-enabled": true
  }
}